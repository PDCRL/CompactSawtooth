// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `consensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusPeerMessageHeader {
    // message fields
    pub signer_id: ::std::vec::Vec<u8>,
    pub content_sha512: ::std::vec::Vec<u8>,
    pub message_type: ::std::string::String,
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusPeerMessageHeader {
    fn default() -> &'a ConsensusPeerMessageHeader {
        <ConsensusPeerMessageHeader as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusPeerMessageHeader {
    pub fn new() -> ConsensusPeerMessageHeader {
        ::std::default::Default::default()
    }

    // bytes signer_id = 1;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // bytes content_sha512 = 2;


    pub fn get_content_sha512(&self) -> &[u8] {
        &self.content_sha512
    }
    pub fn clear_content_sha512(&mut self) {
        self.content_sha512.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_sha512(&mut self, v: ::std::vec::Vec<u8>) {
        self.content_sha512 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_sha512(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content_sha512
    }

    // Take field
    pub fn take_content_sha512(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content_sha512, ::std::vec::Vec::new())
    }

    // string message_type = 5;


    pub fn get_message_type(&self) -> &str {
        &self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: ::std::string::String) {
        self.message_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }

    // Take field
    pub fn take_message_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConsensusPeerMessageHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content_sha512)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signer_id);
        }
        if !self.content_sha512.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content_sha512);
        }
        if !self.message_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.message_type);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signer_id.is_empty() {
            os.write_bytes(1, &self.signer_id)?;
        }
        if !self.content_sha512.is_empty() {
            os.write_bytes(2, &self.content_sha512)?;
        }
        if !self.message_type.is_empty() {
            os.write_string(5, &self.message_type)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusPeerMessageHeader {
        ConsensusPeerMessageHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &ConsensusPeerMessageHeader| { &m.signer_id },
                |m: &mut ConsensusPeerMessageHeader| { &mut m.signer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content_sha512",
                |m: &ConsensusPeerMessageHeader| { &m.content_sha512 },
                |m: &mut ConsensusPeerMessageHeader| { &mut m.content_sha512 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_type",
                |m: &ConsensusPeerMessageHeader| { &m.message_type },
                |m: &mut ConsensusPeerMessageHeader| { &mut m.message_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ConsensusPeerMessageHeader| { &m.name },
                |m: &mut ConsensusPeerMessageHeader| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ConsensusPeerMessageHeader| { &m.version },
                |m: &mut ConsensusPeerMessageHeader| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusPeerMessageHeader>(
                "ConsensusPeerMessageHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusPeerMessageHeader {
        static instance: ::protobuf::rt::LazyV2<ConsensusPeerMessageHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusPeerMessageHeader::new)
    }
}

impl ::protobuf::Clear for ConsensusPeerMessageHeader {
    fn clear(&mut self) {
        self.signer_id.clear();
        self.content_sha512.clear();
        self.message_type.clear();
        self.name.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusPeerMessageHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusPeerMessageHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusPeerMessage {
    // message fields
    pub header: ::std::vec::Vec<u8>,
    pub header_signature: ::std::vec::Vec<u8>,
    pub content: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusPeerMessage {
    fn default() -> &'a ConsensusPeerMessage {
        <ConsensusPeerMessage as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusPeerMessage {
    pub fn new() -> ConsensusPeerMessage {
        ::std::default::Default::default()
    }

    // bytes header = 1;


    pub fn get_header(&self) -> &[u8] {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::vec::Vec<u8>) {
        self.header = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.header, ::std::vec::Vec::new())
    }

    // bytes header_signature = 3;


    pub fn get_header_signature(&self) -> &[u8] {
        &self.header_signature
    }
    pub fn clear_header_signature(&mut self) {
        self.header_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_header_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.header_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.header_signature
    }

    // Take field
    pub fn take_header_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.header_signature, ::std::vec::Vec::new())
    }

    // bytes content = 2;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusPeerMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.header)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.header_signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.header.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header);
        }
        if !self.header_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.header_signature);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.header.is_empty() {
            os.write_bytes(1, &self.header)?;
        }
        if !self.header_signature.is_empty() {
            os.write_bytes(3, &self.header_signature)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusPeerMessage {
        ConsensusPeerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "header",
                |m: &ConsensusPeerMessage| { &m.header },
                |m: &mut ConsensusPeerMessage| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "header_signature",
                |m: &ConsensusPeerMessage| { &m.header_signature },
                |m: &mut ConsensusPeerMessage| { &mut m.header_signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &ConsensusPeerMessage| { &m.content },
                |m: &mut ConsensusPeerMessage| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusPeerMessage>(
                "ConsensusPeerMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusPeerMessage {
        static instance: ::protobuf::rt::LazyV2<ConsensusPeerMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusPeerMessage::new)
    }
}

impl ::protobuf::Clear for ConsensusPeerMessage {
    fn clear(&mut self) {
        self.header.clear();
        self.header_signature.clear();
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusPeerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusPeerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBlock {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    pub previous_id: ::std::vec::Vec<u8>,
    pub signer_id: ::std::vec::Vec<u8>,
    pub block_num: u64,
    pub payload: ::std::vec::Vec<u8>,
    pub summary: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBlock {
    fn default() -> &'a ConsensusBlock {
        <ConsensusBlock as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBlock {
    pub fn new() -> ConsensusBlock {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }

    // bytes previous_id = 2;


    pub fn get_previous_id(&self) -> &[u8] {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_id, ::std::vec::Vec::new())
    }

    // bytes signer_id = 3;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // uint64 block_num = 4;


    pub fn get_block_num(&self) -> u64 {
        self.block_num
    }
    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: u64) {
        self.block_num = v;
    }

    // bytes payload = 5;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // bytes summary = 6;


    pub fn get_summary(&self) -> &[u8] {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::vec::Vec<u8>) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.summary, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_num = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.summary)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.previous_id);
        }
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signer_id);
        }
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.payload);
        }
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.summary);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        if !self.previous_id.is_empty() {
            os.write_bytes(2, &self.previous_id)?;
        }
        if !self.signer_id.is_empty() {
            os.write_bytes(3, &self.signer_id)?;
        }
        if self.block_num != 0 {
            os.write_uint64(4, self.block_num)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(5, &self.payload)?;
        }
        if !self.summary.is_empty() {
            os.write_bytes(6, &self.summary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBlock {
        ConsensusBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusBlock| { &m.block_id },
                |m: &mut ConsensusBlock| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "previous_id",
                |m: &ConsensusBlock| { &m.previous_id },
                |m: &mut ConsensusBlock| { &mut m.previous_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &ConsensusBlock| { &m.signer_id },
                |m: &mut ConsensusBlock| { &mut m.signer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_num",
                |m: &ConsensusBlock| { &m.block_num },
                |m: &mut ConsensusBlock| { &mut m.block_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &ConsensusBlock| { &m.payload },
                |m: &mut ConsensusBlock| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "summary",
                |m: &ConsensusBlock| { &m.summary },
                |m: &mut ConsensusBlock| { &mut m.summary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusBlock>(
                "ConsensusBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusBlock {
        static instance: ::protobuf::rt::LazyV2<ConsensusBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusBlock::new)
    }
}

impl ::protobuf::Clear for ConsensusBlock {
    fn clear(&mut self) {
        self.block_id.clear();
        self.previous_id.clear();
        self.signer_id.clear();
        self.block_num = 0;
        self.payload.clear();
        self.summary.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusPeerInfo {
    // message fields
    pub peer_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusPeerInfo {
    fn default() -> &'a ConsensusPeerInfo {
        <ConsensusPeerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusPeerInfo {
    pub fn new() -> ConsensusPeerInfo {
        ::std::default::Default::default()
    }

    // bytes peer_id = 1;


    pub fn get_peer_id(&self) -> &[u8] {
        &self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peer_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusPeerInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peer_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.peer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.peer_id.is_empty() {
            os.write_bytes(1, &self.peer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusPeerInfo {
        ConsensusPeerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "peer_id",
                |m: &ConsensusPeerInfo| { &m.peer_id },
                |m: &mut ConsensusPeerInfo| { &mut m.peer_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusPeerInfo>(
                "ConsensusPeerInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusPeerInfo {
        static instance: ::protobuf::rt::LazyV2<ConsensusPeerInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusPeerInfo::new)
    }
}

impl ::protobuf::Clear for ConsensusPeerInfo {
    fn clear(&mut self) {
        self.peer_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusPeerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusPeerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSettingsEntry {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSettingsEntry {
    fn default() -> &'a ConsensusSettingsEntry {
        <ConsensusSettingsEntry as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSettingsEntry {
    pub fn new() -> ConsensusSettingsEntry {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConsensusSettingsEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSettingsEntry {
        ConsensusSettingsEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &ConsensusSettingsEntry| { &m.key },
                |m: &mut ConsensusSettingsEntry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &ConsensusSettingsEntry| { &m.value },
                |m: &mut ConsensusSettingsEntry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSettingsEntry>(
                "ConsensusSettingsEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSettingsEntry {
        static instance: ::protobuf::rt::LazyV2<ConsensusSettingsEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSettingsEntry::new)
    }
}

impl ::protobuf::Clear for ConsensusSettingsEntry {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSettingsEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSettingsEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateEntry {
    // message fields
    pub address: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateEntry {
    fn default() -> &'a ConsensusStateEntry {
        <ConsensusStateEntry as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateEntry {
    pub fn new() -> ConsensusStateEntry {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusStateEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateEntry {
        ConsensusStateEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &ConsensusStateEntry| { &m.address },
                |m: &mut ConsensusStateEntry| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ConsensusStateEntry| { &m.data },
                |m: &mut ConsensusStateEntry| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateEntry>(
                "ConsensusStateEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateEntry {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateEntry::new)
    }
}

impl ::protobuf::Clear for ConsensusStateEntry {
    fn clear(&mut self) {
        self.address.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusRegisterRequest {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub additional_protocols: ::protobuf::RepeatedField<ConsensusRegisterRequest_Protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusRegisterRequest {
    fn default() -> &'a ConsensusRegisterRequest {
        <ConsensusRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusRegisterRequest {
    pub fn new() -> ConsensusRegisterRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // repeated .ConsensusRegisterRequest.Protocol additional_protocols = 3;


    pub fn get_additional_protocols(&self) -> &[ConsensusRegisterRequest_Protocol] {
        &self.additional_protocols
    }
    pub fn clear_additional_protocols(&mut self) {
        self.additional_protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_protocols(&mut self, v: ::protobuf::RepeatedField<ConsensusRegisterRequest_Protocol>) {
        self.additional_protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_protocols(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusRegisterRequest_Protocol> {
        &mut self.additional_protocols
    }

    // Take field
    pub fn take_additional_protocols(&mut self) -> ::protobuf::RepeatedField<ConsensusRegisterRequest_Protocol> {
        ::std::mem::replace(&mut self.additional_protocols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusRegisterRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.additional_protocols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.additional_protocols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        for value in &self.additional_protocols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        for v in &self.additional_protocols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusRegisterRequest {
        ConsensusRegisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ConsensusRegisterRequest| { &m.name },
                |m: &mut ConsensusRegisterRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ConsensusRegisterRequest| { &m.version },
                |m: &mut ConsensusRegisterRequest| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusRegisterRequest_Protocol>>(
                "additional_protocols",
                |m: &ConsensusRegisterRequest| { &m.additional_protocols },
                |m: &mut ConsensusRegisterRequest| { &mut m.additional_protocols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusRegisterRequest>(
                "ConsensusRegisterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusRegisterRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusRegisterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusRegisterRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusRegisterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.additional_protocols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusRegisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusRegisterRequest_Protocol {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusRegisterRequest_Protocol {
    fn default() -> &'a ConsensusRegisterRequest_Protocol {
        <ConsensusRegisterRequest_Protocol as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusRegisterRequest_Protocol {
    pub fn new() -> ConsensusRegisterRequest_Protocol {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConsensusRegisterRequest_Protocol {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusRegisterRequest_Protocol {
        ConsensusRegisterRequest_Protocol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ConsensusRegisterRequest_Protocol| { &m.name },
                |m: &mut ConsensusRegisterRequest_Protocol| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ConsensusRegisterRequest_Protocol| { &m.version },
                |m: &mut ConsensusRegisterRequest_Protocol| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusRegisterRequest_Protocol>(
                "ConsensusRegisterRequest.Protocol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusRegisterRequest_Protocol {
        static instance: ::protobuf::rt::LazyV2<ConsensusRegisterRequest_Protocol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusRegisterRequest_Protocol::new)
    }
}

impl ::protobuf::Clear for ConsensusRegisterRequest_Protocol {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusRegisterRequest_Protocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusRegisterRequest_Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusRegisterResponse {
    // message fields
    pub status: ConsensusRegisterResponse_Status,
    pub chain_head: ::protobuf::SingularPtrField<ConsensusBlock>,
    pub peers: ::protobuf::RepeatedField<ConsensusPeerInfo>,
    pub local_peer_info: ::protobuf::SingularPtrField<ConsensusPeerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusRegisterResponse {
    fn default() -> &'a ConsensusRegisterResponse {
        <ConsensusRegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusRegisterResponse {
    pub fn new() -> ConsensusRegisterResponse {
        ::std::default::Default::default()
    }

    // .ConsensusRegisterResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusRegisterResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusRegisterResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusRegisterResponse_Status) {
        self.status = v;
    }

    // .ConsensusBlock chain_head = 2;


    pub fn get_chain_head(&self) -> &ConsensusBlock {
        self.chain_head.as_ref().unwrap_or_else(|| <ConsensusBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chain_head(&mut self) {
        self.chain_head.clear();
    }

    pub fn has_chain_head(&self) -> bool {
        self.chain_head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_head(&mut self, v: ConsensusBlock) {
        self.chain_head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_head(&mut self) -> &mut ConsensusBlock {
        if self.chain_head.is_none() {
            self.chain_head.set_default();
        }
        self.chain_head.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_head(&mut self) -> ConsensusBlock {
        self.chain_head.take().unwrap_or_else(|| ConsensusBlock::new())
    }

    // repeated .ConsensusPeerInfo peers = 3;


    pub fn get_peers(&self) -> &[ConsensusPeerInfo] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<ConsensusPeerInfo>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusPeerInfo> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<ConsensusPeerInfo> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    // .ConsensusPeerInfo local_peer_info = 4;


    pub fn get_local_peer_info(&self) -> &ConsensusPeerInfo {
        self.local_peer_info.as_ref().unwrap_or_else(|| <ConsensusPeerInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_peer_info(&mut self) {
        self.local_peer_info.clear();
    }

    pub fn has_local_peer_info(&self) -> bool {
        self.local_peer_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_peer_info(&mut self, v: ConsensusPeerInfo) {
        self.local_peer_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_peer_info(&mut self) -> &mut ConsensusPeerInfo {
        if self.local_peer_info.is_none() {
            self.local_peer_info.set_default();
        }
        self.local_peer_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_peer_info(&mut self) -> ConsensusPeerInfo {
        self.local_peer_info.take().unwrap_or_else(|| ConsensusPeerInfo::new())
    }
}

impl ::protobuf::Message for ConsensusRegisterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.chain_head {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_peer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chain_head)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_peer_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusRegisterResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.chain_head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusRegisterResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.chain_head.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.peers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusRegisterResponse {
        ConsensusRegisterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusRegisterResponse_Status>>(
                "status",
                |m: &ConsensusRegisterResponse| { &m.status },
                |m: &mut ConsensusRegisterResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                "chain_head",
                |m: &ConsensusRegisterResponse| { &m.chain_head },
                |m: &mut ConsensusRegisterResponse| { &mut m.chain_head },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                "peers",
                |m: &ConsensusRegisterResponse| { &m.peers },
                |m: &mut ConsensusRegisterResponse| { &mut m.peers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                "local_peer_info",
                |m: &ConsensusRegisterResponse| { &m.local_peer_info },
                |m: &mut ConsensusRegisterResponse| { &mut m.local_peer_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusRegisterResponse>(
                "ConsensusRegisterResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusRegisterResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusRegisterResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusRegisterResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusRegisterResponse {
    fn clear(&mut self) {
        self.status = ConsensusRegisterResponse_Status::STATUS_UNSET;
        self.chain_head.clear();
        self.peers.clear();
        self.local_peer_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusRegisterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusRegisterResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
}

impl ::protobuf::ProtobufEnum for ConsensusRegisterResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusRegisterResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusRegisterResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusRegisterResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusRegisterResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusRegisterResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusRegisterResponse_Status::NOT_READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusRegisterResponse_Status] = &[
            ConsensusRegisterResponse_Status::STATUS_UNSET,
            ConsensusRegisterResponse_Status::OK,
            ConsensusRegisterResponse_Status::BAD_REQUEST,
            ConsensusRegisterResponse_Status::SERVICE_ERROR,
            ConsensusRegisterResponse_Status::NOT_READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusRegisterResponse_Status>("ConsensusRegisterResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusRegisterResponse_Status {
}

impl ::std::default::Default for ConsensusRegisterResponse_Status {
    fn default() -> Self {
        ConsensusRegisterResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusRegisterResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyPeerConnected {
    // message fields
    pub peer_info: ::protobuf::SingularPtrField<ConsensusPeerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyPeerConnected {
    fn default() -> &'a ConsensusNotifyPeerConnected {
        <ConsensusNotifyPeerConnected as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyPeerConnected {
    pub fn new() -> ConsensusNotifyPeerConnected {
        ::std::default::Default::default()
    }

    // .ConsensusPeerInfo peer_info = 1;


    pub fn get_peer_info(&self) -> &ConsensusPeerInfo {
        self.peer_info.as_ref().unwrap_or_else(|| <ConsensusPeerInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_peer_info(&mut self) {
        self.peer_info.clear();
    }

    pub fn has_peer_info(&self) -> bool {
        self.peer_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_info(&mut self, v: ConsensusPeerInfo) {
        self.peer_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_info(&mut self) -> &mut ConsensusPeerInfo {
        if self.peer_info.is_none() {
            self.peer_info.set_default();
        }
        self.peer_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer_info(&mut self) -> ConsensusPeerInfo {
        self.peer_info.take().unwrap_or_else(|| ConsensusPeerInfo::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyPeerConnected {
    fn is_initialized(&self) -> bool {
        for v in &self.peer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.peer_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.peer_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyPeerConnected {
        ConsensusNotifyPeerConnected::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                "peer_info",
                |m: &ConsensusNotifyPeerConnected| { &m.peer_info },
                |m: &mut ConsensusNotifyPeerConnected| { &mut m.peer_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyPeerConnected>(
                "ConsensusNotifyPeerConnected",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyPeerConnected {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyPeerConnected> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyPeerConnected::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyPeerConnected {
    fn clear(&mut self) {
        self.peer_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyPeerConnected {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyPeerConnected {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyPeerDisconnected {
    // message fields
    pub peer_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyPeerDisconnected {
    fn default() -> &'a ConsensusNotifyPeerDisconnected {
        <ConsensusNotifyPeerDisconnected as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyPeerDisconnected {
    pub fn new() -> ConsensusNotifyPeerDisconnected {
        ::std::default::Default::default()
    }

    // bytes peer_id = 1;


    pub fn get_peer_id(&self) -> &[u8] {
        &self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peer_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyPeerDisconnected {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peer_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.peer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.peer_id.is_empty() {
            os.write_bytes(1, &self.peer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyPeerDisconnected {
        ConsensusNotifyPeerDisconnected::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "peer_id",
                |m: &ConsensusNotifyPeerDisconnected| { &m.peer_id },
                |m: &mut ConsensusNotifyPeerDisconnected| { &mut m.peer_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyPeerDisconnected>(
                "ConsensusNotifyPeerDisconnected",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyPeerDisconnected {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyPeerDisconnected> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyPeerDisconnected::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyPeerDisconnected {
    fn clear(&mut self) {
        self.peer_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyPeerDisconnected {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyPeerDisconnected {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyPeerMessage {
    // message fields
    pub message: ::protobuf::SingularPtrField<ConsensusPeerMessage>,
    pub sender_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyPeerMessage {
    fn default() -> &'a ConsensusNotifyPeerMessage {
        <ConsensusNotifyPeerMessage as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyPeerMessage {
    pub fn new() -> ConsensusNotifyPeerMessage {
        ::std::default::Default::default()
    }

    // .ConsensusPeerMessage message = 1;


    pub fn get_message(&self) -> &ConsensusPeerMessage {
        self.message.as_ref().unwrap_or_else(|| <ConsensusPeerMessage as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ConsensusPeerMessage) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ConsensusPeerMessage {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ConsensusPeerMessage {
        self.message.take().unwrap_or_else(|| ConsensusPeerMessage::new())
    }

    // bytes sender_id = 2;


    pub fn get_sender_id(&self) -> &[u8] {
        &self.sender_id
    }
    pub fn clear_sender_id(&mut self) {
        self.sender_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_id
    }

    // Take field
    pub fn take_sender_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyPeerMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sender_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sender_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sender_id.is_empty() {
            os.write_bytes(2, &self.sender_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyPeerMessage {
        ConsensusNotifyPeerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerMessage>>(
                "message",
                |m: &ConsensusNotifyPeerMessage| { &m.message },
                |m: &mut ConsensusNotifyPeerMessage| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sender_id",
                |m: &ConsensusNotifyPeerMessage| { &m.sender_id },
                |m: &mut ConsensusNotifyPeerMessage| { &mut m.sender_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyPeerMessage>(
                "ConsensusNotifyPeerMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyPeerMessage {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyPeerMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyPeerMessage::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyPeerMessage {
    fn clear(&mut self) {
        self.message.clear();
        self.sender_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyPeerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyPeerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockNew {
    // message fields
    pub block: ::protobuf::SingularPtrField<ConsensusBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockNew {
    fn default() -> &'a ConsensusNotifyBlockNew {
        <ConsensusNotifyBlockNew as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockNew {
    pub fn new() -> ConsensusNotifyBlockNew {
        ::std::default::Default::default()
    }

    // .ConsensusBlock block = 1;


    pub fn get_block(&self) -> &ConsensusBlock {
        self.block.as_ref().unwrap_or_else(|| <ConsensusBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: ConsensusBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut ConsensusBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> ConsensusBlock {
        self.block.take().unwrap_or_else(|| ConsensusBlock::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockNew {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockNew {
        ConsensusNotifyBlockNew::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                "block",
                |m: &ConsensusNotifyBlockNew| { &m.block },
                |m: &mut ConsensusNotifyBlockNew| { &mut m.block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyBlockNew>(
                "ConsensusNotifyBlockNew",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyBlockNew {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyBlockNew> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyBlockNew::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockNew {
    fn clear(&mut self) {
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockNew {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockNew {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockValid {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockValid {
    fn default() -> &'a ConsensusNotifyBlockValid {
        <ConsensusNotifyBlockValid as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockValid {
    pub fn new() -> ConsensusNotifyBlockValid {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockValid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockValid {
        ConsensusNotifyBlockValid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusNotifyBlockValid| { &m.block_id },
                |m: &mut ConsensusNotifyBlockValid| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyBlockValid>(
                "ConsensusNotifyBlockValid",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyBlockValid {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyBlockValid> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyBlockValid::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockValid {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockValid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockValid {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockInvalid {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockInvalid {
    fn default() -> &'a ConsensusNotifyBlockInvalid {
        <ConsensusNotifyBlockInvalid as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockInvalid {
    pub fn new() -> ConsensusNotifyBlockInvalid {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockInvalid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockInvalid {
        ConsensusNotifyBlockInvalid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusNotifyBlockInvalid| { &m.block_id },
                |m: &mut ConsensusNotifyBlockInvalid| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyBlockInvalid>(
                "ConsensusNotifyBlockInvalid",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyBlockInvalid {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyBlockInvalid> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyBlockInvalid::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockInvalid {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockInvalid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockInvalid {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockCommit {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockCommit {
    fn default() -> &'a ConsensusNotifyBlockCommit {
        <ConsensusNotifyBlockCommit as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockCommit {
    pub fn new() -> ConsensusNotifyBlockCommit {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockCommit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockCommit {
        ConsensusNotifyBlockCommit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusNotifyBlockCommit| { &m.block_id },
                |m: &mut ConsensusNotifyBlockCommit| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyBlockCommit>(
                "ConsensusNotifyBlockCommit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyBlockCommit {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyBlockCommit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyBlockCommit::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockCommit {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockCommit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockCommit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyEngineActivated {
    // message fields
    pub chain_head: ::protobuf::SingularPtrField<ConsensusBlock>,
    pub peers: ::protobuf::RepeatedField<ConsensusPeerInfo>,
    pub local_peer_info: ::protobuf::SingularPtrField<ConsensusPeerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyEngineActivated {
    fn default() -> &'a ConsensusNotifyEngineActivated {
        <ConsensusNotifyEngineActivated as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyEngineActivated {
    pub fn new() -> ConsensusNotifyEngineActivated {
        ::std::default::Default::default()
    }

    // .ConsensusBlock chain_head = 1;


    pub fn get_chain_head(&self) -> &ConsensusBlock {
        self.chain_head.as_ref().unwrap_or_else(|| <ConsensusBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chain_head(&mut self) {
        self.chain_head.clear();
    }

    pub fn has_chain_head(&self) -> bool {
        self.chain_head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_head(&mut self, v: ConsensusBlock) {
        self.chain_head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_head(&mut self) -> &mut ConsensusBlock {
        if self.chain_head.is_none() {
            self.chain_head.set_default();
        }
        self.chain_head.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_head(&mut self) -> ConsensusBlock {
        self.chain_head.take().unwrap_or_else(|| ConsensusBlock::new())
    }

    // repeated .ConsensusPeerInfo peers = 2;


    pub fn get_peers(&self) -> &[ConsensusPeerInfo] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<ConsensusPeerInfo>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusPeerInfo> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<ConsensusPeerInfo> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    // .ConsensusPeerInfo local_peer_info = 3;


    pub fn get_local_peer_info(&self) -> &ConsensusPeerInfo {
        self.local_peer_info.as_ref().unwrap_or_else(|| <ConsensusPeerInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_peer_info(&mut self) {
        self.local_peer_info.clear();
    }

    pub fn has_local_peer_info(&self) -> bool {
        self.local_peer_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_peer_info(&mut self, v: ConsensusPeerInfo) {
        self.local_peer_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_peer_info(&mut self) -> &mut ConsensusPeerInfo {
        if self.local_peer_info.is_none() {
            self.local_peer_info.set_default();
        }
        self.local_peer_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_peer_info(&mut self) -> ConsensusPeerInfo {
        self.local_peer_info.take().unwrap_or_else(|| ConsensusPeerInfo::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyEngineActivated {
    fn is_initialized(&self) -> bool {
        for v in &self.chain_head {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_peer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chain_head)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_peer_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.chain_head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.chain_head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.peers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyEngineActivated {
        ConsensusNotifyEngineActivated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                "chain_head",
                |m: &ConsensusNotifyEngineActivated| { &m.chain_head },
                |m: &mut ConsensusNotifyEngineActivated| { &mut m.chain_head },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                "peers",
                |m: &ConsensusNotifyEngineActivated| { &m.peers },
                |m: &mut ConsensusNotifyEngineActivated| { &mut m.peers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                "local_peer_info",
                |m: &ConsensusNotifyEngineActivated| { &m.local_peer_info },
                |m: &mut ConsensusNotifyEngineActivated| { &mut m.local_peer_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyEngineActivated>(
                "ConsensusNotifyEngineActivated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyEngineActivated {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyEngineActivated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyEngineActivated::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyEngineActivated {
    fn clear(&mut self) {
        self.chain_head.clear();
        self.peers.clear();
        self.local_peer_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyEngineActivated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyEngineActivated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyEngineDeactivated {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyEngineDeactivated {
    fn default() -> &'a ConsensusNotifyEngineDeactivated {
        <ConsensusNotifyEngineDeactivated as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyEngineDeactivated {
    pub fn new() -> ConsensusNotifyEngineDeactivated {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusNotifyEngineDeactivated {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyEngineDeactivated {
        ConsensusNotifyEngineDeactivated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyEngineDeactivated>(
                "ConsensusNotifyEngineDeactivated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyEngineDeactivated {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyEngineDeactivated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyEngineDeactivated::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyEngineDeactivated {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyEngineDeactivated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyEngineDeactivated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyAck {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyAck {
    fn default() -> &'a ConsensusNotifyAck {
        <ConsensusNotifyAck as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyAck {
    pub fn new() -> ConsensusNotifyAck {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusNotifyAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyAck {
        ConsensusNotifyAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusNotifyAck>(
                "ConsensusNotifyAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusNotifyAck {
        static instance: ::protobuf::rt::LazyV2<ConsensusNotifyAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusNotifyAck::new)
    }
}

impl ::protobuf::Clear for ConsensusNotifyAck {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSendToRequest {
    // message fields
    pub content: ::std::vec::Vec<u8>,
    pub message_type: ::std::string::String,
    pub receiver_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSendToRequest {
    fn default() -> &'a ConsensusSendToRequest {
        <ConsensusSendToRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSendToRequest {
    pub fn new() -> ConsensusSendToRequest {
        ::std::default::Default::default()
    }

    // bytes content = 1;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // string message_type = 3;


    pub fn get_message_type(&self) -> &str {
        &self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: ::std::string::String) {
        self.message_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }

    // Take field
    pub fn take_message_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type, ::std::string::String::new())
    }

    // bytes receiver_id = 2;


    pub fn get_receiver_id(&self) -> &[u8] {
        &self.receiver_id
    }
    pub fn clear_receiver_id(&mut self) {
        self.receiver_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.receiver_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.receiver_id
    }

    // Take field
    pub fn take_receiver_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.receiver_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusSendToRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.receiver_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.content);
        }
        if !self.message_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message_type);
        }
        if !self.receiver_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.receiver_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_bytes(1, &self.content)?;
        }
        if !self.message_type.is_empty() {
            os.write_string(3, &self.message_type)?;
        }
        if !self.receiver_id.is_empty() {
            os.write_bytes(2, &self.receiver_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSendToRequest {
        ConsensusSendToRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &ConsensusSendToRequest| { &m.content },
                |m: &mut ConsensusSendToRequest| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_type",
                |m: &ConsensusSendToRequest| { &m.message_type },
                |m: &mut ConsensusSendToRequest| { &mut m.message_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "receiver_id",
                |m: &ConsensusSendToRequest| { &m.receiver_id },
                |m: &mut ConsensusSendToRequest| { &mut m.receiver_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSendToRequest>(
                "ConsensusSendToRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSendToRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusSendToRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSendToRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusSendToRequest {
    fn clear(&mut self) {
        self.content.clear();
        self.message_type.clear();
        self.receiver_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSendToRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSendToRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSendToResponse {
    // message fields
    pub status: ConsensusSendToResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSendToResponse {
    fn default() -> &'a ConsensusSendToResponse {
        <ConsensusSendToResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSendToResponse {
    pub fn new() -> ConsensusSendToResponse {
        ::std::default::Default::default()
    }

    // .ConsensusSendToResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusSendToResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusSendToResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusSendToResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusSendToResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusSendToResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusSendToResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSendToResponse {
        ConsensusSendToResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusSendToResponse_Status>>(
                "status",
                |m: &ConsensusSendToResponse| { &m.status },
                |m: &mut ConsensusSendToResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSendToResponse>(
                "ConsensusSendToResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSendToResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusSendToResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSendToResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusSendToResponse {
    fn clear(&mut self) {
        self.status = ConsensusSendToResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSendToResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSendToResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusSendToResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_PEER = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusSendToResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusSendToResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusSendToResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusSendToResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusSendToResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusSendToResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusSendToResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusSendToResponse_Status::UNKNOWN_PEER),
            6 => ::std::option::Option::Some(ConsensusSendToResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusSendToResponse_Status] = &[
            ConsensusSendToResponse_Status::STATUS_UNSET,
            ConsensusSendToResponse_Status::OK,
            ConsensusSendToResponse_Status::BAD_REQUEST,
            ConsensusSendToResponse_Status::SERVICE_ERROR,
            ConsensusSendToResponse_Status::NOT_READY,
            ConsensusSendToResponse_Status::UNKNOWN_PEER,
            ConsensusSendToResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusSendToResponse_Status>("ConsensusSendToResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusSendToResponse_Status {
}

impl ::std::default::Default for ConsensusSendToResponse_Status {
    fn default() -> Self {
        ConsensusSendToResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSendToResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBroadcastRequest {
    // message fields
    pub content: ::std::vec::Vec<u8>,
    pub message_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBroadcastRequest {
    fn default() -> &'a ConsensusBroadcastRequest {
        <ConsensusBroadcastRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBroadcastRequest {
    pub fn new() -> ConsensusBroadcastRequest {
        ::std::default::Default::default()
    }

    // bytes content = 1;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // string message_type = 2;


    pub fn get_message_type(&self) -> &str {
        &self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: ::std::string::String) {
        self.message_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }

    // Take field
    pub fn take_message_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConsensusBroadcastRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.content);
        }
        if !self.message_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_bytes(1, &self.content)?;
        }
        if !self.message_type.is_empty() {
            os.write_string(2, &self.message_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBroadcastRequest {
        ConsensusBroadcastRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &ConsensusBroadcastRequest| { &m.content },
                |m: &mut ConsensusBroadcastRequest| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_type",
                |m: &ConsensusBroadcastRequest| { &m.message_type },
                |m: &mut ConsensusBroadcastRequest| { &mut m.message_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusBroadcastRequest>(
                "ConsensusBroadcastRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusBroadcastRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusBroadcastRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusBroadcastRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusBroadcastRequest {
    fn clear(&mut self) {
        self.content.clear();
        self.message_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBroadcastRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBroadcastRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBroadcastResponse {
    // message fields
    pub status: ConsensusBroadcastResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBroadcastResponse {
    fn default() -> &'a ConsensusBroadcastResponse {
        <ConsensusBroadcastResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBroadcastResponse {
    pub fn new() -> ConsensusBroadcastResponse {
        ::std::default::Default::default()
    }

    // .ConsensusBroadcastResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusBroadcastResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusBroadcastResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusBroadcastResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusBroadcastResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusBroadcastResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusBroadcastResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBroadcastResponse {
        ConsensusBroadcastResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusBroadcastResponse_Status>>(
                "status",
                |m: &ConsensusBroadcastResponse| { &m.status },
                |m: &mut ConsensusBroadcastResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusBroadcastResponse>(
                "ConsensusBroadcastResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusBroadcastResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusBroadcastResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusBroadcastResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusBroadcastResponse {
    fn clear(&mut self) {
        self.status = ConsensusBroadcastResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBroadcastResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBroadcastResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusBroadcastResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    NOT_ACTIVE_ENGINE = 5,
}

impl ::protobuf::ProtobufEnum for ConsensusBroadcastResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusBroadcastResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusBroadcastResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusBroadcastResponse_Status] = &[
            ConsensusBroadcastResponse_Status::STATUS_UNSET,
            ConsensusBroadcastResponse_Status::OK,
            ConsensusBroadcastResponse_Status::BAD_REQUEST,
            ConsensusBroadcastResponse_Status::SERVICE_ERROR,
            ConsensusBroadcastResponse_Status::NOT_READY,
            ConsensusBroadcastResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusBroadcastResponse_Status>("ConsensusBroadcastResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusBroadcastResponse_Status {
}

impl ::std::default::Default for ConsensusBroadcastResponse_Status {
    fn default() -> Self {
        ConsensusBroadcastResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBroadcastResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusInitializeBlockRequest {
    // message fields
    pub previous_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusInitializeBlockRequest {
    fn default() -> &'a ConsensusInitializeBlockRequest {
        <ConsensusInitializeBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusInitializeBlockRequest {
    pub fn new() -> ConsensusInitializeBlockRequest {
        ::std::default::Default::default()
    }

    // bytes previous_id = 1;


    pub fn get_previous_id(&self) -> &[u8] {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusInitializeBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.previous_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.previous_id.is_empty() {
            os.write_bytes(1, &self.previous_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusInitializeBlockRequest {
        ConsensusInitializeBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "previous_id",
                |m: &ConsensusInitializeBlockRequest| { &m.previous_id },
                |m: &mut ConsensusInitializeBlockRequest| { &mut m.previous_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusInitializeBlockRequest>(
                "ConsensusInitializeBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusInitializeBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusInitializeBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusInitializeBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusInitializeBlockRequest {
    fn clear(&mut self) {
        self.previous_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusInitializeBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusInitializeBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusInitializeBlockResponse {
    // message fields
    pub status: ConsensusInitializeBlockResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusInitializeBlockResponse {
    fn default() -> &'a ConsensusInitializeBlockResponse {
        <ConsensusInitializeBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusInitializeBlockResponse {
    pub fn new() -> ConsensusInitializeBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusInitializeBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusInitializeBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusInitializeBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusInitializeBlockResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusInitializeBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusInitializeBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusInitializeBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusInitializeBlockResponse {
        ConsensusInitializeBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusInitializeBlockResponse_Status>>(
                "status",
                |m: &ConsensusInitializeBlockResponse| { &m.status },
                |m: &mut ConsensusInitializeBlockResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusInitializeBlockResponse>(
                "ConsensusInitializeBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusInitializeBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusInitializeBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusInitializeBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusInitializeBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusInitializeBlockResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusInitializeBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusInitializeBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusInitializeBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    INVALID_STATE = 5,
    UNKNOWN_BLOCK = 6,
    NOT_ACTIVE_ENGINE = 7,
}

impl ::protobuf::ProtobufEnum for ConsensusInitializeBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusInitializeBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::INVALID_STATE),
            6 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::UNKNOWN_BLOCK),
            7 => ::std::option::Option::Some(ConsensusInitializeBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusInitializeBlockResponse_Status] = &[
            ConsensusInitializeBlockResponse_Status::STATUS_UNSET,
            ConsensusInitializeBlockResponse_Status::OK,
            ConsensusInitializeBlockResponse_Status::BAD_REQUEST,
            ConsensusInitializeBlockResponse_Status::SERVICE_ERROR,
            ConsensusInitializeBlockResponse_Status::NOT_READY,
            ConsensusInitializeBlockResponse_Status::INVALID_STATE,
            ConsensusInitializeBlockResponse_Status::UNKNOWN_BLOCK,
            ConsensusInitializeBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusInitializeBlockResponse_Status>("ConsensusInitializeBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusInitializeBlockResponse_Status {
}

impl ::std::default::Default for ConsensusInitializeBlockResponse_Status {
    fn default() -> Self {
        ConsensusInitializeBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusInitializeBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSummarizeBlockRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSummarizeBlockRequest {
    fn default() -> &'a ConsensusSummarizeBlockRequest {
        <ConsensusSummarizeBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSummarizeBlockRequest {
    pub fn new() -> ConsensusSummarizeBlockRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusSummarizeBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSummarizeBlockRequest {
        ConsensusSummarizeBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSummarizeBlockRequest>(
                "ConsensusSummarizeBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSummarizeBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusSummarizeBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSummarizeBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusSummarizeBlockRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSummarizeBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSummarizeBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSummarizeBlockResponse {
    // message fields
    pub status: ConsensusSummarizeBlockResponse_Status,
    pub summary: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSummarizeBlockResponse {
    fn default() -> &'a ConsensusSummarizeBlockResponse {
        <ConsensusSummarizeBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSummarizeBlockResponse {
    pub fn new() -> ConsensusSummarizeBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusSummarizeBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusSummarizeBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusSummarizeBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusSummarizeBlockResponse_Status) {
        self.status = v;
    }

    // bytes summary = 2;


    pub fn get_summary(&self) -> &[u8] {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::vec::Vec<u8>) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.summary, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusSummarizeBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.summary)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusSummarizeBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.summary);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusSummarizeBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.summary.is_empty() {
            os.write_bytes(2, &self.summary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSummarizeBlockResponse {
        ConsensusSummarizeBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusSummarizeBlockResponse_Status>>(
                "status",
                |m: &ConsensusSummarizeBlockResponse| { &m.status },
                |m: &mut ConsensusSummarizeBlockResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "summary",
                |m: &ConsensusSummarizeBlockResponse| { &m.summary },
                |m: &mut ConsensusSummarizeBlockResponse| { &mut m.summary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSummarizeBlockResponse>(
                "ConsensusSummarizeBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSummarizeBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusSummarizeBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSummarizeBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusSummarizeBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusSummarizeBlockResponse_Status::STATUS_UNSET;
        self.summary.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSummarizeBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSummarizeBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusSummarizeBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    INVALID_STATE = 5,
    BLOCK_NOT_READY = 6,
    NOT_ACTIVE_ENGINE = 7,
}

impl ::protobuf::ProtobufEnum for ConsensusSummarizeBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusSummarizeBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::INVALID_STATE),
            6 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::BLOCK_NOT_READY),
            7 => ::std::option::Option::Some(ConsensusSummarizeBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusSummarizeBlockResponse_Status] = &[
            ConsensusSummarizeBlockResponse_Status::STATUS_UNSET,
            ConsensusSummarizeBlockResponse_Status::OK,
            ConsensusSummarizeBlockResponse_Status::BAD_REQUEST,
            ConsensusSummarizeBlockResponse_Status::SERVICE_ERROR,
            ConsensusSummarizeBlockResponse_Status::NOT_READY,
            ConsensusSummarizeBlockResponse_Status::INVALID_STATE,
            ConsensusSummarizeBlockResponse_Status::BLOCK_NOT_READY,
            ConsensusSummarizeBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusSummarizeBlockResponse_Status>("ConsensusSummarizeBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusSummarizeBlockResponse_Status {
}

impl ::std::default::Default for ConsensusSummarizeBlockResponse_Status {
    fn default() -> Self {
        ConsensusSummarizeBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSummarizeBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusFinalizeBlockRequest {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusFinalizeBlockRequest {
    fn default() -> &'a ConsensusFinalizeBlockRequest {
        <ConsensusFinalizeBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusFinalizeBlockRequest {
    pub fn new() -> ConsensusFinalizeBlockRequest {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusFinalizeBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusFinalizeBlockRequest {
        ConsensusFinalizeBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ConsensusFinalizeBlockRequest| { &m.data },
                |m: &mut ConsensusFinalizeBlockRequest| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusFinalizeBlockRequest>(
                "ConsensusFinalizeBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusFinalizeBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusFinalizeBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusFinalizeBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusFinalizeBlockRequest {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusFinalizeBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFinalizeBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusFinalizeBlockResponse {
    // message fields
    pub status: ConsensusFinalizeBlockResponse_Status,
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusFinalizeBlockResponse {
    fn default() -> &'a ConsensusFinalizeBlockResponse {
        <ConsensusFinalizeBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusFinalizeBlockResponse {
    pub fn new() -> ConsensusFinalizeBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusFinalizeBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusFinalizeBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusFinalizeBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusFinalizeBlockResponse_Status) {
        self.status = v;
    }

    // bytes block_id = 2;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusFinalizeBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusFinalizeBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusFinalizeBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.block_id.is_empty() {
            os.write_bytes(2, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusFinalizeBlockResponse {
        ConsensusFinalizeBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusFinalizeBlockResponse_Status>>(
                "status",
                |m: &ConsensusFinalizeBlockResponse| { &m.status },
                |m: &mut ConsensusFinalizeBlockResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusFinalizeBlockResponse| { &m.block_id },
                |m: &mut ConsensusFinalizeBlockResponse| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusFinalizeBlockResponse>(
                "ConsensusFinalizeBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusFinalizeBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusFinalizeBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusFinalizeBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusFinalizeBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusFinalizeBlockResponse_Status::STATUS_UNSET;
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusFinalizeBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFinalizeBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusFinalizeBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    INVALID_STATE = 5,
    BLOCK_NOT_READY = 6,
    NOT_ACTIVE_ENGINE = 7,
}

impl ::protobuf::ProtobufEnum for ConsensusFinalizeBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusFinalizeBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::INVALID_STATE),
            6 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::BLOCK_NOT_READY),
            7 => ::std::option::Option::Some(ConsensusFinalizeBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusFinalizeBlockResponse_Status] = &[
            ConsensusFinalizeBlockResponse_Status::STATUS_UNSET,
            ConsensusFinalizeBlockResponse_Status::OK,
            ConsensusFinalizeBlockResponse_Status::BAD_REQUEST,
            ConsensusFinalizeBlockResponse_Status::SERVICE_ERROR,
            ConsensusFinalizeBlockResponse_Status::NOT_READY,
            ConsensusFinalizeBlockResponse_Status::INVALID_STATE,
            ConsensusFinalizeBlockResponse_Status::BLOCK_NOT_READY,
            ConsensusFinalizeBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusFinalizeBlockResponse_Status>("ConsensusFinalizeBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusFinalizeBlockResponse_Status {
}

impl ::std::default::Default for ConsensusFinalizeBlockResponse_Status {
    fn default() -> Self {
        ConsensusFinalizeBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFinalizeBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCancelBlockRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCancelBlockRequest {
    fn default() -> &'a ConsensusCancelBlockRequest {
        <ConsensusCancelBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCancelBlockRequest {
    pub fn new() -> ConsensusCancelBlockRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusCancelBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCancelBlockRequest {
        ConsensusCancelBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCancelBlockRequest>(
                "ConsensusCancelBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCancelBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusCancelBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCancelBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusCancelBlockRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCancelBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCancelBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCancelBlockResponse {
    // message fields
    pub status: ConsensusCancelBlockResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCancelBlockResponse {
    fn default() -> &'a ConsensusCancelBlockResponse {
        <ConsensusCancelBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCancelBlockResponse {
    pub fn new() -> ConsensusCancelBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusCancelBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusCancelBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusCancelBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusCancelBlockResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusCancelBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusCancelBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusCancelBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCancelBlockResponse {
        ConsensusCancelBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusCancelBlockResponse_Status>>(
                "status",
                |m: &ConsensusCancelBlockResponse| { &m.status },
                |m: &mut ConsensusCancelBlockResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCancelBlockResponse>(
                "ConsensusCancelBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCancelBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusCancelBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCancelBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusCancelBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusCancelBlockResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCancelBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCancelBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusCancelBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    INVALID_STATE = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusCancelBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusCancelBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::INVALID_STATE),
            6 => ::std::option::Option::Some(ConsensusCancelBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusCancelBlockResponse_Status] = &[
            ConsensusCancelBlockResponse_Status::STATUS_UNSET,
            ConsensusCancelBlockResponse_Status::OK,
            ConsensusCancelBlockResponse_Status::BAD_REQUEST,
            ConsensusCancelBlockResponse_Status::SERVICE_ERROR,
            ConsensusCancelBlockResponse_Status::NOT_READY,
            ConsensusCancelBlockResponse_Status::INVALID_STATE,
            ConsensusCancelBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusCancelBlockResponse_Status>("ConsensusCancelBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusCancelBlockResponse_Status {
}

impl ::std::default::Default for ConsensusCancelBlockResponse_Status {
    fn default() -> Self {
        ConsensusCancelBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCancelBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCheckBlocksRequest {
    // message fields
    pub block_ids: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCheckBlocksRequest {
    fn default() -> &'a ConsensusCheckBlocksRequest {
        <ConsensusCheckBlocksRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCheckBlocksRequest {
    pub fn new() -> ConsensusCheckBlocksRequest {
        ::std::default::Default::default()
    }

    // repeated bytes block_ids = 1;


    pub fn get_block_ids(&self) -> &[::std::vec::Vec<u8>] {
        &self.block_ids
    }
    pub fn clear_block_ids(&mut self) {
        self.block_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_ids(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.block_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.block_ids
    }

    // Take field
    pub fn take_block_ids(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.block_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusCheckBlocksRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.block_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.block_ids {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.block_ids {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCheckBlocksRequest {
        ConsensusCheckBlocksRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_ids",
                |m: &ConsensusCheckBlocksRequest| { &m.block_ids },
                |m: &mut ConsensusCheckBlocksRequest| { &mut m.block_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCheckBlocksRequest>(
                "ConsensusCheckBlocksRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCheckBlocksRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusCheckBlocksRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCheckBlocksRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusCheckBlocksRequest {
    fn clear(&mut self) {
        self.block_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCheckBlocksRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCheckBlocksRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCheckBlocksResponse {
    // message fields
    pub status: ConsensusCheckBlocksResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCheckBlocksResponse {
    fn default() -> &'a ConsensusCheckBlocksResponse {
        <ConsensusCheckBlocksResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCheckBlocksResponse {
    pub fn new() -> ConsensusCheckBlocksResponse {
        ::std::default::Default::default()
    }

    // .ConsensusCheckBlocksResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusCheckBlocksResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusCheckBlocksResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusCheckBlocksResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusCheckBlocksResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusCheckBlocksResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusCheckBlocksResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCheckBlocksResponse {
        ConsensusCheckBlocksResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusCheckBlocksResponse_Status>>(
                "status",
                |m: &ConsensusCheckBlocksResponse| { &m.status },
                |m: &mut ConsensusCheckBlocksResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCheckBlocksResponse>(
                "ConsensusCheckBlocksResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCheckBlocksResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusCheckBlocksResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCheckBlocksResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusCheckBlocksResponse {
    fn clear(&mut self) {
        self.status = ConsensusCheckBlocksResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCheckBlocksResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCheckBlocksResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusCheckBlocksResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusCheckBlocksResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusCheckBlocksResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusCheckBlocksResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusCheckBlocksResponse_Status] = &[
            ConsensusCheckBlocksResponse_Status::STATUS_UNSET,
            ConsensusCheckBlocksResponse_Status::OK,
            ConsensusCheckBlocksResponse_Status::BAD_REQUEST,
            ConsensusCheckBlocksResponse_Status::SERVICE_ERROR,
            ConsensusCheckBlocksResponse_Status::NOT_READY,
            ConsensusCheckBlocksResponse_Status::UNKNOWN_BLOCK,
            ConsensusCheckBlocksResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusCheckBlocksResponse_Status>("ConsensusCheckBlocksResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusCheckBlocksResponse_Status {
}

impl ::std::default::Default for ConsensusCheckBlocksResponse_Status {
    fn default() -> Self {
        ConsensusCheckBlocksResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCheckBlocksResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCommitBlockRequest {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCommitBlockRequest {
    fn default() -> &'a ConsensusCommitBlockRequest {
        <ConsensusCommitBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCommitBlockRequest {
    pub fn new() -> ConsensusCommitBlockRequest {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusCommitBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCommitBlockRequest {
        ConsensusCommitBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusCommitBlockRequest| { &m.block_id },
                |m: &mut ConsensusCommitBlockRequest| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCommitBlockRequest>(
                "ConsensusCommitBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCommitBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusCommitBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCommitBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusCommitBlockRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCommitBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCommitBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusCommitBlockResponse {
    // message fields
    pub status: ConsensusCommitBlockResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusCommitBlockResponse {
    fn default() -> &'a ConsensusCommitBlockResponse {
        <ConsensusCommitBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusCommitBlockResponse {
    pub fn new() -> ConsensusCommitBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusCommitBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusCommitBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusCommitBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusCommitBlockResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusCommitBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusCommitBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusCommitBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusCommitBlockResponse {
        ConsensusCommitBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusCommitBlockResponse_Status>>(
                "status",
                |m: &ConsensusCommitBlockResponse| { &m.status },
                |m: &mut ConsensusCommitBlockResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusCommitBlockResponse>(
                "ConsensusCommitBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusCommitBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusCommitBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusCommitBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusCommitBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusCommitBlockResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusCommitBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCommitBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusCommitBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusCommitBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusCommitBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusCommitBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusCommitBlockResponse_Status] = &[
            ConsensusCommitBlockResponse_Status::STATUS_UNSET,
            ConsensusCommitBlockResponse_Status::OK,
            ConsensusCommitBlockResponse_Status::BAD_REQUEST,
            ConsensusCommitBlockResponse_Status::SERVICE_ERROR,
            ConsensusCommitBlockResponse_Status::NOT_READY,
            ConsensusCommitBlockResponse_Status::UNKNOWN_BLOCK,
            ConsensusCommitBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusCommitBlockResponse_Status>("ConsensusCommitBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusCommitBlockResponse_Status {
}

impl ::std::default::Default for ConsensusCommitBlockResponse_Status {
    fn default() -> Self {
        ConsensusCommitBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusCommitBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusIgnoreBlockRequest {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusIgnoreBlockRequest {
    fn default() -> &'a ConsensusIgnoreBlockRequest {
        <ConsensusIgnoreBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusIgnoreBlockRequest {
    pub fn new() -> ConsensusIgnoreBlockRequest {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusIgnoreBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusIgnoreBlockRequest {
        ConsensusIgnoreBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusIgnoreBlockRequest| { &m.block_id },
                |m: &mut ConsensusIgnoreBlockRequest| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusIgnoreBlockRequest>(
                "ConsensusIgnoreBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusIgnoreBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusIgnoreBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusIgnoreBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusIgnoreBlockRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusIgnoreBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusIgnoreBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusIgnoreBlockResponse {
    // message fields
    pub status: ConsensusIgnoreBlockResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusIgnoreBlockResponse {
    fn default() -> &'a ConsensusIgnoreBlockResponse {
        <ConsensusIgnoreBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusIgnoreBlockResponse {
    pub fn new() -> ConsensusIgnoreBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusIgnoreBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusIgnoreBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusIgnoreBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusIgnoreBlockResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusIgnoreBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusIgnoreBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusIgnoreBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusIgnoreBlockResponse {
        ConsensusIgnoreBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusIgnoreBlockResponse_Status>>(
                "status",
                |m: &ConsensusIgnoreBlockResponse| { &m.status },
                |m: &mut ConsensusIgnoreBlockResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusIgnoreBlockResponse>(
                "ConsensusIgnoreBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusIgnoreBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusIgnoreBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusIgnoreBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusIgnoreBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusIgnoreBlockResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusIgnoreBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusIgnoreBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusIgnoreBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusIgnoreBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusIgnoreBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusIgnoreBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusIgnoreBlockResponse_Status] = &[
            ConsensusIgnoreBlockResponse_Status::STATUS_UNSET,
            ConsensusIgnoreBlockResponse_Status::OK,
            ConsensusIgnoreBlockResponse_Status::BAD_REQUEST,
            ConsensusIgnoreBlockResponse_Status::SERVICE_ERROR,
            ConsensusIgnoreBlockResponse_Status::NOT_READY,
            ConsensusIgnoreBlockResponse_Status::UNKNOWN_BLOCK,
            ConsensusIgnoreBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusIgnoreBlockResponse_Status>("ConsensusIgnoreBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusIgnoreBlockResponse_Status {
}

impl ::std::default::Default for ConsensusIgnoreBlockResponse_Status {
    fn default() -> Self {
        ConsensusIgnoreBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusIgnoreBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusFailBlockRequest {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusFailBlockRequest {
    fn default() -> &'a ConsensusFailBlockRequest {
        <ConsensusFailBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusFailBlockRequest {
    pub fn new() -> ConsensusFailBlockRequest {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusFailBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusFailBlockRequest {
        ConsensusFailBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusFailBlockRequest| { &m.block_id },
                |m: &mut ConsensusFailBlockRequest| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusFailBlockRequest>(
                "ConsensusFailBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusFailBlockRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusFailBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusFailBlockRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusFailBlockRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusFailBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFailBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusFailBlockResponse {
    // message fields
    pub status: ConsensusFailBlockResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusFailBlockResponse {
    fn default() -> &'a ConsensusFailBlockResponse {
        <ConsensusFailBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusFailBlockResponse {
    pub fn new() -> ConsensusFailBlockResponse {
        ::std::default::Default::default()
    }

    // .ConsensusFailBlockResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusFailBlockResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusFailBlockResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusFailBlockResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConsensusFailBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusFailBlockResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusFailBlockResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusFailBlockResponse {
        ConsensusFailBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusFailBlockResponse_Status>>(
                "status",
                |m: &ConsensusFailBlockResponse| { &m.status },
                |m: &mut ConsensusFailBlockResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusFailBlockResponse>(
                "ConsensusFailBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusFailBlockResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusFailBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusFailBlockResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusFailBlockResponse {
    fn clear(&mut self) {
        self.status = ConsensusFailBlockResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusFailBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFailBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusFailBlockResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusFailBlockResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusFailBlockResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusFailBlockResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusFailBlockResponse_Status] = &[
            ConsensusFailBlockResponse_Status::STATUS_UNSET,
            ConsensusFailBlockResponse_Status::OK,
            ConsensusFailBlockResponse_Status::BAD_REQUEST,
            ConsensusFailBlockResponse_Status::SERVICE_ERROR,
            ConsensusFailBlockResponse_Status::NOT_READY,
            ConsensusFailBlockResponse_Status::UNKNOWN_BLOCK,
            ConsensusFailBlockResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusFailBlockResponse_Status>("ConsensusFailBlockResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusFailBlockResponse_Status {
}

impl ::std::default::Default for ConsensusFailBlockResponse_Status {
    fn default() -> Self {
        ConsensusFailBlockResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusFailBlockResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBlocksGetRequest {
    // message fields
    pub block_ids: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBlocksGetRequest {
    fn default() -> &'a ConsensusBlocksGetRequest {
        <ConsensusBlocksGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBlocksGetRequest {
    pub fn new() -> ConsensusBlocksGetRequest {
        ::std::default::Default::default()
    }

    // repeated bytes block_ids = 1;


    pub fn get_block_ids(&self) -> &[::std::vec::Vec<u8>] {
        &self.block_ids
    }
    pub fn clear_block_ids(&mut self) {
        self.block_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_ids(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.block_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.block_ids
    }

    // Take field
    pub fn take_block_ids(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.block_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusBlocksGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.block_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.block_ids {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.block_ids {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBlocksGetRequest {
        ConsensusBlocksGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_ids",
                |m: &ConsensusBlocksGetRequest| { &m.block_ids },
                |m: &mut ConsensusBlocksGetRequest| { &mut m.block_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusBlocksGetRequest>(
                "ConsensusBlocksGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusBlocksGetRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusBlocksGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusBlocksGetRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusBlocksGetRequest {
    fn clear(&mut self) {
        self.block_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBlocksGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlocksGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBlocksGetResponse {
    // message fields
    pub status: ConsensusBlocksGetResponse_Status,
    pub blocks: ::protobuf::RepeatedField<ConsensusBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBlocksGetResponse {
    fn default() -> &'a ConsensusBlocksGetResponse {
        <ConsensusBlocksGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBlocksGetResponse {
    pub fn new() -> ConsensusBlocksGetResponse {
        ::std::default::Default::default()
    }

    // .ConsensusBlocksGetResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusBlocksGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusBlocksGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusBlocksGetResponse_Status) {
        self.status = v;
    }

    // repeated .ConsensusBlock blocks = 2;


    pub fn get_blocks(&self) -> &[ConsensusBlock] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<ConsensusBlock>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusBlock> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<ConsensusBlock> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusBlocksGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusBlocksGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusBlocksGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.blocks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBlocksGetResponse {
        ConsensusBlocksGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusBlocksGetResponse_Status>>(
                "status",
                |m: &ConsensusBlocksGetResponse| { &m.status },
                |m: &mut ConsensusBlocksGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                "blocks",
                |m: &ConsensusBlocksGetResponse| { &m.blocks },
                |m: &mut ConsensusBlocksGetResponse| { &mut m.blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusBlocksGetResponse>(
                "ConsensusBlocksGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusBlocksGetResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusBlocksGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusBlocksGetResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusBlocksGetResponse {
    fn clear(&mut self) {
        self.status = ConsensusBlocksGetResponse_Status::STATUS_UNSET;
        self.blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBlocksGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlocksGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusBlocksGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusBlocksGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusBlocksGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusBlocksGetResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusBlocksGetResponse_Status] = &[
            ConsensusBlocksGetResponse_Status::STATUS_UNSET,
            ConsensusBlocksGetResponse_Status::OK,
            ConsensusBlocksGetResponse_Status::BAD_REQUEST,
            ConsensusBlocksGetResponse_Status::SERVICE_ERROR,
            ConsensusBlocksGetResponse_Status::NOT_READY,
            ConsensusBlocksGetResponse_Status::UNKNOWN_BLOCK,
            ConsensusBlocksGetResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusBlocksGetResponse_Status>("ConsensusBlocksGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusBlocksGetResponse_Status {
}

impl ::std::default::Default for ConsensusBlocksGetResponse_Status {
    fn default() -> Self {
        ConsensusBlocksGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlocksGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusChainHeadGetRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusChainHeadGetRequest {
    fn default() -> &'a ConsensusChainHeadGetRequest {
        <ConsensusChainHeadGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusChainHeadGetRequest {
    pub fn new() -> ConsensusChainHeadGetRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusChainHeadGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusChainHeadGetRequest {
        ConsensusChainHeadGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusChainHeadGetRequest>(
                "ConsensusChainHeadGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusChainHeadGetRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusChainHeadGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusChainHeadGetRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusChainHeadGetRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusChainHeadGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusChainHeadGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusChainHeadGetResponse {
    // message fields
    pub status: ConsensusChainHeadGetResponse_Status,
    pub block: ::protobuf::SingularPtrField<ConsensusBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusChainHeadGetResponse {
    fn default() -> &'a ConsensusChainHeadGetResponse {
        <ConsensusChainHeadGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusChainHeadGetResponse {
    pub fn new() -> ConsensusChainHeadGetResponse {
        ::std::default::Default::default()
    }

    // .ConsensusChainHeadGetResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusChainHeadGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusChainHeadGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusChainHeadGetResponse_Status) {
        self.status = v;
    }

    // .ConsensusBlock block = 2;


    pub fn get_block(&self) -> &ConsensusBlock {
        self.block.as_ref().unwrap_or_else(|| <ConsensusBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: ConsensusBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut ConsensusBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> ConsensusBlock {
        self.block.take().unwrap_or_else(|| ConsensusBlock::new())
    }
}

impl ::protobuf::Message for ConsensusChainHeadGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusChainHeadGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusChainHeadGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusChainHeadGetResponse {
        ConsensusChainHeadGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusChainHeadGetResponse_Status>>(
                "status",
                |m: &ConsensusChainHeadGetResponse| { &m.status },
                |m: &mut ConsensusChainHeadGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                "block",
                |m: &ConsensusChainHeadGetResponse| { &m.block },
                |m: &mut ConsensusChainHeadGetResponse| { &mut m.block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusChainHeadGetResponse>(
                "ConsensusChainHeadGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusChainHeadGetResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusChainHeadGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusChainHeadGetResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusChainHeadGetResponse {
    fn clear(&mut self) {
        self.status = ConsensusChainHeadGetResponse_Status::STATUS_UNSET;
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusChainHeadGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusChainHeadGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusChainHeadGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    NO_CHAIN_HEAD = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusChainHeadGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusChainHeadGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::NO_CHAIN_HEAD),
            6 => ::std::option::Option::Some(ConsensusChainHeadGetResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusChainHeadGetResponse_Status] = &[
            ConsensusChainHeadGetResponse_Status::STATUS_UNSET,
            ConsensusChainHeadGetResponse_Status::OK,
            ConsensusChainHeadGetResponse_Status::BAD_REQUEST,
            ConsensusChainHeadGetResponse_Status::SERVICE_ERROR,
            ConsensusChainHeadGetResponse_Status::NOT_READY,
            ConsensusChainHeadGetResponse_Status::NO_CHAIN_HEAD,
            ConsensusChainHeadGetResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusChainHeadGetResponse_Status>("ConsensusChainHeadGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusChainHeadGetResponse_Status {
}

impl ::std::default::Default for ConsensusChainHeadGetResponse_Status {
    fn default() -> Self {
        ConsensusChainHeadGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusChainHeadGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSettingsGetRequest {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSettingsGetRequest {
    fn default() -> &'a ConsensusSettingsGetRequest {
        <ConsensusSettingsGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSettingsGetRequest {
    pub fn new() -> ConsensusSettingsGetRequest {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }

    // repeated string keys = 2;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusSettingsGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        for v in &self.keys {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSettingsGetRequest {
        ConsensusSettingsGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusSettingsGetRequest| { &m.block_id },
                |m: &mut ConsensusSettingsGetRequest| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &ConsensusSettingsGetRequest| { &m.keys },
                |m: &mut ConsensusSettingsGetRequest| { &mut m.keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSettingsGetRequest>(
                "ConsensusSettingsGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSettingsGetRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusSettingsGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSettingsGetRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusSettingsGetRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSettingsGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSettingsGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusSettingsGetResponse {
    // message fields
    pub status: ConsensusSettingsGetResponse_Status,
    pub entries: ::protobuf::RepeatedField<ConsensusSettingsEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusSettingsGetResponse {
    fn default() -> &'a ConsensusSettingsGetResponse {
        <ConsensusSettingsGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusSettingsGetResponse {
    pub fn new() -> ConsensusSettingsGetResponse {
        ::std::default::Default::default()
    }

    // .ConsensusSettingsGetResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusSettingsGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusSettingsGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusSettingsGetResponse_Status) {
        self.status = v;
    }

    // repeated .ConsensusSettingsEntry entries = 2;


    pub fn get_entries(&self) -> &[ConsensusSettingsEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<ConsensusSettingsEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusSettingsEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<ConsensusSettingsEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusSettingsGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusSettingsGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusSettingsGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusSettingsGetResponse {
        ConsensusSettingsGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusSettingsGetResponse_Status>>(
                "status",
                |m: &ConsensusSettingsGetResponse| { &m.status },
                |m: &mut ConsensusSettingsGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusSettingsEntry>>(
                "entries",
                |m: &ConsensusSettingsGetResponse| { &m.entries },
                |m: &mut ConsensusSettingsGetResponse| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusSettingsGetResponse>(
                "ConsensusSettingsGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusSettingsGetResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusSettingsGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusSettingsGetResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusSettingsGetResponse {
    fn clear(&mut self) {
        self.status = ConsensusSettingsGetResponse_Status::STATUS_UNSET;
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusSettingsGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSettingsGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusSettingsGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusSettingsGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusSettingsGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusSettingsGetResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusSettingsGetResponse_Status] = &[
            ConsensusSettingsGetResponse_Status::STATUS_UNSET,
            ConsensusSettingsGetResponse_Status::OK,
            ConsensusSettingsGetResponse_Status::BAD_REQUEST,
            ConsensusSettingsGetResponse_Status::SERVICE_ERROR,
            ConsensusSettingsGetResponse_Status::NOT_READY,
            ConsensusSettingsGetResponse_Status::UNKNOWN_BLOCK,
            ConsensusSettingsGetResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusSettingsGetResponse_Status>("ConsensusSettingsGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusSettingsGetResponse_Status {
}

impl ::std::default::Default for ConsensusSettingsGetResponse_Status {
    fn default() -> Self {
        ConsensusSettingsGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusSettingsGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateGetRequest {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateGetRequest {
    fn default() -> &'a ConsensusStateGetRequest {
        <ConsensusStateGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateGetRequest {
    pub fn new() -> ConsensusStateGetRequest {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }

    // repeated string addresses = 2;


    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }
    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusStateGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        for v in &self.addresses {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateGetRequest {
        ConsensusStateGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &ConsensusStateGetRequest| { &m.block_id },
                |m: &mut ConsensusStateGetRequest| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addresses",
                |m: &ConsensusStateGetRequest| { &m.addresses },
                |m: &mut ConsensusStateGetRequest| { &mut m.addresses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateGetRequest>(
                "ConsensusStateGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateGetRequest {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateGetRequest::new)
    }
}

impl ::protobuf::Clear for ConsensusStateGetRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.addresses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateGetResponse {
    // message fields
    pub status: ConsensusStateGetResponse_Status,
    pub entries: ::protobuf::RepeatedField<ConsensusStateEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateGetResponse {
    fn default() -> &'a ConsensusStateGetResponse {
        <ConsensusStateGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateGetResponse {
    pub fn new() -> ConsensusStateGetResponse {
        ::std::default::Default::default()
    }

    // .ConsensusStateGetResponse.Status status = 1;


    pub fn get_status(&self) -> ConsensusStateGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConsensusStateGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConsensusStateGetResponse_Status) {
        self.status = v;
    }

    // repeated .ConsensusStateEntry entries = 2;


    pub fn get_entries(&self) -> &[ConsensusStateEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<ConsensusStateEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusStateEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<ConsensusStateEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConsensusStateGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConsensusStateGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConsensusStateGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateGetResponse {
        ConsensusStateGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConsensusStateGetResponse_Status>>(
                "status",
                |m: &ConsensusStateGetResponse| { &m.status },
                |m: &mut ConsensusStateGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusStateEntry>>(
                "entries",
                |m: &ConsensusStateGetResponse| { &m.entries },
                |m: &mut ConsensusStateGetResponse| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateGetResponse>(
                "ConsensusStateGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateGetResponse {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateGetResponse::new)
    }
}

impl ::protobuf::Clear for ConsensusStateGetResponse {
    fn clear(&mut self) {
        self.status = ConsensusStateGetResponse_Status::STATUS_UNSET;
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusStateGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    BAD_REQUEST = 2,
    SERVICE_ERROR = 3,
    NOT_READY = 4,
    UNKNOWN_BLOCK = 5,
    NOT_ACTIVE_ENGINE = 6,
}

impl ::protobuf::ProtobufEnum for ConsensusStateGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusStateGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::BAD_REQUEST),
            3 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::SERVICE_ERROR),
            4 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::NOT_READY),
            5 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::UNKNOWN_BLOCK),
            6 => ::std::option::Option::Some(ConsensusStateGetResponse_Status::NOT_ACTIVE_ENGINE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusStateGetResponse_Status] = &[
            ConsensusStateGetResponse_Status::STATUS_UNSET,
            ConsensusStateGetResponse_Status::OK,
            ConsensusStateGetResponse_Status::BAD_REQUEST,
            ConsensusStateGetResponse_Status::SERVICE_ERROR,
            ConsensusStateGetResponse_Status::NOT_READY,
            ConsensusStateGetResponse_Status::UNKNOWN_BLOCK,
            ConsensusStateGetResponse_Status::NOT_ACTIVE_ENGINE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConsensusStateGetResponse_Status>("ConsensusStateGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConsensusStateGetResponse_Status {
}

impl ::std::default::Default for ConsensusStateGetResponse_Status {
    fn default() -> Self {
        ConsensusStateGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\"\xb1\x01\n\x1aConsensusPeerMessageHeader\x12\x1b\
    \n\tsigner_id\x18\x01\x20\x01(\x0cR\x08signerId\x12%\n\x0econtent_sha512\
    \x18\x02\x20\x01(\x0cR\rcontentSha512\x12!\n\x0cmessage_type\x18\x05\x20\
    \x01(\tR\x0bmessageType\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\
    \x12\x18\n\x07version\x18\x04\x20\x01(\tR\x07version\"s\n\x14ConsensusPe\
    erMessage\x12\x16\n\x06header\x18\x01\x20\x01(\x0cR\x06header\x12)\n\x10\
    header_signature\x18\x03\x20\x01(\x0cR\x0fheaderSignature\x12\x18\n\x07c\
    ontent\x18\x02\x20\x01(\x0cR\x07content\"\xba\x01\n\x0eConsensusBlock\
    \x12\x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\x12\x1f\n\x0bpre\
    vious_id\x18\x02\x20\x01(\x0cR\npreviousId\x12\x1b\n\tsigner_id\x18\x03\
    \x20\x01(\x0cR\x08signerId\x12\x1b\n\tblock_num\x18\x04\x20\x01(\x04R\
    \x08blockNum\x12\x18\n\x07payload\x18\x05\x20\x01(\x0cR\x07payload\x12\
    \x18\n\x07summary\x18\x06\x20\x01(\x0cR\x07summary\",\n\x11ConsensusPeer\
    Info\x12\x17\n\x07peer_id\x18\x01\x20\x01(\x0cR\x06peerId\"@\n\x16Consen\
    susSettingsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\"C\n\x13ConsensusStateEntry\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12\x12\n\x04data\x18\
    \x02\x20\x01(\x0cR\x04data\"\xd9\x01\n\x18ConsensusRegisterRequest\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\x02\
    \x20\x01(\tR\x07version\x12U\n\x14additional_protocols\x18\x03\x20\x03(\
    \x0b2\".ConsensusRegisterRequest.ProtocolR\x13additionalProtocols\x1a8\n\
    \x08Protocol\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07\
    version\x18\x02\x20\x01(\tR\x07version\"\xc3\x02\n\x19ConsensusRegisterR\
    esponse\x129\n\x06status\x18\x01\x20\x01(\x0e2!.ConsensusRegisterRespons\
    e.StatusR\x06status\x12.\n\nchain_head\x18\x02\x20\x01(\x0b2\x0f.Consens\
    usBlockR\tchainHead\x12(\n\x05peers\x18\x03\x20\x03(\x0b2\x12.ConsensusP\
    eerInfoR\x05peers\x12:\n\x0flocal_peer_info\x18\x04\x20\x01(\x0b2\x12.Co\
    nsensusPeerInfoR\rlocalPeerInfo\"U\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\
    \x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\
    \n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\"O\n\x1cConsensusNo\
    tifyPeerConnected\x12/\n\tpeer_info\x18\x01\x20\x01(\x0b2\x12.ConsensusP\
    eerInfoR\x08peerInfo\":\n\x1fConsensusNotifyPeerDisconnected\x12\x17\n\
    \x07peer_id\x18\x01\x20\x01(\x0cR\x06peerId\"j\n\x1aConsensusNotifyPeerM\
    essage\x12/\n\x07message\x18\x01\x20\x01(\x0b2\x15.ConsensusPeerMessageR\
    \x07message\x12\x1b\n\tsender_id\x18\x02\x20\x01(\x0cR\x08senderId\"@\n\
    \x17ConsensusNotifyBlockNew\x12%\n\x05block\x18\x01\x20\x01(\x0b2\x0f.Co\
    nsensusBlockR\x05block\"6\n\x19ConsensusNotifyBlockValid\x12\x19\n\x08bl\
    ock_id\x18\x01\x20\x01(\x0cR\x07blockId\"8\n\x1bConsensusNotifyBlockInva\
    lid\x12\x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\"7\n\x1aConse\
    nsusNotifyBlockCommit\x12\x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blo\
    ckId\"\xb6\x01\n\x1eConsensusNotifyEngineActivated\x12.\n\nchain_head\
    \x18\x01\x20\x01(\x0b2\x0f.ConsensusBlockR\tchainHead\x12(\n\x05peers\
    \x18\x02\x20\x03(\x0b2\x12.ConsensusPeerInfoR\x05peers\x12:\n\x0flocal_p\
    eer_info\x18\x03\x20\x01(\x0b2\x12.ConsensusPeerInfoR\rlocalPeerInfo\"\"\
    \n\x20ConsensusNotifyEngineDeactivated\"\x14\n\x12ConsensusNotifyAck\"v\
    \n\x16ConsensusSendToRequest\x12\x18\n\x07content\x18\x01\x20\x01(\x0cR\
    \x07content\x12!\n\x0cmessage_type\x18\x03\x20\x01(\tR\x0bmessageType\
    \x12\x1f\n\x0breceiver_id\x18\x02\x20\x01(\x0cR\nreceiverId\"\xd2\x01\n\
    \x17ConsensusSendToResponse\x127\n\x06status\x18\x01\x20\x01(\x0e2\x1f.C\
    onsensusSendToResponse.StatusR\x06status\"~\n\x06Status\x12\x10\n\x0cSTA\
    TUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\
    \x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x10\n\
    \x0cUNKNOWN_PEER\x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\"X\n\x19\
    ConsensusBroadcastRequest\x12\x18\n\x07content\x18\x01\x20\x01(\x0cR\x07\
    content\x12!\n\x0cmessage_type\x18\x02\x20\x01(\tR\x0bmessageType\"\xc6\
    \x01\n\x1aConsensusBroadcastResponse\x12:\n\x06status\x18\x01\x20\x01(\
    \x0e2\".ConsensusBroadcastResponse.StatusR\x06status\"l\n\x06Status\x12\
    \x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_RE\
    QUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\
    \x04\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x05\"B\n\x1fConsensusInitializeB\
    lockRequest\x12\x1f\n\x0bprevious_id\x18\x01\x20\x01(\x0cR\npreviousId\"\
    \xf9\x01\n\x20ConsensusInitializeBlockResponse\x12@\n\x06status\x18\x01\
    \x20\x01(\x0e2(.ConsensusInitializeBlockResponse.StatusR\x06status\"\x92\
    \x01\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\
    \x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\
    \n\tNOT_READY\x10\x04\x12\x11\n\rINVALID_STATE\x10\x05\x12\x11\n\rUNKNOW\
    N_BLOCK\x10\x06\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x07\"\x20\n\x1eConsen\
    susSummarizeBlockRequest\"\x93\x02\n\x1fConsensusSummarizeBlockResponse\
    \x12?\n\x06status\x18\x01\x20\x01(\x0e2'.ConsensusSummarizeBlockResponse\
    .StatusR\x06status\x12\x18\n\x07summary\x18\x02\x20\x01(\x0cR\x07summary\
    \"\x94\x01\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\
    \x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\
    \x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rINVALID_STATE\x10\x05\x12\x13\
    \n\x0fBLOCK_NOT_READY\x10\x06\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x07\"3\
    \n\x1dConsensusFinalizeBlockRequest\x12\x12\n\x04data\x18\x01\x20\x01(\
    \x0cR\x04data\"\x92\x02\n\x1eConsensusFinalizeBlockResponse\x12>\n\x06st\
    atus\x18\x01\x20\x01(\x0e2&.ConsensusFinalizeBlockResponse.StatusR\x06st\
    atus\x12\x19\n\x08block_id\x18\x02\x20\x01(\x0cR\x07blockId\"\x94\x01\n\
    \x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\
    \x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\n\t\
    NOT_READY\x10\x04\x12\x11\n\rINVALID_STATE\x10\x05\x12\x13\n\x0fBLOCK_NO\
    T_READY\x10\x06\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x07\"\x1d\n\x1bConsen\
    susCancelBlockRequest\"\xdd\x01\n\x1cConsensusCancelBlockResponse\x12<\n\
    \x06status\x18\x01\x20\x01(\x0e2$.ConsensusCancelBlockResponse.StatusR\
    \x06status\"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\
    \x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\
    \x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rINVALID_STATE\x10\x05\x12\
    \x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\":\n\x1bConsensusCheckBlocksRequest\
    \x12\x1b\n\tblock_ids\x18\x01\x20\x03(\x0cR\x08blockIds\"\xdd\x01\n\x1cC\
    onsensusCheckBlocksResponse\x12<\n\x06status\x18\x01\x20\x01(\x0e2$.Cons\
    ensusCheckBlocksResponse.StatusR\x06status\"\x7f\n\x06Status\x12\x10\n\
    \x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\
    \x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\
    \x11\n\rUNKNOWN_BLOCK\x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\"8\
    \n\x1bConsensusCommitBlockRequest\x12\x19\n\x08block_id\x18\x01\x20\x01(\
    \x0cR\x07blockId\"\xdd\x01\n\x1cConsensusCommitBlockResponse\x12<\n\x06s\
    tatus\x18\x01\x20\x01(\x0e2$.ConsensusCommitBlockResponse.StatusR\x06sta\
    tus\"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\
    \x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\
    \x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rUNKNOWN_BLOCK\x10\x05\x12\x15\
    \n\x11NOT_ACTIVE_ENGINE\x10\x06\"8\n\x1bConsensusIgnoreBlockRequest\x12\
    \x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\"\xdd\x01\n\x1cConse\
    nsusIgnoreBlockResponse\x12<\n\x06status\x18\x01\x20\x01(\x0e2$.Consensu\
    sIgnoreBlockResponse.StatusR\x06status\"\x7f\n\x06Status\x12\x10\n\x0cST\
    ATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\
    \x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\
    \n\rUNKNOWN_BLOCK\x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\"6\n\
    \x19ConsensusFailBlockRequest\x12\x19\n\x08block_id\x18\x01\x20\x01(\x0c\
    R\x07blockId\"\xd9\x01\n\x1aConsensusFailBlockResponse\x12:\n\x06status\
    \x18\x01\x20\x01(\x0e2\".ConsensusFailBlockResponse.StatusR\x06status\"\
    \x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\
    \x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\x12\r\
    \n\tNOT_READY\x10\x04\x12\x11\n\rUNKNOWN_BLOCK\x10\x05\x12\x15\n\x11NOT_\
    ACTIVE_ENGINE\x10\x06\"8\n\x19ConsensusBlocksGetRequest\x12\x1b\n\tblock\
    _ids\x18\x01\x20\x03(\x0cR\x08blockIds\"\x82\x02\n\x1aConsensusBlocksGet\
    Response\x12:\n\x06status\x18\x01\x20\x01(\x0e2\".ConsensusBlocksGetResp\
    onse.StatusR\x06status\x12'\n\x06blocks\x18\x02\x20\x03(\x0b2\x0f.Consen\
    susBlockR\x06blocks\"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\
    \x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSER\
    VICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rUNKNOWN_BLOCK\
    \x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\"\x1e\n\x1cConsensusChai\
    nHeadGetRequest\"\x86\x02\n\x1dConsensusChainHeadGetResponse\x12=\n\x06s\
    tatus\x18\x01\x20\x01(\x0e2%.ConsensusChainHeadGetResponse.StatusR\x06st\
    atus\x12%\n\x05block\x18\x02\x20\x01(\x0b2\x0f.ConsensusBlockR\x05block\
    \"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\
    \x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSERVICE_ERROR\x10\x03\
    \x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rNO_CHAIN_HEAD\x10\x05\x12\x15\n\
    \x11NOT_ACTIVE_ENGINE\x10\x06\"L\n\x1bConsensusSettingsGetRequest\x12\
    \x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\x12\x12\n\x04keys\
    \x18\x02\x20\x03(\tR\x04keys\"\x90\x02\n\x1cConsensusSettingsGetResponse\
    \x12<\n\x06status\x18\x01\x20\x01(\x0e2$.ConsensusSettingsGetResponse.St\
    atusR\x06status\x121\n\x07entries\x18\x02\x20\x03(\x0b2\x17.ConsensusSet\
    tingsEntryR\x07entries\"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\
    \x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\n\rSER\
    VICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rUNKNOWN_BLOCK\
    \x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06\"S\n\x18ConsensusStateGe\
    tRequest\x12\x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\x12\x1c\
    \n\taddresses\x18\x02\x20\x03(\tR\taddresses\"\x87\x02\n\x19ConsensusSta\
    teGetResponse\x129\n\x06status\x18\x01\x20\x01(\x0e2!.ConsensusStateGetR\
    esponse.StatusR\x06status\x12.\n\x07entries\x18\x02\x20\x03(\x0b2\x14.Co\
    nsensusStateEntryR\x07entries\"\x7f\n\x06Status\x12\x10\n\x0cSTATUS_UNSE\
    T\x10\0\x12\x06\n\x02OK\x10\x01\x12\x0f\n\x0bBAD_REQUEST\x10\x02\x12\x11\
    \n\rSERVICE_ERROR\x10\x03\x12\r\n\tNOT_READY\x10\x04\x12\x11\n\rUNKNOWN_\
    BLOCK\x10\x05\x12\x15\n\x11NOT_ACTIVE_ENGINE\x10\x06b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
