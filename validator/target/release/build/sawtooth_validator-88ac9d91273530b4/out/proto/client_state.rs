// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_state.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateListRequest {
    // message fields
    pub state_root: ::std::string::String,
    pub address: ::std::string::String,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingControls>,
    pub sorting: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateListRequest {
    fn default() -> &'a ClientStateListRequest {
        <ClientStateListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateListRequest {
    pub fn new() -> ClientStateListRequest {
        ::std::default::Default::default()
    }

    // string state_root = 1;


    pub fn get_state_root(&self) -> &str {
        &self.state_root
    }
    pub fn clear_state_root(&mut self) {
        self.state_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_root(&mut self, v: ::std::string::String) {
        self.state_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_root(&mut self) -> &mut ::std::string::String {
        &mut self.state_root
    }

    // Take field
    pub fn take_state_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state_root, ::std::string::String::new())
    }

    // string address = 3;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .ClientPagingControls paging = 4;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingControls {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingControls as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingControls) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingControls {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingControls {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingControls::new())
    }

    // repeated .ClientSortControls sorting = 5;


    pub fn get_sorting(&self) -> &[super::client_list_control::ClientSortControls] {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sorting(&mut self) -> &mut ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        ::std::mem::replace(&mut self.sorting, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientStateListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sorting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state_root)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.state_root.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.state_root);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.address);
        }
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.sorting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.state_root.is_empty() {
            os.write_string(1, &self.state_root)?;
        }
        if !self.address.is_empty() {
            os.write_string(3, &self.address)?;
        }
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.sorting {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateListRequest {
        ClientStateListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state_root",
                |m: &ClientStateListRequest| { &m.state_root },
                |m: &mut ClientStateListRequest| { &mut m.state_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &ClientStateListRequest| { &m.address },
                |m: &mut ClientStateListRequest| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingControls>>(
                "paging",
                |m: &ClientStateListRequest| { &m.paging },
                |m: &mut ClientStateListRequest| { &mut m.paging },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientSortControls>>(
                "sorting",
                |m: &ClientStateListRequest| { &m.sorting },
                |m: &mut ClientStateListRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateListRequest>(
                "ClientStateListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateListRequest {
        static instance: ::protobuf::rt::LazyV2<ClientStateListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateListRequest::new)
    }
}

impl ::protobuf::Clear for ClientStateListRequest {
    fn clear(&mut self) {
        self.state_root.clear();
        self.address.clear();
        self.paging.clear();
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateListResponse {
    // message fields
    pub status: ClientStateListResponse_Status,
    pub entries: ::protobuf::RepeatedField<ClientStateListResponse_Entry>,
    pub state_root: ::std::string::String,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateListResponse {
    fn default() -> &'a ClientStateListResponse {
        <ClientStateListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateListResponse {
    pub fn new() -> ClientStateListResponse {
        ::std::default::Default::default()
    }

    // .ClientStateListResponse.Status status = 1;


    pub fn get_status(&self) -> ClientStateListResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientStateListResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientStateListResponse_Status) {
        self.status = v;
    }

    // repeated .ClientStateListResponse.Entry entries = 2;


    pub fn get_entries(&self) -> &[ClientStateListResponse_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<ClientStateListResponse_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<ClientStateListResponse_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<ClientStateListResponse_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // string state_root = 3;


    pub fn get_state_root(&self) -> &str {
        &self.state_root
    }
    pub fn clear_state_root(&mut self) {
        self.state_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_root(&mut self, v: ::std::string::String) {
        self.state_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_root(&mut self) -> &mut ::std::string::String {
        &mut self.state_root
    }

    // Take field
    pub fn take_state_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state_root, ::std::string::String::new())
    }

    // .ClientPagingResponse paging = 4;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingResponse {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingResponse) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingResponse {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingResponse {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingResponse::new())
    }
}

impl ::protobuf::Message for ClientStateListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state_root)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientStateListResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.state_root.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.state_root);
        }
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientStateListResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.state_root.is_empty() {
            os.write_string(3, &self.state_root)?;
        }
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateListResponse {
        ClientStateListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientStateListResponse_Status>>(
                "status",
                |m: &ClientStateListResponse| { &m.status },
                |m: &mut ClientStateListResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientStateListResponse_Entry>>(
                "entries",
                |m: &ClientStateListResponse| { &m.entries },
                |m: &mut ClientStateListResponse| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state_root",
                |m: &ClientStateListResponse| { &m.state_root },
                |m: &mut ClientStateListResponse| { &mut m.state_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingResponse>>(
                "paging",
                |m: &ClientStateListResponse| { &m.paging },
                |m: &mut ClientStateListResponse| { &mut m.paging },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateListResponse>(
                "ClientStateListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateListResponse {
        static instance: ::protobuf::rt::LazyV2<ClientStateListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateListResponse::new)
    }
}

impl ::protobuf::Clear for ClientStateListResponse {
    fn clear(&mut self) {
        self.status = ClientStateListResponse_Status::STATUS_UNSET;
        self.entries.clear();
        self.state_root.clear();
        self.paging.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateListResponse_Entry {
    // message fields
    pub address: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateListResponse_Entry {
    fn default() -> &'a ClientStateListResponse_Entry {
        <ClientStateListResponse_Entry as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateListResponse_Entry {
    pub fn new() -> ClientStateListResponse_Entry {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ClientStateListResponse_Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateListResponse_Entry {
        ClientStateListResponse_Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &ClientStateListResponse_Entry| { &m.address },
                |m: &mut ClientStateListResponse_Entry| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ClientStateListResponse_Entry| { &m.data },
                |m: &mut ClientStateListResponse_Entry| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateListResponse_Entry>(
                "ClientStateListResponse.Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateListResponse_Entry {
        static instance: ::protobuf::rt::LazyV2<ClientStateListResponse_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateListResponse_Entry::new)
    }
}

impl ::protobuf::Clear for ClientStateListResponse_Entry {
    fn clear(&mut self) {
        self.address.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateListResponse_Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateListResponse_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientStateListResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NOT_READY = 3,
    NO_ROOT = 4,
    NO_RESOURCE = 5,
    INVALID_PAGING = 6,
    INVALID_SORT = 7,
    INVALID_ADDRESS = 8,
    INVALID_ROOT = 9,
}

impl ::protobuf::ProtobufEnum for ClientStateListResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientStateListResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientStateListResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientStateListResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientStateListResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientStateListResponse_Status::NOT_READY),
            4 => ::std::option::Option::Some(ClientStateListResponse_Status::NO_ROOT),
            5 => ::std::option::Option::Some(ClientStateListResponse_Status::NO_RESOURCE),
            6 => ::std::option::Option::Some(ClientStateListResponse_Status::INVALID_PAGING),
            7 => ::std::option::Option::Some(ClientStateListResponse_Status::INVALID_SORT),
            8 => ::std::option::Option::Some(ClientStateListResponse_Status::INVALID_ADDRESS),
            9 => ::std::option::Option::Some(ClientStateListResponse_Status::INVALID_ROOT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientStateListResponse_Status] = &[
            ClientStateListResponse_Status::STATUS_UNSET,
            ClientStateListResponse_Status::OK,
            ClientStateListResponse_Status::INTERNAL_ERROR,
            ClientStateListResponse_Status::NOT_READY,
            ClientStateListResponse_Status::NO_ROOT,
            ClientStateListResponse_Status::NO_RESOURCE,
            ClientStateListResponse_Status::INVALID_PAGING,
            ClientStateListResponse_Status::INVALID_SORT,
            ClientStateListResponse_Status::INVALID_ADDRESS,
            ClientStateListResponse_Status::INVALID_ROOT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientStateListResponse_Status>("ClientStateListResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientStateListResponse_Status {
}

impl ::std::default::Default for ClientStateListResponse_Status {
    fn default() -> Self {
        ClientStateListResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateListResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateGetRequest {
    // message fields
    pub state_root: ::std::string::String,
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateGetRequest {
    fn default() -> &'a ClientStateGetRequest {
        <ClientStateGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateGetRequest {
    pub fn new() -> ClientStateGetRequest {
        ::std::default::Default::default()
    }

    // string state_root = 1;


    pub fn get_state_root(&self) -> &str {
        &self.state_root
    }
    pub fn clear_state_root(&mut self) {
        self.state_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_root(&mut self, v: ::std::string::String) {
        self.state_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_root(&mut self) -> &mut ::std::string::String {
        &mut self.state_root
    }

    // Take field
    pub fn take_state_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state_root, ::std::string::String::new())
    }

    // string address = 3;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientStateGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state_root)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.state_root.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.state_root);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.state_root.is_empty() {
            os.write_string(1, &self.state_root)?;
        }
        if !self.address.is_empty() {
            os.write_string(3, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateGetRequest {
        ClientStateGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state_root",
                |m: &ClientStateGetRequest| { &m.state_root },
                |m: &mut ClientStateGetRequest| { &mut m.state_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &ClientStateGetRequest| { &m.address },
                |m: &mut ClientStateGetRequest| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateGetRequest>(
                "ClientStateGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateGetRequest {
        static instance: ::protobuf::rt::LazyV2<ClientStateGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateGetRequest::new)
    }
}

impl ::protobuf::Clear for ClientStateGetRequest {
    fn clear(&mut self) {
        self.state_root.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateGetResponse {
    // message fields
    pub status: ClientStateGetResponse_Status,
    pub value: ::std::vec::Vec<u8>,
    pub state_root: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateGetResponse {
    fn default() -> &'a ClientStateGetResponse {
        <ClientStateGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateGetResponse {
    pub fn new() -> ClientStateGetResponse {
        ::std::default::Default::default()
    }

    // .ClientStateGetResponse.Status status = 1;


    pub fn get_status(&self) -> ClientStateGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientStateGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientStateGetResponse_Status) {
        self.status = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // string state_root = 3;


    pub fn get_state_root(&self) -> &str {
        &self.state_root
    }
    pub fn clear_state_root(&mut self) {
        self.state_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_root(&mut self, v: ::std::string::String) {
        self.state_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_root(&mut self) -> &mut ::std::string::String {
        &mut self.state_root
    }

    // Take field
    pub fn take_state_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state_root, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientStateGetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state_root)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientStateGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if !self.state_root.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.state_root);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientStateGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if !self.state_root.is_empty() {
            os.write_string(3, &self.state_root)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateGetResponse {
        ClientStateGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientStateGetResponse_Status>>(
                "status",
                |m: &ClientStateGetResponse| { &m.status },
                |m: &mut ClientStateGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ClientStateGetResponse| { &m.value },
                |m: &mut ClientStateGetResponse| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state_root",
                |m: &ClientStateGetResponse| { &m.state_root },
                |m: &mut ClientStateGetResponse| { &mut m.state_root },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateGetResponse>(
                "ClientStateGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateGetResponse {
        static instance: ::protobuf::rt::LazyV2<ClientStateGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateGetResponse::new)
    }
}

impl ::protobuf::Clear for ClientStateGetResponse {
    fn clear(&mut self) {
        self.status = ClientStateGetResponse_Status::STATUS_UNSET;
        self.value.clear();
        self.state_root.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientStateGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NOT_READY = 3,
    NO_ROOT = 4,
    NO_RESOURCE = 5,
    INVALID_ADDRESS = 6,
    INVALID_ROOT = 7,
}

impl ::protobuf::ProtobufEnum for ClientStateGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientStateGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientStateGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientStateGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientStateGetResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientStateGetResponse_Status::NOT_READY),
            4 => ::std::option::Option::Some(ClientStateGetResponse_Status::NO_ROOT),
            5 => ::std::option::Option::Some(ClientStateGetResponse_Status::NO_RESOURCE),
            6 => ::std::option::Option::Some(ClientStateGetResponse_Status::INVALID_ADDRESS),
            7 => ::std::option::Option::Some(ClientStateGetResponse_Status::INVALID_ROOT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientStateGetResponse_Status] = &[
            ClientStateGetResponse_Status::STATUS_UNSET,
            ClientStateGetResponse_Status::OK,
            ClientStateGetResponse_Status::INTERNAL_ERROR,
            ClientStateGetResponse_Status::NOT_READY,
            ClientStateGetResponse_Status::NO_ROOT,
            ClientStateGetResponse_Status::NO_RESOURCE,
            ClientStateGetResponse_Status::INVALID_ADDRESS,
            ClientStateGetResponse_Status::INVALID_ROOT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientStateGetResponse_Status>("ClientStateGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientStateGetResponse_Status {
}

impl ::std::default::Default for ClientStateGetResponse_Status {
    fn default() -> Self {
        ClientStateGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12client_state.proto\x1a\x19client_list_control.proto\"\xaf\x01\n\
    \x16ClientStateListRequest\x12\x1d\n\nstate_root\x18\x01\x20\x01(\tR\tst\
    ateRoot\x12\x18\n\x07address\x18\x03\x20\x01(\tR\x07address\x12-\n\x06pa\
    ging\x18\x04\x20\x01(\x0b2\x15.ClientPagingControlsR\x06paging\x12-\n\
    \x07sorting\x18\x05\x20\x03(\x0b2\x13.ClientSortControlsR\x07sorting\"\
    \xc4\x03\n\x17ClientStateListResponse\x127\n\x06status\x18\x01\x20\x01(\
    \x0e2\x1f.ClientStateListResponse.StatusR\x06status\x128\n\x07entries\
    \x18\x02\x20\x03(\x0b2\x1e.ClientStateListResponse.EntryR\x07entries\x12\
    \x1d\n\nstate_root\x18\x03\x20\x01(\tR\tstateRoot\x12-\n\x06paging\x18\
    \x04\x20\x01(\x0b2\x15.ClientPagingResponseR\x06paging\x1a5\n\x05Entry\
    \x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12\x12\n\x04data\
    \x18\x02\x20\x01(\x0cR\x04data\"\xb0\x01\n\x06Status\x12\x10\n\x0cSTATUS\
    _UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\
    \x12\r\n\tNOT_READY\x10\x03\x12\x0b\n\x07NO_ROOT\x10\x04\x12\x0f\n\x0bNO\
    _RESOURCE\x10\x05\x12\x12\n\x0eINVALID_PAGING\x10\x06\x12\x10\n\x0cINVAL\
    ID_SORT\x10\x07\x12\x13\n\x0fINVALID_ADDRESS\x10\x08\x12\x10\n\x0cINVALI\
    D_ROOT\x10\t\"P\n\x15ClientStateGetRequest\x12\x1d\n\nstate_root\x18\x01\
    \x20\x01(\tR\tstateRoot\x12\x18\n\x07address\x18\x03\x20\x01(\tR\x07addr\
    ess\"\x92\x02\n\x16ClientStateGetResponse\x126\n\x06status\x18\x01\x20\
    \x01(\x0e2\x1e.ClientStateGetResponse.StatusR\x06status\x12\x14\n\x05val\
    ue\x18\x02\x20\x01(\x0cR\x05value\x12\x1d\n\nstate_root\x18\x03\x20\x01(\
    \tR\tstateRoot\"\x8a\x01\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\
    \x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\x12\r\n\tNOT_RE\
    ADY\x10\x03\x12\x0b\n\x07NO_ROOT\x10\x04\x12\x0f\n\x0bNO_RESOURCE\x10\
    \x05\x12\x13\n\x0fINVALID_ADDRESS\x10\x06\x12\x10\n\x0cINVALID_ROOT\x10\
    \x07B+\n\x15sawtooth.sdk.protobufP\x01Z\x10client_state_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
