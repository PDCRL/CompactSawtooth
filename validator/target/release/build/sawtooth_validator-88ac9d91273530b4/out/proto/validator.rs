// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `validator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct MessageList {
    // message fields
    pub messages: ::protobuf::RepeatedField<Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageList {
    fn default() -> &'a MessageList {
        <MessageList as ::protobuf::Message>::default_instance()
    }
}

impl MessageList {
    pub fn new() -> MessageList {
        ::std::default::Default::default()
    }

    // repeated .Message messages = 1;


    pub fn get_messages(&self) -> &[Message] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<Message>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<Message> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<Message> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MessageList {
    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageList {
        MessageList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Message>>(
                "messages",
                |m: &MessageList| { &m.messages },
                |m: &mut MessageList| { &mut m.messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageList>(
                "MessageList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageList {
        static instance: ::protobuf::rt::LazyV2<MessageList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageList::new)
    }
}

impl ::protobuf::Clear for MessageList {
    fn clear(&mut self) {
        self.messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub message_type: Message_MessageType,
    pub correlation_id: ::std::string::String,
    pub content: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .Message.MessageType message_type = 1;


    pub fn get_message_type(&self) -> Message_MessageType {
        self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type = Message_MessageType::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: Message_MessageType) {
        self.message_type = v;
    }

    // string correlation_id = 2;


    pub fn get_correlation_id(&self) -> &str {
        &self.correlation_id
    }
    pub fn clear_correlation_id(&mut self) {
        self.correlation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_correlation_id(&mut self, v: ::std::string::String) {
        self.correlation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlation_id(&mut self) -> &mut ::std::string::String {
        &mut self.correlation_id
    }

    // Take field
    pub fn take_correlation_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.correlation_id, ::std::string::String::new())
    }

    // bytes content = 3;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.message_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.correlation_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_type != Message_MessageType::DEFAULT {
            my_size += ::protobuf::rt::enum_size(1, self.message_type);
        }
        if !self.correlation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.correlation_id);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_type != Message_MessageType::DEFAULT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.message_type))?;
        }
        if !self.correlation_id.is_empty() {
            os.write_string(2, &self.correlation_id)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(3, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Message_MessageType>>(
                "message_type",
                |m: &Message| { &m.message_type },
                |m: &mut Message| { &mut m.message_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "correlation_id",
                |m: &Message| { &m.correlation_id },
                |m: &mut Message| { &mut m.correlation_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &Message| { &m.content },
                |m: &mut Message| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.message_type = Message_MessageType::DEFAULT;
        self.correlation_id.clear();
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Message_MessageType {
    DEFAULT = 0,
    TP_REGISTER_REQUEST = 1,
    TP_REGISTER_RESPONSE = 2,
    TP_UNREGISTER_REQUEST = 3,
    TP_UNREGISTER_RESPONSE = 4,
    TP_PROCESS_REQUEST = 5,
    TP_PROCESS_RESPONSE = 6,
    TP_STATE_GET_REQUEST = 7,
    TP_STATE_GET_RESPONSE = 8,
    TP_STATE_SET_REQUEST = 9,
    TP_STATE_SET_RESPONSE = 10,
    TP_STATE_DELETE_REQUEST = 11,
    TP_STATE_DELETE_RESPONSE = 12,
    TP_RECEIPT_ADD_DATA_REQUEST = 13,
    TP_RECEIPT_ADD_DATA_RESPONSE = 14,
    TP_EVENT_ADD_REQUEST = 15,
    TP_EVENT_ADD_RESPONSE = 16,
    CLIENT_BATCH_SUBMIT_REQUEST = 100,
    CLIENT_BATCH_SUBMIT_RESPONSE = 101,
    CLIENT_BLOCK_LIST_REQUEST = 102,
    CLIENT_BLOCK_LIST_RESPONSE = 103,
    CLIENT_BLOCK_GET_BY_ID_REQUEST = 104,
    CLIENT_BLOCK_GET_RESPONSE = 105,
    CLIENT_BATCH_LIST_REQUEST = 106,
    CLIENT_BATCH_LIST_RESPONSE = 107,
    CLIENT_BATCH_GET_REQUEST = 108,
    CLIENT_BATCH_GET_RESPONSE = 109,
    CLIENT_TRANSACTION_LIST_REQUEST = 110,
    CLIENT_TRANSACTION_LIST_RESPONSE = 111,
    CLIENT_TRANSACTION_GET_REQUEST = 112,
    CLIENT_TRANSACTION_GET_RESPONSE = 113,
    CLIENT_STATE_CURRENT_REQUEST = 114,
    CLIENT_STATE_CURRENT_RESPONSE = 115,
    CLIENT_STATE_LIST_REQUEST = 116,
    CLIENT_STATE_LIST_RESPONSE = 117,
    CLIENT_STATE_GET_REQUEST = 118,
    CLIENT_STATE_GET_RESPONSE = 119,
    CLIENT_BATCH_STATUS_REQUEST = 120,
    CLIENT_BATCH_STATUS_RESPONSE = 121,
    CLIENT_RECEIPT_GET_REQUEST = 122,
    CLIENT_RECEIPT_GET_RESPONSE = 123,
    CLIENT_BLOCK_GET_BY_NUM_REQUEST = 124,
    CLIENT_PEERS_GET_REQUEST = 125,
    CLIENT_PEERS_GET_RESPONSE = 126,
    CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST = 127,
    CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST = 128,
    CLIENT_STATUS_GET_REQUEST = 129,
    CLIENT_STATUS_GET_RESPONSE = 130,
    CLIENT_EVENTS_SUBSCRIBE_REQUEST = 500,
    CLIENT_EVENTS_SUBSCRIBE_RESPONSE = 501,
    CLIENT_EVENTS_UNSUBSCRIBE_REQUEST = 502,
    CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE = 503,
    CLIENT_EVENTS = 504,
    CLIENT_EVENTS_GET_REQUEST = 505,
    CLIENT_EVENTS_GET_RESPONSE = 506,
    GOSSIP_MESSAGE = 200,
    GOSSIP_REGISTER = 201,
    GOSSIP_UNREGISTER = 202,
    GOSSIP_BLOCK_REQUEST = 205,
    GOSSIP_BLOCK_RESPONSE = 206,
    GOSSIP_BATCH_BY_BATCH_ID_REQUEST = 207,
    GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST = 208,
    GOSSIP_BATCH_RESPONSE = 209,
    GOSSIP_GET_PEERS_REQUEST = 210,
    GOSSIP_GET_PEERS_RESPONSE = 211,
    GOSSIP_CONSENSUS_MESSAGE = 212,
    NETWORK_ACK = 300,
    NETWORK_CONNECT = 301,
    NETWORK_DISCONNECT = 302,
    AUTHORIZATION_CONNECTION_RESPONSE = 600,
    AUTHORIZATION_VIOLATION = 601,
    AUTHORIZATION_TRUST_REQUEST = 602,
    AUTHORIZATION_TRUST_RESPONSE = 603,
    AUTHORIZATION_CHALLENGE_REQUEST = 604,
    AUTHORIZATION_CHALLENGE_RESPONSE = 605,
    AUTHORIZATION_CHALLENGE_SUBMIT = 606,
    AUTHORIZATION_CHALLENGE_RESULT = 607,
    PING_REQUEST = 700,
    PING_RESPONSE = 701,
    CONSENSUS_REGISTER_REQUEST = 800,
    CONSENSUS_REGISTER_RESPONSE = 801,
    CONSENSUS_SEND_TO_REQUEST = 802,
    CONSENSUS_SEND_TO_RESPONSE = 803,
    CONSENSUS_BROADCAST_REQUEST = 804,
    CONSENSUS_BROADCAST_RESPONSE = 805,
    CONSENSUS_INITIALIZE_BLOCK_REQUEST = 806,
    CONSENSUS_INITIALIZE_BLOCK_RESPONSE = 807,
    CONSENSUS_FINALIZE_BLOCK_REQUEST = 808,
    CONSENSUS_FINALIZE_BLOCK_RESPONSE = 809,
    CONSENSUS_SUMMARIZE_BLOCK_REQUEST = 828,
    CONSENSUS_SUMMARIZE_BLOCK_RESPONSE = 829,
    CONSENSUS_CANCEL_BLOCK_REQUEST = 810,
    CONSENSUS_CANCEL_BLOCK_RESPONSE = 811,
    CONSENSUS_CHECK_BLOCKS_REQUEST = 812,
    CONSENSUS_CHECK_BLOCKS_RESPONSE = 813,
    CONSENSUS_COMMIT_BLOCK_REQUEST = 814,
    CONSENSUS_COMMIT_BLOCK_RESPONSE = 815,
    CONSENSUS_IGNORE_BLOCK_REQUEST = 816,
    CONSENSUS_IGNORE_BLOCK_RESPONSE = 817,
    CONSENSUS_FAIL_BLOCK_REQUEST = 818,
    CONSENSUS_FAIL_BLOCK_RESPONSE = 819,
    CONSENSUS_SETTINGS_GET_REQUEST = 820,
    CONSENSUS_SETTINGS_GET_RESPONSE = 821,
    CONSENSUS_STATE_GET_REQUEST = 822,
    CONSENSUS_STATE_GET_RESPONSE = 823,
    CONSENSUS_BLOCKS_GET_REQUEST = 824,
    CONSENSUS_BLOCKS_GET_RESPONSE = 825,
    CONSENSUS_CHAIN_HEAD_GET_REQUEST = 826,
    CONSENSUS_CHAIN_HEAD_GET_RESPONSE = 827,
    CONSENSUS_NOTIFY_PEER_CONNECTED = 900,
    CONSENSUS_NOTIFY_PEER_DISCONNECTED = 901,
    CONSENSUS_NOTIFY_PEER_MESSAGE = 902,
    CONSENSUS_NOTIFY_BLOCK_NEW = 903,
    CONSENSUS_NOTIFY_BLOCK_VALID = 904,
    CONSENSUS_NOTIFY_BLOCK_INVALID = 905,
    CONSENSUS_NOTIFY_BLOCK_COMMIT = 906,
    CONSENSUS_NOTIFY_ENGINE_ACTIVATED = 907,
    CONSENSUS_NOTIFY_ENGINE_DEACTIVATED = 908,
    CONSENSUS_NOTIFY_ACK = 999,
}

impl ::protobuf::ProtobufEnum for Message_MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Message_MessageType> {
        match value {
            0 => ::std::option::Option::Some(Message_MessageType::DEFAULT),
            1 => ::std::option::Option::Some(Message_MessageType::TP_REGISTER_REQUEST),
            2 => ::std::option::Option::Some(Message_MessageType::TP_REGISTER_RESPONSE),
            3 => ::std::option::Option::Some(Message_MessageType::TP_UNREGISTER_REQUEST),
            4 => ::std::option::Option::Some(Message_MessageType::TP_UNREGISTER_RESPONSE),
            5 => ::std::option::Option::Some(Message_MessageType::TP_PROCESS_REQUEST),
            6 => ::std::option::Option::Some(Message_MessageType::TP_PROCESS_RESPONSE),
            7 => ::std::option::Option::Some(Message_MessageType::TP_STATE_GET_REQUEST),
            8 => ::std::option::Option::Some(Message_MessageType::TP_STATE_GET_RESPONSE),
            9 => ::std::option::Option::Some(Message_MessageType::TP_STATE_SET_REQUEST),
            10 => ::std::option::Option::Some(Message_MessageType::TP_STATE_SET_RESPONSE),
            11 => ::std::option::Option::Some(Message_MessageType::TP_STATE_DELETE_REQUEST),
            12 => ::std::option::Option::Some(Message_MessageType::TP_STATE_DELETE_RESPONSE),
            13 => ::std::option::Option::Some(Message_MessageType::TP_RECEIPT_ADD_DATA_REQUEST),
            14 => ::std::option::Option::Some(Message_MessageType::TP_RECEIPT_ADD_DATA_RESPONSE),
            15 => ::std::option::Option::Some(Message_MessageType::TP_EVENT_ADD_REQUEST),
            16 => ::std::option::Option::Some(Message_MessageType::TP_EVENT_ADD_RESPONSE),
            100 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_SUBMIT_REQUEST),
            101 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_SUBMIT_RESPONSE),
            102 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_LIST_REQUEST),
            103 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_LIST_RESPONSE),
            104 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_GET_BY_ID_REQUEST),
            105 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_GET_RESPONSE),
            106 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_LIST_REQUEST),
            107 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_LIST_RESPONSE),
            108 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_GET_REQUEST),
            109 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_GET_RESPONSE),
            110 => ::std::option::Option::Some(Message_MessageType::CLIENT_TRANSACTION_LIST_REQUEST),
            111 => ::std::option::Option::Some(Message_MessageType::CLIENT_TRANSACTION_LIST_RESPONSE),
            112 => ::std::option::Option::Some(Message_MessageType::CLIENT_TRANSACTION_GET_REQUEST),
            113 => ::std::option::Option::Some(Message_MessageType::CLIENT_TRANSACTION_GET_RESPONSE),
            114 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_CURRENT_REQUEST),
            115 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_CURRENT_RESPONSE),
            116 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_LIST_REQUEST),
            117 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_LIST_RESPONSE),
            118 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_GET_REQUEST),
            119 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATE_GET_RESPONSE),
            120 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_STATUS_REQUEST),
            121 => ::std::option::Option::Some(Message_MessageType::CLIENT_BATCH_STATUS_RESPONSE),
            122 => ::std::option::Option::Some(Message_MessageType::CLIENT_RECEIPT_GET_REQUEST),
            123 => ::std::option::Option::Some(Message_MessageType::CLIENT_RECEIPT_GET_RESPONSE),
            124 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_GET_BY_NUM_REQUEST),
            125 => ::std::option::Option::Some(Message_MessageType::CLIENT_PEERS_GET_REQUEST),
            126 => ::std::option::Option::Some(Message_MessageType::CLIENT_PEERS_GET_RESPONSE),
            127 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST),
            128 => ::std::option::Option::Some(Message_MessageType::CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST),
            129 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATUS_GET_REQUEST),
            130 => ::std::option::Option::Some(Message_MessageType::CLIENT_STATUS_GET_RESPONSE),
            500 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_SUBSCRIBE_REQUEST),
            501 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_SUBSCRIBE_RESPONSE),
            502 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_UNSUBSCRIBE_REQUEST),
            503 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE),
            504 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS),
            505 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_GET_REQUEST),
            506 => ::std::option::Option::Some(Message_MessageType::CLIENT_EVENTS_GET_RESPONSE),
            200 => ::std::option::Option::Some(Message_MessageType::GOSSIP_MESSAGE),
            201 => ::std::option::Option::Some(Message_MessageType::GOSSIP_REGISTER),
            202 => ::std::option::Option::Some(Message_MessageType::GOSSIP_UNREGISTER),
            205 => ::std::option::Option::Some(Message_MessageType::GOSSIP_BLOCK_REQUEST),
            206 => ::std::option::Option::Some(Message_MessageType::GOSSIP_BLOCK_RESPONSE),
            207 => ::std::option::Option::Some(Message_MessageType::GOSSIP_BATCH_BY_BATCH_ID_REQUEST),
            208 => ::std::option::Option::Some(Message_MessageType::GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST),
            209 => ::std::option::Option::Some(Message_MessageType::GOSSIP_BATCH_RESPONSE),
            210 => ::std::option::Option::Some(Message_MessageType::GOSSIP_GET_PEERS_REQUEST),
            211 => ::std::option::Option::Some(Message_MessageType::GOSSIP_GET_PEERS_RESPONSE),
            212 => ::std::option::Option::Some(Message_MessageType::GOSSIP_CONSENSUS_MESSAGE),
            300 => ::std::option::Option::Some(Message_MessageType::NETWORK_ACK),
            301 => ::std::option::Option::Some(Message_MessageType::NETWORK_CONNECT),
            302 => ::std::option::Option::Some(Message_MessageType::NETWORK_DISCONNECT),
            600 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_CONNECTION_RESPONSE),
            601 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_VIOLATION),
            602 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_TRUST_REQUEST),
            603 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_TRUST_RESPONSE),
            604 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_CHALLENGE_REQUEST),
            605 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_CHALLENGE_RESPONSE),
            606 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_CHALLENGE_SUBMIT),
            607 => ::std::option::Option::Some(Message_MessageType::AUTHORIZATION_CHALLENGE_RESULT),
            700 => ::std::option::Option::Some(Message_MessageType::PING_REQUEST),
            701 => ::std::option::Option::Some(Message_MessageType::PING_RESPONSE),
            800 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_REGISTER_REQUEST),
            801 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_REGISTER_RESPONSE),
            802 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SEND_TO_REQUEST),
            803 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SEND_TO_RESPONSE),
            804 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_BROADCAST_REQUEST),
            805 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_BROADCAST_RESPONSE),
            806 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_INITIALIZE_BLOCK_REQUEST),
            807 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_INITIALIZE_BLOCK_RESPONSE),
            808 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_FINALIZE_BLOCK_REQUEST),
            809 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_FINALIZE_BLOCK_RESPONSE),
            828 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SUMMARIZE_BLOCK_REQUEST),
            829 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SUMMARIZE_BLOCK_RESPONSE),
            810 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CANCEL_BLOCK_REQUEST),
            811 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CANCEL_BLOCK_RESPONSE),
            812 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CHECK_BLOCKS_REQUEST),
            813 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CHECK_BLOCKS_RESPONSE),
            814 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_COMMIT_BLOCK_REQUEST),
            815 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_COMMIT_BLOCK_RESPONSE),
            816 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_IGNORE_BLOCK_REQUEST),
            817 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_IGNORE_BLOCK_RESPONSE),
            818 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_FAIL_BLOCK_REQUEST),
            819 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_FAIL_BLOCK_RESPONSE),
            820 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SETTINGS_GET_REQUEST),
            821 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_SETTINGS_GET_RESPONSE),
            822 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_STATE_GET_REQUEST),
            823 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_STATE_GET_RESPONSE),
            824 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_BLOCKS_GET_REQUEST),
            825 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_BLOCKS_GET_RESPONSE),
            826 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CHAIN_HEAD_GET_REQUEST),
            827 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_CHAIN_HEAD_GET_RESPONSE),
            900 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_PEER_CONNECTED),
            901 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_PEER_DISCONNECTED),
            902 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_PEER_MESSAGE),
            903 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_BLOCK_NEW),
            904 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_BLOCK_VALID),
            905 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_BLOCK_INVALID),
            906 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_BLOCK_COMMIT),
            907 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_ENGINE_ACTIVATED),
            908 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_ENGINE_DEACTIVATED),
            999 => ::std::option::Option::Some(Message_MessageType::CONSENSUS_NOTIFY_ACK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Message_MessageType] = &[
            Message_MessageType::DEFAULT,
            Message_MessageType::TP_REGISTER_REQUEST,
            Message_MessageType::TP_REGISTER_RESPONSE,
            Message_MessageType::TP_UNREGISTER_REQUEST,
            Message_MessageType::TP_UNREGISTER_RESPONSE,
            Message_MessageType::TP_PROCESS_REQUEST,
            Message_MessageType::TP_PROCESS_RESPONSE,
            Message_MessageType::TP_STATE_GET_REQUEST,
            Message_MessageType::TP_STATE_GET_RESPONSE,
            Message_MessageType::TP_STATE_SET_REQUEST,
            Message_MessageType::TP_STATE_SET_RESPONSE,
            Message_MessageType::TP_STATE_DELETE_REQUEST,
            Message_MessageType::TP_STATE_DELETE_RESPONSE,
            Message_MessageType::TP_RECEIPT_ADD_DATA_REQUEST,
            Message_MessageType::TP_RECEIPT_ADD_DATA_RESPONSE,
            Message_MessageType::TP_EVENT_ADD_REQUEST,
            Message_MessageType::TP_EVENT_ADD_RESPONSE,
            Message_MessageType::CLIENT_BATCH_SUBMIT_REQUEST,
            Message_MessageType::CLIENT_BATCH_SUBMIT_RESPONSE,
            Message_MessageType::CLIENT_BLOCK_LIST_REQUEST,
            Message_MessageType::CLIENT_BLOCK_LIST_RESPONSE,
            Message_MessageType::CLIENT_BLOCK_GET_BY_ID_REQUEST,
            Message_MessageType::CLIENT_BLOCK_GET_RESPONSE,
            Message_MessageType::CLIENT_BATCH_LIST_REQUEST,
            Message_MessageType::CLIENT_BATCH_LIST_RESPONSE,
            Message_MessageType::CLIENT_BATCH_GET_REQUEST,
            Message_MessageType::CLIENT_BATCH_GET_RESPONSE,
            Message_MessageType::CLIENT_TRANSACTION_LIST_REQUEST,
            Message_MessageType::CLIENT_TRANSACTION_LIST_RESPONSE,
            Message_MessageType::CLIENT_TRANSACTION_GET_REQUEST,
            Message_MessageType::CLIENT_TRANSACTION_GET_RESPONSE,
            Message_MessageType::CLIENT_STATE_CURRENT_REQUEST,
            Message_MessageType::CLIENT_STATE_CURRENT_RESPONSE,
            Message_MessageType::CLIENT_STATE_LIST_REQUEST,
            Message_MessageType::CLIENT_STATE_LIST_RESPONSE,
            Message_MessageType::CLIENT_STATE_GET_REQUEST,
            Message_MessageType::CLIENT_STATE_GET_RESPONSE,
            Message_MessageType::CLIENT_BATCH_STATUS_REQUEST,
            Message_MessageType::CLIENT_BATCH_STATUS_RESPONSE,
            Message_MessageType::CLIENT_RECEIPT_GET_REQUEST,
            Message_MessageType::CLIENT_RECEIPT_GET_RESPONSE,
            Message_MessageType::CLIENT_BLOCK_GET_BY_NUM_REQUEST,
            Message_MessageType::CLIENT_PEERS_GET_REQUEST,
            Message_MessageType::CLIENT_PEERS_GET_RESPONSE,
            Message_MessageType::CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST,
            Message_MessageType::CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST,
            Message_MessageType::CLIENT_STATUS_GET_REQUEST,
            Message_MessageType::CLIENT_STATUS_GET_RESPONSE,
            Message_MessageType::CLIENT_EVENTS_SUBSCRIBE_REQUEST,
            Message_MessageType::CLIENT_EVENTS_SUBSCRIBE_RESPONSE,
            Message_MessageType::CLIENT_EVENTS_UNSUBSCRIBE_REQUEST,
            Message_MessageType::CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE,
            Message_MessageType::CLIENT_EVENTS,
            Message_MessageType::CLIENT_EVENTS_GET_REQUEST,
            Message_MessageType::CLIENT_EVENTS_GET_RESPONSE,
            Message_MessageType::GOSSIP_MESSAGE,
            Message_MessageType::GOSSIP_REGISTER,
            Message_MessageType::GOSSIP_UNREGISTER,
            Message_MessageType::GOSSIP_BLOCK_REQUEST,
            Message_MessageType::GOSSIP_BLOCK_RESPONSE,
            Message_MessageType::GOSSIP_BATCH_BY_BATCH_ID_REQUEST,
            Message_MessageType::GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST,
            Message_MessageType::GOSSIP_BATCH_RESPONSE,
            Message_MessageType::GOSSIP_GET_PEERS_REQUEST,
            Message_MessageType::GOSSIP_GET_PEERS_RESPONSE,
            Message_MessageType::GOSSIP_CONSENSUS_MESSAGE,
            Message_MessageType::NETWORK_ACK,
            Message_MessageType::NETWORK_CONNECT,
            Message_MessageType::NETWORK_DISCONNECT,
            Message_MessageType::AUTHORIZATION_CONNECTION_RESPONSE,
            Message_MessageType::AUTHORIZATION_VIOLATION,
            Message_MessageType::AUTHORIZATION_TRUST_REQUEST,
            Message_MessageType::AUTHORIZATION_TRUST_RESPONSE,
            Message_MessageType::AUTHORIZATION_CHALLENGE_REQUEST,
            Message_MessageType::AUTHORIZATION_CHALLENGE_RESPONSE,
            Message_MessageType::AUTHORIZATION_CHALLENGE_SUBMIT,
            Message_MessageType::AUTHORIZATION_CHALLENGE_RESULT,
            Message_MessageType::PING_REQUEST,
            Message_MessageType::PING_RESPONSE,
            Message_MessageType::CONSENSUS_REGISTER_REQUEST,
            Message_MessageType::CONSENSUS_REGISTER_RESPONSE,
            Message_MessageType::CONSENSUS_SEND_TO_REQUEST,
            Message_MessageType::CONSENSUS_SEND_TO_RESPONSE,
            Message_MessageType::CONSENSUS_BROADCAST_REQUEST,
            Message_MessageType::CONSENSUS_BROADCAST_RESPONSE,
            Message_MessageType::CONSENSUS_INITIALIZE_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_INITIALIZE_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_FINALIZE_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_FINALIZE_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_SUMMARIZE_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_SUMMARIZE_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_CANCEL_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_CANCEL_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_CHECK_BLOCKS_REQUEST,
            Message_MessageType::CONSENSUS_CHECK_BLOCKS_RESPONSE,
            Message_MessageType::CONSENSUS_COMMIT_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_COMMIT_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_IGNORE_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_IGNORE_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_FAIL_BLOCK_REQUEST,
            Message_MessageType::CONSENSUS_FAIL_BLOCK_RESPONSE,
            Message_MessageType::CONSENSUS_SETTINGS_GET_REQUEST,
            Message_MessageType::CONSENSUS_SETTINGS_GET_RESPONSE,
            Message_MessageType::CONSENSUS_STATE_GET_REQUEST,
            Message_MessageType::CONSENSUS_STATE_GET_RESPONSE,
            Message_MessageType::CONSENSUS_BLOCKS_GET_REQUEST,
            Message_MessageType::CONSENSUS_BLOCKS_GET_RESPONSE,
            Message_MessageType::CONSENSUS_CHAIN_HEAD_GET_REQUEST,
            Message_MessageType::CONSENSUS_CHAIN_HEAD_GET_RESPONSE,
            Message_MessageType::CONSENSUS_NOTIFY_PEER_CONNECTED,
            Message_MessageType::CONSENSUS_NOTIFY_PEER_DISCONNECTED,
            Message_MessageType::CONSENSUS_NOTIFY_PEER_MESSAGE,
            Message_MessageType::CONSENSUS_NOTIFY_BLOCK_NEW,
            Message_MessageType::CONSENSUS_NOTIFY_BLOCK_VALID,
            Message_MessageType::CONSENSUS_NOTIFY_BLOCK_INVALID,
            Message_MessageType::CONSENSUS_NOTIFY_BLOCK_COMMIT,
            Message_MessageType::CONSENSUS_NOTIFY_ENGINE_ACTIVATED,
            Message_MessageType::CONSENSUS_NOTIFY_ENGINE_DEACTIVATED,
            Message_MessageType::CONSENSUS_NOTIFY_ACK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Message_MessageType>("Message.MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Message_MessageType {
}

impl ::std::default::Default for Message_MessageType {
    fn default() -> Self {
        Message_MessageType::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for Message_MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fvalidator.proto\"3\n\x0bMessageList\x12$\n\x08messages\x18\x01\x20\
    \x03(\x0b2\x08.MessageR\x08messages\"\xf7\x1f\n\x07Message\x127\n\x0cmes\
    sage_type\x18\x01\x20\x01(\x0e2\x14.Message.MessageTypeR\x0bmessageType\
    \x12%\n\x0ecorrelation_id\x18\x02\x20\x01(\tR\rcorrelationId\x12\x18\n\
    \x07content\x18\x03\x20\x01(\x0cR\x07content\"\xf1\x1e\n\x0bMessageType\
    \x12\x0b\n\x07DEFAULT\x10\0\x12\x17\n\x13TP_REGISTER_REQUEST\x10\x01\x12\
    \x18\n\x14TP_REGISTER_RESPONSE\x10\x02\x12\x19\n\x15TP_UNREGISTER_REQUES\
    T\x10\x03\x12\x1a\n\x16TP_UNREGISTER_RESPONSE\x10\x04\x12\x16\n\x12TP_PR\
    OCESS_REQUEST\x10\x05\x12\x17\n\x13TP_PROCESS_RESPONSE\x10\x06\x12\x18\n\
    \x14TP_STATE_GET_REQUEST\x10\x07\x12\x19\n\x15TP_STATE_GET_RESPONSE\x10\
    \x08\x12\x18\n\x14TP_STATE_SET_REQUEST\x10\t\x12\x19\n\x15TP_STATE_SET_R\
    ESPONSE\x10\n\x12\x1b\n\x17TP_STATE_DELETE_REQUEST\x10\x0b\x12\x1c\n\x18\
    TP_STATE_DELETE_RESPONSE\x10\x0c\x12\x1f\n\x1bTP_RECEIPT_ADD_DATA_REQUES\
    T\x10\r\x12\x20\n\x1cTP_RECEIPT_ADD_DATA_RESPONSE\x10\x0e\x12\x18\n\x14T\
    P_EVENT_ADD_REQUEST\x10\x0f\x12\x19\n\x15TP_EVENT_ADD_RESPONSE\x10\x10\
    \x12\x1f\n\x1bCLIENT_BATCH_SUBMIT_REQUEST\x10d\x12\x20\n\x1cCLIENT_BATCH\
    _SUBMIT_RESPONSE\x10e\x12\x1d\n\x19CLIENT_BLOCK_LIST_REQUEST\x10f\x12\
    \x1e\n\x1aCLIENT_BLOCK_LIST_RESPONSE\x10g\x12\"\n\x1eCLIENT_BLOCK_GET_BY\
    _ID_REQUEST\x10h\x12\x1d\n\x19CLIENT_BLOCK_GET_RESPONSE\x10i\x12\x1d\n\
    \x19CLIENT_BATCH_LIST_REQUEST\x10j\x12\x1e\n\x1aCLIENT_BATCH_LIST_RESPON\
    SE\x10k\x12\x1c\n\x18CLIENT_BATCH_GET_REQUEST\x10l\x12\x1d\n\x19CLIENT_B\
    ATCH_GET_RESPONSE\x10m\x12#\n\x1fCLIENT_TRANSACTION_LIST_REQUEST\x10n\
    \x12$\n\x20CLIENT_TRANSACTION_LIST_RESPONSE\x10o\x12\"\n\x1eCLIENT_TRANS\
    ACTION_GET_REQUEST\x10p\x12#\n\x1fCLIENT_TRANSACTION_GET_RESPONSE\x10q\
    \x12\x20\n\x1cCLIENT_STATE_CURRENT_REQUEST\x10r\x12!\n\x1dCLIENT_STATE_C\
    URRENT_RESPONSE\x10s\x12\x1d\n\x19CLIENT_STATE_LIST_REQUEST\x10t\x12\x1e\
    \n\x1aCLIENT_STATE_LIST_RESPONSE\x10u\x12\x1c\n\x18CLIENT_STATE_GET_REQU\
    EST\x10v\x12\x1d\n\x19CLIENT_STATE_GET_RESPONSE\x10w\x12\x1f\n\x1bCLIENT\
    _BATCH_STATUS_REQUEST\x10x\x12\x20\n\x1cCLIENT_BATCH_STATUS_RESPONSE\x10\
    y\x12\x1e\n\x1aCLIENT_RECEIPT_GET_REQUEST\x10z\x12\x1f\n\x1bCLIENT_RECEI\
    PT_GET_RESPONSE\x10{\x12#\n\x1fCLIENT_BLOCK_GET_BY_NUM_REQUEST\x10|\x12\
    \x1c\n\x18CLIENT_PEERS_GET_REQUEST\x10}\x12\x1d\n\x19CLIENT_PEERS_GET_RE\
    SPONSE\x10~\x12.\n*CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST\x10\x7f\
    \x12)\n$CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST\x10\x80\x01\x12\x1e\n\x19CL\
    IENT_STATUS_GET_REQUEST\x10\x81\x01\x12\x1f\n\x1aCLIENT_STATUS_GET_RESPO\
    NSE\x10\x82\x01\x12$\n\x1fCLIENT_EVENTS_SUBSCRIBE_REQUEST\x10\xf4\x03\
    \x12%\n\x20CLIENT_EVENTS_SUBSCRIBE_RESPONSE\x10\xf5\x03\x12&\n!CLIENT_EV\
    ENTS_UNSUBSCRIBE_REQUEST\x10\xf6\x03\x12'\n\"CLIENT_EVENTS_UNSUBSCRIBE_R\
    ESPONSE\x10\xf7\x03\x12\x12\n\rCLIENT_EVENTS\x10\xf8\x03\x12\x1e\n\x19CL\
    IENT_EVENTS_GET_REQUEST\x10\xf9\x03\x12\x1f\n\x1aCLIENT_EVENTS_GET_RESPO\
    NSE\x10\xfa\x03\x12\x13\n\x0eGOSSIP_MESSAGE\x10\xc8\x01\x12\x14\n\x0fGOS\
    SIP_REGISTER\x10\xc9\x01\x12\x16\n\x11GOSSIP_UNREGISTER\x10\xca\x01\x12\
    \x19\n\x14GOSSIP_BLOCK_REQUEST\x10\xcd\x01\x12\x1a\n\x15GOSSIP_BLOCK_RES\
    PONSE\x10\xce\x01\x12%\n\x20GOSSIP_BATCH_BY_BATCH_ID_REQUEST\x10\xcf\x01\
    \x12+\n&GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST\x10\xd0\x01\x12\x1a\n\x15\
    GOSSIP_BATCH_RESPONSE\x10\xd1\x01\x12\x1d\n\x18GOSSIP_GET_PEERS_REQUEST\
    \x10\xd2\x01\x12\x1e\n\x19GOSSIP_GET_PEERS_RESPONSE\x10\xd3\x01\x12\x1d\
    \n\x18GOSSIP_CONSENSUS_MESSAGE\x10\xd4\x01\x12\x10\n\x0bNETWORK_ACK\x10\
    \xac\x02\x12\x14\n\x0fNETWORK_CONNECT\x10\xad\x02\x12\x17\n\x12NETWORK_D\
    ISCONNECT\x10\xae\x02\x12&\n!AUTHORIZATION_CONNECTION_RESPONSE\x10\xd8\
    \x04\x12\x1c\n\x17AUTHORIZATION_VIOLATION\x10\xd9\x04\x12\x20\n\x1bAUTHO\
    RIZATION_TRUST_REQUEST\x10\xda\x04\x12!\n\x1cAUTHORIZATION_TRUST_RESPONS\
    E\x10\xdb\x04\x12$\n\x1fAUTHORIZATION_CHALLENGE_REQUEST\x10\xdc\x04\x12%\
    \n\x20AUTHORIZATION_CHALLENGE_RESPONSE\x10\xdd\x04\x12#\n\x1eAUTHORIZATI\
    ON_CHALLENGE_SUBMIT\x10\xde\x04\x12#\n\x1eAUTHORIZATION_CHALLENGE_RESULT\
    \x10\xdf\x04\x12\x11\n\x0cPING_REQUEST\x10\xbc\x05\x12\x12\n\rPING_RESPO\
    NSE\x10\xbd\x05\x12\x1f\n\x1aCONSENSUS_REGISTER_REQUEST\x10\xa0\x06\x12\
    \x20\n\x1bCONSENSUS_REGISTER_RESPONSE\x10\xa1\x06\x12\x1e\n\x19CONSENSUS\
    _SEND_TO_REQUEST\x10\xa2\x06\x12\x1f\n\x1aCONSENSUS_SEND_TO_RESPONSE\x10\
    \xa3\x06\x12\x20\n\x1bCONSENSUS_BROADCAST_REQUEST\x10\xa4\x06\x12!\n\x1c\
    CONSENSUS_BROADCAST_RESPONSE\x10\xa5\x06\x12'\n\"CONSENSUS_INITIALIZE_BL\
    OCK_REQUEST\x10\xa6\x06\x12(\n#CONSENSUS_INITIALIZE_BLOCK_RESPONSE\x10\
    \xa7\x06\x12%\n\x20CONSENSUS_FINALIZE_BLOCK_REQUEST\x10\xa8\x06\x12&\n!C\
    ONSENSUS_FINALIZE_BLOCK_RESPONSE\x10\xa9\x06\x12&\n!CONSENSUS_SUMMARIZE_\
    BLOCK_REQUEST\x10\xbc\x06\x12'\n\"CONSENSUS_SUMMARIZE_BLOCK_RESPONSE\x10\
    \xbd\x06\x12#\n\x1eCONSENSUS_CANCEL_BLOCK_REQUEST\x10\xaa\x06\x12$\n\x1f\
    CONSENSUS_CANCEL_BLOCK_RESPONSE\x10\xab\x06\x12#\n\x1eCONSENSUS_CHECK_BL\
    OCKS_REQUEST\x10\xac\x06\x12$\n\x1fCONSENSUS_CHECK_BLOCKS_RESPONSE\x10\
    \xad\x06\x12#\n\x1eCONSENSUS_COMMIT_BLOCK_REQUEST\x10\xae\x06\x12$\n\x1f\
    CONSENSUS_COMMIT_BLOCK_RESPONSE\x10\xaf\x06\x12#\n\x1eCONSENSUS_IGNORE_B\
    LOCK_REQUEST\x10\xb0\x06\x12$\n\x1fCONSENSUS_IGNORE_BLOCK_RESPONSE\x10\
    \xb1\x06\x12!\n\x1cCONSENSUS_FAIL_BLOCK_REQUEST\x10\xb2\x06\x12\"\n\x1dC\
    ONSENSUS_FAIL_BLOCK_RESPONSE\x10\xb3\x06\x12#\n\x1eCONSENSUS_SETTINGS_GE\
    T_REQUEST\x10\xb4\x06\x12$\n\x1fCONSENSUS_SETTINGS_GET_RESPONSE\x10\xb5\
    \x06\x12\x20\n\x1bCONSENSUS_STATE_GET_REQUEST\x10\xb6\x06\x12!\n\x1cCONS\
    ENSUS_STATE_GET_RESPONSE\x10\xb7\x06\x12!\n\x1cCONSENSUS_BLOCKS_GET_REQU\
    EST\x10\xb8\x06\x12\"\n\x1dCONSENSUS_BLOCKS_GET_RESPONSE\x10\xb9\x06\x12\
    %\n\x20CONSENSUS_CHAIN_HEAD_GET_REQUEST\x10\xba\x06\x12&\n!CONSENSUS_CHA\
    IN_HEAD_GET_RESPONSE\x10\xbb\x06\x12$\n\x1fCONSENSUS_NOTIFY_PEER_CONNECT\
    ED\x10\x84\x07\x12'\n\"CONSENSUS_NOTIFY_PEER_DISCONNECTED\x10\x85\x07\
    \x12\"\n\x1dCONSENSUS_NOTIFY_PEER_MESSAGE\x10\x86\x07\x12\x1f\n\x1aCONSE\
    NSUS_NOTIFY_BLOCK_NEW\x10\x87\x07\x12!\n\x1cCONSENSUS_NOTIFY_BLOCK_VALID\
    \x10\x88\x07\x12#\n\x1eCONSENSUS_NOTIFY_BLOCK_INVALID\x10\x89\x07\x12\"\
    \n\x1dCONSENSUS_NOTIFY_BLOCK_COMMIT\x10\x8a\x07\x12&\n!CONSENSUS_NOTIFY_\
    ENGINE_ACTIVATED\x10\x8b\x07\x12(\n#CONSENSUS_NOTIFY_ENGINE_DEACTIVATED\
    \x10\x8c\x07\x12\x19\n\x14CONSENSUS_NOTIFY_ACK\x10\xe7\x07B(\n\x15sawtoo\
    th.sdk.protobufP\x01Z\rvalidator_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
