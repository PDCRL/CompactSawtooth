// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsSubscribeRequest {
    // message fields
    pub subscriptions: ::protobuf::RepeatedField<super::events::EventSubscription>,
    pub last_known_block_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsSubscribeRequest {
    fn default() -> &'a ClientEventsSubscribeRequest {
        <ClientEventsSubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsSubscribeRequest {
    pub fn new() -> ClientEventsSubscribeRequest {
        ::std::default::Default::default()
    }

    // repeated .EventSubscription subscriptions = 1;


    pub fn get_subscriptions(&self) -> &[super::events::EventSubscription] {
        &self.subscriptions
    }
    pub fn clear_subscriptions(&mut self) {
        self.subscriptions.clear();
    }

    // Param is passed by value, moved
    pub fn set_subscriptions(&mut self, v: ::protobuf::RepeatedField<super::events::EventSubscription>) {
        self.subscriptions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subscriptions(&mut self) -> &mut ::protobuf::RepeatedField<super::events::EventSubscription> {
        &mut self.subscriptions
    }

    // Take field
    pub fn take_subscriptions(&mut self) -> ::protobuf::RepeatedField<super::events::EventSubscription> {
        ::std::mem::replace(&mut self.subscriptions, ::protobuf::RepeatedField::new())
    }

    // repeated string last_known_block_ids = 2;


    pub fn get_last_known_block_ids(&self) -> &[::std::string::String] {
        &self.last_known_block_ids
    }
    pub fn clear_last_known_block_ids(&mut self) {
        self.last_known_block_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_known_block_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.last_known_block_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_last_known_block_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.last_known_block_ids
    }

    // Take field
    pub fn take_last_known_block_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.last_known_block_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientEventsSubscribeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.subscriptions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subscriptions)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.last_known_block_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.subscriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.last_known_block_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.subscriptions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.last_known_block_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsSubscribeRequest {
        ClientEventsSubscribeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::EventSubscription>>(
                "subscriptions",
                |m: &ClientEventsSubscribeRequest| { &m.subscriptions },
                |m: &mut ClientEventsSubscribeRequest| { &mut m.subscriptions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "last_known_block_ids",
                |m: &ClientEventsSubscribeRequest| { &m.last_known_block_ids },
                |m: &mut ClientEventsSubscribeRequest| { &mut m.last_known_block_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsSubscribeRequest>(
                "ClientEventsSubscribeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsSubscribeRequest {
        static instance: ::protobuf::rt::LazyV2<ClientEventsSubscribeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsSubscribeRequest::new)
    }
}

impl ::protobuf::Clear for ClientEventsSubscribeRequest {
    fn clear(&mut self) {
        self.subscriptions.clear();
        self.last_known_block_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsSubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsSubscribeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsSubscribeResponse {
    // message fields
    pub status: ClientEventsSubscribeResponse_Status,
    pub response_message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsSubscribeResponse {
    fn default() -> &'a ClientEventsSubscribeResponse {
        <ClientEventsSubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsSubscribeResponse {
    pub fn new() -> ClientEventsSubscribeResponse {
        ::std::default::Default::default()
    }

    // .ClientEventsSubscribeResponse.Status status = 1;


    pub fn get_status(&self) -> ClientEventsSubscribeResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientEventsSubscribeResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientEventsSubscribeResponse_Status) {
        self.status = v;
    }

    // string response_message = 2;


    pub fn get_response_message(&self) -> &str {
        &self.response_message
    }
    pub fn clear_response_message(&mut self) {
        self.response_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_message(&mut self, v: ::std::string::String) {
        self.response_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_message(&mut self) -> &mut ::std::string::String {
        &mut self.response_message
    }

    // Take field
    pub fn take_response_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientEventsSubscribeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientEventsSubscribeResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.response_message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.response_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientEventsSubscribeResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.response_message.is_empty() {
            os.write_string(2, &self.response_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsSubscribeResponse {
        ClientEventsSubscribeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientEventsSubscribeResponse_Status>>(
                "status",
                |m: &ClientEventsSubscribeResponse| { &m.status },
                |m: &mut ClientEventsSubscribeResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_message",
                |m: &ClientEventsSubscribeResponse| { &m.response_message },
                |m: &mut ClientEventsSubscribeResponse| { &mut m.response_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsSubscribeResponse>(
                "ClientEventsSubscribeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsSubscribeResponse {
        static instance: ::protobuf::rt::LazyV2<ClientEventsSubscribeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsSubscribeResponse::new)
    }
}

impl ::protobuf::Clear for ClientEventsSubscribeResponse {
    fn clear(&mut self) {
        self.status = ClientEventsSubscribeResponse_Status::STATUS_UNSET;
        self.response_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsSubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsSubscribeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientEventsSubscribeResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INVALID_FILTER = 2,
    UNKNOWN_BLOCK = 3,
}

impl ::protobuf::ProtobufEnum for ClientEventsSubscribeResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientEventsSubscribeResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientEventsSubscribeResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientEventsSubscribeResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientEventsSubscribeResponse_Status::INVALID_FILTER),
            3 => ::std::option::Option::Some(ClientEventsSubscribeResponse_Status::UNKNOWN_BLOCK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientEventsSubscribeResponse_Status] = &[
            ClientEventsSubscribeResponse_Status::STATUS_UNSET,
            ClientEventsSubscribeResponse_Status::OK,
            ClientEventsSubscribeResponse_Status::INVALID_FILTER,
            ClientEventsSubscribeResponse_Status::UNKNOWN_BLOCK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientEventsSubscribeResponse_Status>("ClientEventsSubscribeResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientEventsSubscribeResponse_Status {
}

impl ::std::default::Default for ClientEventsSubscribeResponse_Status {
    fn default() -> Self {
        ClientEventsSubscribeResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsSubscribeResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsUnsubscribeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsUnsubscribeRequest {
    fn default() -> &'a ClientEventsUnsubscribeRequest {
        <ClientEventsUnsubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsUnsubscribeRequest {
    pub fn new() -> ClientEventsUnsubscribeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientEventsUnsubscribeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsUnsubscribeRequest {
        ClientEventsUnsubscribeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsUnsubscribeRequest>(
                "ClientEventsUnsubscribeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsUnsubscribeRequest {
        static instance: ::protobuf::rt::LazyV2<ClientEventsUnsubscribeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsUnsubscribeRequest::new)
    }
}

impl ::protobuf::Clear for ClientEventsUnsubscribeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsUnsubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsUnsubscribeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsUnsubscribeResponse {
    // message fields
    pub status: ClientEventsUnsubscribeResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsUnsubscribeResponse {
    fn default() -> &'a ClientEventsUnsubscribeResponse {
        <ClientEventsUnsubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsUnsubscribeResponse {
    pub fn new() -> ClientEventsUnsubscribeResponse {
        ::std::default::Default::default()
    }

    // .ClientEventsUnsubscribeResponse.Status status = 1;


    pub fn get_status(&self) -> ClientEventsUnsubscribeResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientEventsUnsubscribeResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientEventsUnsubscribeResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ClientEventsUnsubscribeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientEventsUnsubscribeResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientEventsUnsubscribeResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsUnsubscribeResponse {
        ClientEventsUnsubscribeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientEventsUnsubscribeResponse_Status>>(
                "status",
                |m: &ClientEventsUnsubscribeResponse| { &m.status },
                |m: &mut ClientEventsUnsubscribeResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsUnsubscribeResponse>(
                "ClientEventsUnsubscribeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsUnsubscribeResponse {
        static instance: ::protobuf::rt::LazyV2<ClientEventsUnsubscribeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsUnsubscribeResponse::new)
    }
}

impl ::protobuf::Clear for ClientEventsUnsubscribeResponse {
    fn clear(&mut self) {
        self.status = ClientEventsUnsubscribeResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsUnsubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsUnsubscribeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientEventsUnsubscribeResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
}

impl ::protobuf::ProtobufEnum for ClientEventsUnsubscribeResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientEventsUnsubscribeResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientEventsUnsubscribeResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientEventsUnsubscribeResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientEventsUnsubscribeResponse_Status::INTERNAL_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientEventsUnsubscribeResponse_Status] = &[
            ClientEventsUnsubscribeResponse_Status::STATUS_UNSET,
            ClientEventsUnsubscribeResponse_Status::OK,
            ClientEventsUnsubscribeResponse_Status::INTERNAL_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientEventsUnsubscribeResponse_Status>("ClientEventsUnsubscribeResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientEventsUnsubscribeResponse_Status {
}

impl ::std::default::Default for ClientEventsUnsubscribeResponse_Status {
    fn default() -> Self {
        ClientEventsUnsubscribeResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsUnsubscribeResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsGetRequest {
    // message fields
    pub subscriptions: ::protobuf::RepeatedField<super::events::EventSubscription>,
    pub block_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsGetRequest {
    fn default() -> &'a ClientEventsGetRequest {
        <ClientEventsGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsGetRequest {
    pub fn new() -> ClientEventsGetRequest {
        ::std::default::Default::default()
    }

    // repeated .EventSubscription subscriptions = 1;


    pub fn get_subscriptions(&self) -> &[super::events::EventSubscription] {
        &self.subscriptions
    }
    pub fn clear_subscriptions(&mut self) {
        self.subscriptions.clear();
    }

    // Param is passed by value, moved
    pub fn set_subscriptions(&mut self, v: ::protobuf::RepeatedField<super::events::EventSubscription>) {
        self.subscriptions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subscriptions(&mut self) -> &mut ::protobuf::RepeatedField<super::events::EventSubscription> {
        &mut self.subscriptions
    }

    // Take field
    pub fn take_subscriptions(&mut self) -> ::protobuf::RepeatedField<super::events::EventSubscription> {
        ::std::mem::replace(&mut self.subscriptions, ::protobuf::RepeatedField::new())
    }

    // repeated string block_ids = 2;


    pub fn get_block_ids(&self) -> &[::std::string::String] {
        &self.block_ids
    }
    pub fn clear_block_ids(&mut self) {
        self.block_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.block_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.block_ids
    }

    // Take field
    pub fn take_block_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.block_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientEventsGetRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.subscriptions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subscriptions)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.block_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.subscriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.block_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.subscriptions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.block_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsGetRequest {
        ClientEventsGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::EventSubscription>>(
                "subscriptions",
                |m: &ClientEventsGetRequest| { &m.subscriptions },
                |m: &mut ClientEventsGetRequest| { &mut m.subscriptions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_ids",
                |m: &ClientEventsGetRequest| { &m.block_ids },
                |m: &mut ClientEventsGetRequest| { &mut m.block_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsGetRequest>(
                "ClientEventsGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsGetRequest {
        static instance: ::protobuf::rt::LazyV2<ClientEventsGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsGetRequest::new)
    }
}

impl ::protobuf::Clear for ClientEventsGetRequest {
    fn clear(&mut self) {
        self.subscriptions.clear();
        self.block_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientEventsGetResponse {
    // message fields
    pub status: ClientEventsGetResponse_Status,
    pub events: ::protobuf::RepeatedField<super::events::Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientEventsGetResponse {
    fn default() -> &'a ClientEventsGetResponse {
        <ClientEventsGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientEventsGetResponse {
    pub fn new() -> ClientEventsGetResponse {
        ::std::default::Default::default()
    }

    // .ClientEventsGetResponse.Status status = 1;


    pub fn get_status(&self) -> ClientEventsGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientEventsGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientEventsGetResponse_Status) {
        self.status = v;
    }

    // repeated .Event events = 2;


    pub fn get_events(&self) -> &[super::events::Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::events::Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::events::Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::events::Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientEventsGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientEventsGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientEventsGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.events {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientEventsGetResponse {
        ClientEventsGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientEventsGetResponse_Status>>(
                "status",
                |m: &ClientEventsGetResponse| { &m.status },
                |m: &mut ClientEventsGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::Event>>(
                "events",
                |m: &ClientEventsGetResponse| { &m.events },
                |m: &mut ClientEventsGetResponse| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientEventsGetResponse>(
                "ClientEventsGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientEventsGetResponse {
        static instance: ::protobuf::rt::LazyV2<ClientEventsGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientEventsGetResponse::new)
    }
}

impl ::protobuf::Clear for ClientEventsGetResponse {
    fn clear(&mut self) {
        self.status = ClientEventsGetResponse_Status::STATUS_UNSET;
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientEventsGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientEventsGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    INVALID_FILTER = 3,
    UNKNOWN_BLOCK = 4,
}

impl ::protobuf::ProtobufEnum for ClientEventsGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientEventsGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientEventsGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientEventsGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientEventsGetResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientEventsGetResponse_Status::INVALID_FILTER),
            4 => ::std::option::Option::Some(ClientEventsGetResponse_Status::UNKNOWN_BLOCK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientEventsGetResponse_Status] = &[
            ClientEventsGetResponse_Status::STATUS_UNSET,
            ClientEventsGetResponse_Status::OK,
            ClientEventsGetResponse_Status::INTERNAL_ERROR,
            ClientEventsGetResponse_Status::INVALID_FILTER,
            ClientEventsGetResponse_Status::UNKNOWN_BLOCK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientEventsGetResponse_Status>("ClientEventsGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientEventsGetResponse_Status {
}

impl ::std::default::Default for ClientEventsGetResponse_Status {
    fn default() -> Self {
        ClientEventsGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEventsGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12client_event.proto\x1a\x0cevents.proto\"\x89\x01\n\x1cClientEvents\
    SubscribeRequest\x128\n\rsubscriptions\x18\x01\x20\x03(\x0b2\x12.EventSu\
    bscriptionR\rsubscriptions\x12/\n\x14last_known_block_ids\x18\x02\x20\
    \x03(\tR\x11lastKnownBlockIds\"\xd4\x01\n\x1dClientEventsSubscribeRespon\
    se\x12=\n\x06status\x18\x01\x20\x01(\x0e2%.ClientEventsSubscribeResponse\
    .StatusR\x06status\x12)\n\x10response_message\x18\x02\x20\x01(\tR\x0fres\
    ponseMessage\"I\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\
    \x02OK\x10\x01\x12\x12\n\x0eINVALID_FILTER\x10\x02\x12\x11\n\rUNKNOWN_BL\
    OCK\x10\x03\"\x20\n\x1eClientEventsUnsubscribeRequest\"\x9a\x01\n\x1fCli\
    entEventsUnsubscribeResponse\x12?\n\x06status\x18\x01\x20\x01(\x0e2'.Cli\
    entEventsUnsubscribeResponse.StatusR\x06status\"6\n\x06Status\x12\x10\n\
    \x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERR\
    OR\x10\x02\"o\n\x16ClientEventsGetRequest\x128\n\rsubscriptions\x18\x01\
    \x20\x03(\x0b2\x12.EventSubscriptionR\rsubscriptions\x12\x1b\n\tblock_id\
    s\x18\x02\x20\x03(\tR\x08blockIds\"\xd1\x01\n\x17ClientEventsGetResponse\
    \x127\n\x06status\x18\x01\x20\x01(\x0e2\x1f.ClientEventsGetResponse.Stat\
    usR\x06status\x12\x1e\n\x06events\x18\x02\x20\x03(\x0b2\x06.EventR\x06ev\
    ents\"]\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\
    \x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\x12\x12\n\x0eINVALID_FILTER\x10\
    \x03\x12\x11\n\rUNKNOWN_BLOCK\x10\x04B+\n\x15sawtooth.sdk.protobufP\x01Z\
    \x10client_event_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
