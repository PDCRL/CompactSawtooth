// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `authorization.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionRequest {
    // message fields
    pub endpoint: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionRequest {
    fn default() -> &'a ConnectionRequest {
        <ConnectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionRequest {
    pub fn new() -> ConnectionRequest {
        ::std::default::Default::default()
    }

    // string endpoint = 1;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConnectionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionRequest {
        ConnectionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endpoint",
                |m: &ConnectionRequest| { &m.endpoint },
                |m: &mut ConnectionRequest| { &mut m.endpoint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionRequest>(
                "ConnectionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionRequest {
        static instance: ::protobuf::rt::LazyV2<ConnectionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionRequest::new)
    }
}

impl ::protobuf::Clear for ConnectionRequest {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionResponse {
    // message fields
    pub roles: ::protobuf::RepeatedField<ConnectionResponse_RoleEntry>,
    pub status: ConnectionResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionResponse {
    fn default() -> &'a ConnectionResponse {
        <ConnectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionResponse {
    pub fn new() -> ConnectionResponse {
        ::std::default::Default::default()
    }

    // repeated .ConnectionResponse.RoleEntry roles = 1;


    pub fn get_roles(&self) -> &[ConnectionResponse_RoleEntry] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<ConnectionResponse_RoleEntry>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<ConnectionResponse_RoleEntry> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<ConnectionResponse_RoleEntry> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // .ConnectionResponse.Status status = 2;


    pub fn get_status(&self) -> ConnectionResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConnectionResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConnectionResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ConnectionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.roles {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.roles)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.roles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.status != ConnectionResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.roles {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.status != ConnectionResponse_Status::STATUS_UNSET {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionResponse {
        ConnectionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConnectionResponse_RoleEntry>>(
                "roles",
                |m: &ConnectionResponse| { &m.roles },
                |m: &mut ConnectionResponse| { &mut m.roles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConnectionResponse_Status>>(
                "status",
                |m: &ConnectionResponse| { &m.status },
                |m: &mut ConnectionResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionResponse>(
                "ConnectionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionResponse {
        static instance: ::protobuf::rt::LazyV2<ConnectionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionResponse::new)
    }
}

impl ::protobuf::Clear for ConnectionResponse {
    fn clear(&mut self) {
        self.roles.clear();
        self.status = ConnectionResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionResponse_RoleEntry {
    // message fields
    pub role: RoleType,
    pub auth_type: ConnectionResponse_AuthorizationType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionResponse_RoleEntry {
    fn default() -> &'a ConnectionResponse_RoleEntry {
        <ConnectionResponse_RoleEntry as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionResponse_RoleEntry {
    pub fn new() -> ConnectionResponse_RoleEntry {
        ::std::default::Default::default()
    }

    // .RoleType role = 1;


    pub fn get_role(&self) -> RoleType {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = RoleType::ROLE_TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: RoleType) {
        self.role = v;
    }

    // .ConnectionResponse.AuthorizationType auth_type = 2;


    pub fn get_auth_type(&self) -> ConnectionResponse_AuthorizationType {
        self.auth_type
    }
    pub fn clear_auth_type(&mut self) {
        self.auth_type = ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_auth_type(&mut self, v: ConnectionResponse_AuthorizationType) {
        self.auth_type = v;
    }
}

impl ::protobuf::Message for ConnectionResponse_RoleEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.auth_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.role != RoleType::ROLE_TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.role);
        }
        if self.auth_type != ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.auth_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.role != RoleType::ROLE_TYPE_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.role))?;
        }
        if self.auth_type != ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.auth_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionResponse_RoleEntry {
        ConnectionResponse_RoleEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "role",
                |m: &ConnectionResponse_RoleEntry| { &m.role },
                |m: &mut ConnectionResponse_RoleEntry| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConnectionResponse_AuthorizationType>>(
                "auth_type",
                |m: &ConnectionResponse_RoleEntry| { &m.auth_type },
                |m: &mut ConnectionResponse_RoleEntry| { &mut m.auth_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionResponse_RoleEntry>(
                "ConnectionResponse.RoleEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionResponse_RoleEntry {
        static instance: ::protobuf::rt::LazyV2<ConnectionResponse_RoleEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionResponse_RoleEntry::new)
    }
}

impl ::protobuf::Clear for ConnectionResponse_RoleEntry {
    fn clear(&mut self) {
        self.role = RoleType::ROLE_TYPE_UNSET;
        self.auth_type = ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionResponse_RoleEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionResponse_RoleEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConnectionResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    ERROR = 2,
}

impl ::protobuf::ProtobufEnum for ConnectionResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnectionResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ConnectionResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ConnectionResponse_Status::OK),
            2 => ::std::option::Option::Some(ConnectionResponse_Status::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConnectionResponse_Status] = &[
            ConnectionResponse_Status::STATUS_UNSET,
            ConnectionResponse_Status::OK,
            ConnectionResponse_Status::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConnectionResponse_Status>("ConnectionResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConnectionResponse_Status {
}

impl ::std::default::Default for ConnectionResponse_Status {
    fn default() -> Self {
        ConnectionResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConnectionResponse_AuthorizationType {
    AUTHORIZATION_TYPE_UNSET = 0,
    TRUST = 1,
    CHALLENGE = 2,
}

impl ::protobuf::ProtobufEnum for ConnectionResponse_AuthorizationType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnectionResponse_AuthorizationType> {
        match value {
            0 => ::std::option::Option::Some(ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET),
            1 => ::std::option::Option::Some(ConnectionResponse_AuthorizationType::TRUST),
            2 => ::std::option::Option::Some(ConnectionResponse_AuthorizationType::CHALLENGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConnectionResponse_AuthorizationType] = &[
            ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET,
            ConnectionResponse_AuthorizationType::TRUST,
            ConnectionResponse_AuthorizationType::CHALLENGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConnectionResponse_AuthorizationType>("ConnectionResponse.AuthorizationType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConnectionResponse_AuthorizationType {
}

impl ::std::default::Default for ConnectionResponse_AuthorizationType {
    fn default() -> Self {
        ConnectionResponse_AuthorizationType::AUTHORIZATION_TYPE_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionResponse_AuthorizationType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationTrustRequest {
    // message fields
    pub roles: ::std::vec::Vec<RoleType>,
    pub public_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationTrustRequest {
    fn default() -> &'a AuthorizationTrustRequest {
        <AuthorizationTrustRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationTrustRequest {
    pub fn new() -> AuthorizationTrustRequest {
        ::std::default::Default::default()
    }

    // repeated .RoleType roles = 1;


    pub fn get_roles(&self) -> &[RoleType] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::std::vec::Vec<RoleType>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::std::vec::Vec<RoleType> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::std::vec::Vec<RoleType> {
        ::std::mem::replace(&mut self.roles, ::std::vec::Vec::new())
    }

    // string public_key = 2;


    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthorizationTrustRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.roles, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.roles {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.roles {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        if !self.public_key.is_empty() {
            os.write_string(2, &self.public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationTrustRequest {
        AuthorizationTrustRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "roles",
                |m: &AuthorizationTrustRequest| { &m.roles },
                |m: &mut AuthorizationTrustRequest| { &mut m.roles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "public_key",
                |m: &AuthorizationTrustRequest| { &m.public_key },
                |m: &mut AuthorizationTrustRequest| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationTrustRequest>(
                "AuthorizationTrustRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationTrustRequest {
        static instance: ::protobuf::rt::LazyV2<AuthorizationTrustRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationTrustRequest::new)
    }
}

impl ::protobuf::Clear for AuthorizationTrustRequest {
    fn clear(&mut self) {
        self.roles.clear();
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationTrustRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationTrustRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationTrustResponse {
    // message fields
    pub roles: ::std::vec::Vec<RoleType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationTrustResponse {
    fn default() -> &'a AuthorizationTrustResponse {
        <AuthorizationTrustResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationTrustResponse {
    pub fn new() -> AuthorizationTrustResponse {
        ::std::default::Default::default()
    }

    // repeated .RoleType roles = 1;


    pub fn get_roles(&self) -> &[RoleType] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::std::vec::Vec<RoleType>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::std::vec::Vec<RoleType> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::std::vec::Vec<RoleType> {
        ::std::mem::replace(&mut self.roles, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuthorizationTrustResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.roles, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.roles {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.roles {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationTrustResponse {
        AuthorizationTrustResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "roles",
                |m: &AuthorizationTrustResponse| { &m.roles },
                |m: &mut AuthorizationTrustResponse| { &mut m.roles },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationTrustResponse>(
                "AuthorizationTrustResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationTrustResponse {
        static instance: ::protobuf::rt::LazyV2<AuthorizationTrustResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationTrustResponse::new)
    }
}

impl ::protobuf::Clear for AuthorizationTrustResponse {
    fn clear(&mut self) {
        self.roles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationTrustResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationTrustResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationViolation {
    // message fields
    pub violation: RoleType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationViolation {
    fn default() -> &'a AuthorizationViolation {
        <AuthorizationViolation as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationViolation {
    pub fn new() -> AuthorizationViolation {
        ::std::default::Default::default()
    }

    // .RoleType violation = 1;


    pub fn get_violation(&self) -> RoleType {
        self.violation
    }
    pub fn clear_violation(&mut self) {
        self.violation = RoleType::ROLE_TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_violation(&mut self, v: RoleType) {
        self.violation = v;
    }
}

impl ::protobuf::Message for AuthorizationViolation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.violation, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.violation != RoleType::ROLE_TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.violation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.violation != RoleType::ROLE_TYPE_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.violation))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationViolation {
        AuthorizationViolation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "violation",
                |m: &AuthorizationViolation| { &m.violation },
                |m: &mut AuthorizationViolation| { &mut m.violation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationViolation>(
                "AuthorizationViolation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationViolation {
        static instance: ::protobuf::rt::LazyV2<AuthorizationViolation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationViolation::new)
    }
}

impl ::protobuf::Clear for AuthorizationViolation {
    fn clear(&mut self) {
        self.violation = RoleType::ROLE_TYPE_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationViolation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationViolation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationChallengeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationChallengeRequest {
    fn default() -> &'a AuthorizationChallengeRequest {
        <AuthorizationChallengeRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationChallengeRequest {
    pub fn new() -> AuthorizationChallengeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AuthorizationChallengeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationChallengeRequest {
        AuthorizationChallengeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationChallengeRequest>(
                "AuthorizationChallengeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationChallengeRequest {
        static instance: ::protobuf::rt::LazyV2<AuthorizationChallengeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationChallengeRequest::new)
    }
}

impl ::protobuf::Clear for AuthorizationChallengeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationChallengeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationChallengeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationChallengeResponse {
    // message fields
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationChallengeResponse {
    fn default() -> &'a AuthorizationChallengeResponse {
        <AuthorizationChallengeResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationChallengeResponse {
    pub fn new() -> AuthorizationChallengeResponse {
        ::std::default::Default::default()
    }

    // bytes payload = 1;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuthorizationChallengeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationChallengeResponse {
        AuthorizationChallengeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &AuthorizationChallengeResponse| { &m.payload },
                |m: &mut AuthorizationChallengeResponse| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationChallengeResponse>(
                "AuthorizationChallengeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationChallengeResponse {
        static instance: ::protobuf::rt::LazyV2<AuthorizationChallengeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationChallengeResponse::new)
    }
}

impl ::protobuf::Clear for AuthorizationChallengeResponse {
    fn clear(&mut self) {
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationChallengeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationChallengeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationChallengeSubmit {
    // message fields
    pub public_key: ::std::string::String,
    pub signature: ::std::string::String,
    pub roles: ::std::vec::Vec<RoleType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationChallengeSubmit {
    fn default() -> &'a AuthorizationChallengeSubmit {
        <AuthorizationChallengeSubmit as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationChallengeSubmit {
    pub fn new() -> AuthorizationChallengeSubmit {
        ::std::default::Default::default()
    }

    // string public_key = 1;


    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }

    // string signature = 3;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // repeated .RoleType roles = 4;


    pub fn get_roles(&self) -> &[RoleType] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::std::vec::Vec<RoleType>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::std::vec::Vec<RoleType> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::std::vec::Vec<RoleType> {
        ::std::mem::replace(&mut self.roles, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuthorizationChallengeSubmit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.roles, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.public_key);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::enum_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_string(1, &self.public_key)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        for v in &self.roles {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationChallengeSubmit {
        AuthorizationChallengeSubmit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "public_key",
                |m: &AuthorizationChallengeSubmit| { &m.public_key },
                |m: &mut AuthorizationChallengeSubmit| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signature",
                |m: &AuthorizationChallengeSubmit| { &m.signature },
                |m: &mut AuthorizationChallengeSubmit| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "roles",
                |m: &AuthorizationChallengeSubmit| { &m.roles },
                |m: &mut AuthorizationChallengeSubmit| { &mut m.roles },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationChallengeSubmit>(
                "AuthorizationChallengeSubmit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationChallengeSubmit {
        static instance: ::protobuf::rt::LazyV2<AuthorizationChallengeSubmit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationChallengeSubmit::new)
    }
}

impl ::protobuf::Clear for AuthorizationChallengeSubmit {
    fn clear(&mut self) {
        self.public_key.clear();
        self.signature.clear();
        self.roles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationChallengeSubmit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationChallengeSubmit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationChallengeResult {
    // message fields
    pub roles: ::std::vec::Vec<RoleType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationChallengeResult {
    fn default() -> &'a AuthorizationChallengeResult {
        <AuthorizationChallengeResult as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationChallengeResult {
    pub fn new() -> AuthorizationChallengeResult {
        ::std::default::Default::default()
    }

    // repeated .RoleType roles = 1;


    pub fn get_roles(&self) -> &[RoleType] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::std::vec::Vec<RoleType>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::std::vec::Vec<RoleType> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::std::vec::Vec<RoleType> {
        ::std::mem::replace(&mut self.roles, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuthorizationChallengeResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.roles, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.roles {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.roles {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationChallengeResult {
        AuthorizationChallengeResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                "roles",
                |m: &AuthorizationChallengeResult| { &m.roles },
                |m: &mut AuthorizationChallengeResult| { &mut m.roles },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationChallengeResult>(
                "AuthorizationChallengeResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationChallengeResult {
        static instance: ::protobuf::rt::LazyV2<AuthorizationChallengeResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationChallengeResult::new)
    }
}

impl ::protobuf::Clear for AuthorizationChallengeResult {
    fn clear(&mut self) {
        self.roles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationChallengeResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationChallengeResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RoleType {
    ROLE_TYPE_UNSET = 0,
    ALL = 1,
    NETWORK = 2,
}

impl ::protobuf::ProtobufEnum for RoleType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RoleType> {
        match value {
            0 => ::std::option::Option::Some(RoleType::ROLE_TYPE_UNSET),
            1 => ::std::option::Option::Some(RoleType::ALL),
            2 => ::std::option::Option::Some(RoleType::NETWORK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RoleType] = &[
            RoleType::ROLE_TYPE_UNSET,
            RoleType::ALL,
            RoleType::NETWORK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RoleType>("RoleType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RoleType {
}

impl ::std::default::Default for RoleType {
    fn default() -> Self {
        RoleType::ROLE_TYPE_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for RoleType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13authorization.proto\"/\n\x11ConnectionRequest\x12\x1a\n\x08endpoin\
    t\x18\x01\x20\x01(\tR\x08endpoint\"\xe9\x02\n\x12ConnectionResponse\x123\
    \n\x05roles\x18\x01\x20\x03(\x0b2\x1d.ConnectionResponse.RoleEntryR\x05r\
    oles\x122\n\x06status\x18\x02\x20\x01(\x0e2\x1a.ConnectionResponse.Statu\
    sR\x06status\x1an\n\tRoleEntry\x12\x1d\n\x04role\x18\x01\x20\x01(\x0e2\t\
    .RoleTypeR\x04role\x12B\n\tauth_type\x18\x02\x20\x01(\x0e2%.ConnectionRe\
    sponse.AuthorizationTypeR\x08authType\"-\n\x06Status\x12\x10\n\x0cSTATUS\
    _UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\t\n\x05ERROR\x10\x02\"K\n\x11Au\
    thorizationType\x12\x1c\n\x18AUTHORIZATION_TYPE_UNSET\x10\0\x12\t\n\x05T\
    RUST\x10\x01\x12\r\n\tCHALLENGE\x10\x02\"[\n\x19AuthorizationTrustReques\
    t\x12\x1f\n\x05roles\x18\x01\x20\x03(\x0e2\t.RoleTypeR\x05roles\x12\x1d\
    \n\npublic_key\x18\x02\x20\x01(\tR\tpublicKey\"=\n\x1aAuthorizationTrust\
    Response\x12\x1f\n\x05roles\x18\x01\x20\x03(\x0e2\t.RoleTypeR\x05roles\"\
    A\n\x16AuthorizationViolation\x12'\n\tviolation\x18\x01\x20\x01(\x0e2\t.\
    RoleTypeR\tviolation\"\x1f\n\x1dAuthorizationChallengeRequest\":\n\x1eAu\
    thorizationChallengeResponse\x12\x18\n\x07payload\x18\x01\x20\x01(\x0cR\
    \x07payload\"|\n\x1cAuthorizationChallengeSubmit\x12\x1d\n\npublic_key\
    \x18\x01\x20\x01(\tR\tpublicKey\x12\x1c\n\tsignature\x18\x03\x20\x01(\tR\
    \tsignature\x12\x1f\n\x05roles\x18\x04\x20\x03(\x0e2\t.RoleTypeR\x05role\
    s\"?\n\x1cAuthorizationChallengeResult\x12\x1f\n\x05roles\x18\x01\x20\
    \x03(\x0e2\t.RoleTypeR\x05roles*5\n\x08RoleType\x12\x13\n\x0fROLE_TYPE_U\
    NSET\x10\0\x12\x07\n\x03ALL\x10\x01\x12\x0b\n\x07NETWORK\x10\x02B,\n\x15\
    sawtooth.sdk.protobufP\x01Z\x11authorization_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
