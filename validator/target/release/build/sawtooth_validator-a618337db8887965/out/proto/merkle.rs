// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `merkle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ChangeLogEntry {
    // message fields
    pub parent: ::std::vec::Vec<u8>,
    pub additions: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub successors: ::protobuf::RepeatedField<ChangeLogEntry_Successor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChangeLogEntry {
    fn default() -> &'a ChangeLogEntry {
        <ChangeLogEntry as ::protobuf::Message>::default_instance()
    }
}

impl ChangeLogEntry {
    pub fn new() -> ChangeLogEntry {
        ::std::default::Default::default()
    }

    // bytes parent = 1;


    pub fn get_parent(&self) -> &[u8] {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent, ::std::vec::Vec::new())
    }

    // repeated bytes additions = 2;


    pub fn get_additions(&self) -> &[::std::vec::Vec<u8>] {
        &self.additions
    }
    pub fn clear_additions(&mut self) {
        self.additions.clear();
    }

    // Param is passed by value, moved
    pub fn set_additions(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.additions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additions(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.additions
    }

    // Take field
    pub fn take_additions(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.additions, ::protobuf::RepeatedField::new())
    }

    // repeated .ChangeLogEntry.Successor successors = 3;


    pub fn get_successors(&self) -> &[ChangeLogEntry_Successor] {
        &self.successors
    }
    pub fn clear_successors(&mut self) {
        self.successors.clear();
    }

    // Param is passed by value, moved
    pub fn set_successors(&mut self, v: ::protobuf::RepeatedField<ChangeLogEntry_Successor>) {
        self.successors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_successors(&mut self) -> &mut ::protobuf::RepeatedField<ChangeLogEntry_Successor> {
        &mut self.successors
    }

    // Take field
    pub fn take_successors(&mut self) -> ::protobuf::RepeatedField<ChangeLogEntry_Successor> {
        ::std::mem::replace(&mut self.successors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ChangeLogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.successors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.additions)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.successors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.parent);
        }
        for value in &self.additions {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.successors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_bytes(1, &self.parent)?;
        }
        for v in &self.additions {
            os.write_bytes(2, &v)?;
        };
        for v in &self.successors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChangeLogEntry {
        ChangeLogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "parent",
                |m: &ChangeLogEntry| { &m.parent },
                |m: &mut ChangeLogEntry| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "additions",
                |m: &ChangeLogEntry| { &m.additions },
                |m: &mut ChangeLogEntry| { &mut m.additions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChangeLogEntry_Successor>>(
                "successors",
                |m: &ChangeLogEntry| { &m.successors },
                |m: &mut ChangeLogEntry| { &mut m.successors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChangeLogEntry>(
                "ChangeLogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChangeLogEntry {
        static instance: ::protobuf::rt::LazyV2<ChangeLogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChangeLogEntry::new)
    }
}

impl ::protobuf::Clear for ChangeLogEntry {
    fn clear(&mut self) {
        self.parent.clear();
        self.additions.clear();
        self.successors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChangeLogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeLogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChangeLogEntry_Successor {
    // message fields
    pub successor: ::std::vec::Vec<u8>,
    pub deletions: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChangeLogEntry_Successor {
    fn default() -> &'a ChangeLogEntry_Successor {
        <ChangeLogEntry_Successor as ::protobuf::Message>::default_instance()
    }
}

impl ChangeLogEntry_Successor {
    pub fn new() -> ChangeLogEntry_Successor {
        ::std::default::Default::default()
    }

    // bytes successor = 1;


    pub fn get_successor(&self) -> &[u8] {
        &self.successor
    }
    pub fn clear_successor(&mut self) {
        self.successor.clear();
    }

    // Param is passed by value, moved
    pub fn set_successor(&mut self, v: ::std::vec::Vec<u8>) {
        self.successor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_successor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.successor
    }

    // Take field
    pub fn take_successor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.successor, ::std::vec::Vec::new())
    }

    // repeated bytes deletions = 2;


    pub fn get_deletions(&self) -> &[::std::vec::Vec<u8>] {
        &self.deletions
    }
    pub fn clear_deletions(&mut self) {
        self.deletions.clear();
    }

    // Param is passed by value, moved
    pub fn set_deletions(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.deletions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deletions(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.deletions
    }

    // Take field
    pub fn take_deletions(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.deletions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ChangeLogEntry_Successor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.successor)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.deletions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.successor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.successor);
        }
        for value in &self.deletions {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.successor.is_empty() {
            os.write_bytes(1, &self.successor)?;
        }
        for v in &self.deletions {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChangeLogEntry_Successor {
        ChangeLogEntry_Successor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "successor",
                |m: &ChangeLogEntry_Successor| { &m.successor },
                |m: &mut ChangeLogEntry_Successor| { &mut m.successor },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "deletions",
                |m: &ChangeLogEntry_Successor| { &m.deletions },
                |m: &mut ChangeLogEntry_Successor| { &mut m.deletions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChangeLogEntry_Successor>(
                "ChangeLogEntry.Successor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChangeLogEntry_Successor {
        static instance: ::protobuf::rt::LazyV2<ChangeLogEntry_Successor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChangeLogEntry_Successor::new)
    }
}

impl ::protobuf::Clear for ChangeLogEntry_Successor {
    fn clear(&mut self) {
        self.successor.clear();
        self.deletions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChangeLogEntry_Successor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeLogEntry_Successor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cmerkle.proto\"\xca\x01\n\x0eChangeLogEntry\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\x0cR\x06parent\x12\x1c\n\tadditions\x18\x02\x20\x03(\x0cR\
    \tadditions\x129\n\nsuccessors\x18\x03\x20\x03(\x0b2\x19.ChangeLogEntry.\
    SuccessorR\nsuccessors\x1aG\n\tSuccessor\x12\x1c\n\tsuccessor\x18\x01\
    \x20\x01(\x0cR\tsuccessor\x12\x1c\n\tdeletions\x18\x02\x20\x03(\x0cR\tde\
    letionsB%\n\x15sawtooth.sdk.protobufP\x01Z\nmerkle_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
