// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `transaction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionHeader {
    // message fields
    pub batcher_public_key: ::std::string::String,
    pub dependencies: ::protobuf::RepeatedField<::std::string::String>,
    pub family_name: ::std::string::String,
    pub family_version: ::std::string::String,
    pub inputs: ::protobuf::RepeatedField<::std::string::String>,
    pub nonce: ::std::string::String,
    pub outputs: ::protobuf::RepeatedField<::std::string::String>,
    pub payload_sha512: ::std::string::String,
    pub signer_public_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionHeader {
    fn default() -> &'a TransactionHeader {
        <TransactionHeader as ::protobuf::Message>::default_instance()
    }
}

impl TransactionHeader {
    pub fn new() -> TransactionHeader {
        ::std::default::Default::default()
    }

    // string batcher_public_key = 1;


    pub fn get_batcher_public_key(&self) -> &str {
        &self.batcher_public_key
    }
    pub fn clear_batcher_public_key(&mut self) {
        self.batcher_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_batcher_public_key(&mut self, v: ::std::string::String) {
        self.batcher_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batcher_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.batcher_public_key
    }

    // Take field
    pub fn take_batcher_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batcher_public_key, ::std::string::String::new())
    }

    // repeated string dependencies = 2;


    pub fn get_dependencies(&self) -> &[::std::string::String] {
        &self.dependencies
    }
    pub fn clear_dependencies(&mut self) {
        self.dependencies.clear();
    }

    // Param is passed by value, moved
    pub fn set_dependencies(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.dependencies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dependencies(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.dependencies
    }

    // Take field
    pub fn take_dependencies(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.dependencies, ::protobuf::RepeatedField::new())
    }

    // string family_name = 3;


    pub fn get_family_name(&self) -> &str {
        &self.family_name
    }
    pub fn clear_family_name(&mut self) {
        self.family_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_family_name(&mut self, v: ::std::string::String) {
        self.family_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family_name(&mut self) -> &mut ::std::string::String {
        &mut self.family_name
    }

    // Take field
    pub fn take_family_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.family_name, ::std::string::String::new())
    }

    // string family_version = 4;


    pub fn get_family_version(&self) -> &str {
        &self.family_version
    }
    pub fn clear_family_version(&mut self) {
        self.family_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_family_version(&mut self, v: ::std::string::String) {
        self.family_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family_version(&mut self) -> &mut ::std::string::String {
        &mut self.family_version
    }

    // Take field
    pub fn take_family_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.family_version, ::std::string::String::new())
    }

    // repeated string inputs = 5;


    pub fn get_inputs(&self) -> &[::std::string::String] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // string nonce = 6;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    // repeated string outputs = 7;


    pub fn get_outputs(&self) -> &[::std::string::String] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // string payload_sha512 = 9;


    pub fn get_payload_sha512(&self) -> &str {
        &self.payload_sha512
    }
    pub fn clear_payload_sha512(&mut self) {
        self.payload_sha512.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload_sha512(&mut self, v: ::std::string::String) {
        self.payload_sha512 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload_sha512(&mut self) -> &mut ::std::string::String {
        &mut self.payload_sha512
    }

    // Take field
    pub fn take_payload_sha512(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload_sha512, ::std::string::String::new())
    }

    // string signer_public_key = 10;


    pub fn get_signer_public_key(&self) -> &str {
        &self.signer_public_key
    }
    pub fn clear_signer_public_key(&mut self) {
        self.signer_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_public_key(&mut self, v: ::std::string::String) {
        self.signer_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.signer_public_key
    }

    // Take field
    pub fn take_signer_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer_public_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TransactionHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batcher_public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.dependencies)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.family_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.family_version)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.inputs)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.outputs)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload_sha512)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer_public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.batcher_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.batcher_public_key);
        }
        for value in &self.dependencies {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.family_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.family_name);
        }
        if !self.family_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.family_version);
        }
        for value in &self.inputs {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.nonce);
        }
        for value in &self.outputs {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.payload_sha512.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.payload_sha512);
        }
        if !self.signer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.signer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.batcher_public_key.is_empty() {
            os.write_string(1, &self.batcher_public_key)?;
        }
        for v in &self.dependencies {
            os.write_string(2, &v)?;
        };
        if !self.family_name.is_empty() {
            os.write_string(3, &self.family_name)?;
        }
        if !self.family_version.is_empty() {
            os.write_string(4, &self.family_version)?;
        }
        for v in &self.inputs {
            os.write_string(5, &v)?;
        };
        if !self.nonce.is_empty() {
            os.write_string(6, &self.nonce)?;
        }
        for v in &self.outputs {
            os.write_string(7, &v)?;
        };
        if !self.payload_sha512.is_empty() {
            os.write_string(9, &self.payload_sha512)?;
        }
        if !self.signer_public_key.is_empty() {
            os.write_string(10, &self.signer_public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionHeader {
        TransactionHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batcher_public_key",
                |m: &TransactionHeader| { &m.batcher_public_key },
                |m: &mut TransactionHeader| { &mut m.batcher_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dependencies",
                |m: &TransactionHeader| { &m.dependencies },
                |m: &mut TransactionHeader| { &mut m.dependencies },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "family_name",
                |m: &TransactionHeader| { &m.family_name },
                |m: &mut TransactionHeader| { &mut m.family_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "family_version",
                |m: &TransactionHeader| { &m.family_version },
                |m: &mut TransactionHeader| { &mut m.family_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inputs",
                |m: &TransactionHeader| { &m.inputs },
                |m: &mut TransactionHeader| { &mut m.inputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &TransactionHeader| { &m.nonce },
                |m: &mut TransactionHeader| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "outputs",
                |m: &TransactionHeader| { &m.outputs },
                |m: &mut TransactionHeader| { &mut m.outputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payload_sha512",
                |m: &TransactionHeader| { &m.payload_sha512 },
                |m: &mut TransactionHeader| { &mut m.payload_sha512 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signer_public_key",
                |m: &TransactionHeader| { &m.signer_public_key },
                |m: &mut TransactionHeader| { &mut m.signer_public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionHeader>(
                "TransactionHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionHeader {
        static instance: ::protobuf::rt::LazyV2<TransactionHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionHeader::new)
    }
}

impl ::protobuf::Clear for TransactionHeader {
    fn clear(&mut self) {
        self.batcher_public_key.clear();
        self.dependencies.clear();
        self.family_name.clear();
        self.family_version.clear();
        self.inputs.clear();
        self.nonce.clear();
        self.outputs.clear();
        self.payload_sha512.clear();
        self.signer_public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub header: ::std::vec::Vec<u8>,
    pub header_signature: ::std::string::String,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // bytes header = 1;


    pub fn get_header(&self) -> &[u8] {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::vec::Vec<u8>) {
        self.header = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.header, ::std::vec::Vec::new())
    }

    // string header_signature = 2;


    pub fn get_header_signature(&self) -> &str {
        &self.header_signature
    }
    pub fn clear_header_signature(&mut self) {
        self.header_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_header_signature(&mut self, v: ::std::string::String) {
        self.header_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_signature(&mut self) -> &mut ::std::string::String {
        &mut self.header_signature
    }

    // Take field
    pub fn take_header_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.header_signature, ::std::string::String::new())
    }

    // bytes payload = 3;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.header_signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.header.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header);
        }
        if !self.header_signature.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.header_signature);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.header.is_empty() {
            os.write_bytes(1, &self.header)?;
        }
        if !self.header_signature.is_empty() {
            os.write_string(2, &self.header_signature)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "header",
                |m: &Transaction| { &m.header },
                |m: &mut Transaction| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "header_signature",
                |m: &Transaction| { &m.header_signature },
                |m: &mut Transaction| { &mut m.header_signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Transaction| { &m.payload },
                |m: &mut Transaction| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transaction>(
                "Transaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transaction {
        static instance: ::protobuf::rt::LazyV2<Transaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transaction::new)
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.header.clear();
        self.header_signature.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionList {
    // message fields
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionList {
    fn default() -> &'a TransactionList {
        <TransactionList as ::protobuf::Message>::default_instance()
    }
}

impl TransactionList {
    pub fn new() -> TransactionList {
        ::std::default::Default::default()
    }

    // repeated .Transaction transactions = 1;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionList {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionList {
        TransactionList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transactions",
                |m: &TransactionList| { &m.transactions },
                |m: &mut TransactionList| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionList>(
                "TransactionList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionList {
        static instance: ::protobuf::rt::LazyV2<TransactionList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionList::new)
    }
}

impl ::protobuf::Clear for TransactionList {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11transaction.proto\"\xc8\x02\n\x11TransactionHeader\x12,\n\x12batch\
    er_public_key\x18\x01\x20\x01(\tR\x10batcherPublicKey\x12\"\n\x0cdepende\
    ncies\x18\x02\x20\x03(\tR\x0cdependencies\x12\x1f\n\x0bfamily_name\x18\
    \x03\x20\x01(\tR\nfamilyName\x12%\n\x0efamily_version\x18\x04\x20\x01(\t\
    R\rfamilyVersion\x12\x16\n\x06inputs\x18\x05\x20\x03(\tR\x06inputs\x12\
    \x14\n\x05nonce\x18\x06\x20\x01(\tR\x05nonce\x12\x18\n\x07outputs\x18\
    \x07\x20\x03(\tR\x07outputs\x12%\n\x0epayload_sha512\x18\t\x20\x01(\tR\r\
    payloadSha512\x12*\n\x11signer_public_key\x18\n\x20\x01(\tR\x0fsignerPub\
    licKey\"j\n\x0bTransaction\x12\x16\n\x06header\x18\x01\x20\x01(\x0cR\x06\
    header\x12)\n\x10header_signature\x18\x02\x20\x01(\tR\x0fheaderSignature\
    \x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\"C\n\x0fTransacti\
    onList\x120\n\x0ctransactions\x18\x01\x20\x03(\x0b2\x0c.TransactionR\x0c\
    transactionsB*\n\x15sawtooth.sdk.protobufP\x01Z\x0ftransaction_pb2b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
