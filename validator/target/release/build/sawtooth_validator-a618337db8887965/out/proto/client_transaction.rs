// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_transaction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientTransactionListRequest {
    // message fields
    pub head_id: ::std::string::String,
    pub transaction_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingControls>,
    pub sorting: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientTransactionListRequest {
    fn default() -> &'a ClientTransactionListRequest {
        <ClientTransactionListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientTransactionListRequest {
    pub fn new() -> ClientTransactionListRequest {
        ::std::default::Default::default()
    }

    // string head_id = 1;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // repeated string transaction_ids = 2;


    pub fn get_transaction_ids(&self) -> &[::std::string::String] {
        &self.transaction_ids
    }
    pub fn clear_transaction_ids(&mut self) {
        self.transaction_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.transaction_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transaction_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.transaction_ids
    }

    // Take field
    pub fn take_transaction_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.transaction_ids, ::protobuf::RepeatedField::new())
    }

    // .ClientPagingControls paging = 3;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingControls {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingControls as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingControls) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingControls {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingControls {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingControls::new())
    }

    // repeated .ClientSortControls sorting = 4;


    pub fn get_sorting(&self) -> &[super::client_list_control::ClientSortControls] {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sorting(&mut self) -> &mut ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        ::std::mem::replace(&mut self.sorting, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientTransactionListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sorting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.transaction_ids)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.head_id);
        }
        for value in &self.transaction_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.sorting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.head_id.is_empty() {
            os.write_string(1, &self.head_id)?;
        }
        for v in &self.transaction_ids {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.sorting {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientTransactionListRequest {
        ClientTransactionListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientTransactionListRequest| { &m.head_id },
                |m: &mut ClientTransactionListRequest| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transaction_ids",
                |m: &ClientTransactionListRequest| { &m.transaction_ids },
                |m: &mut ClientTransactionListRequest| { &mut m.transaction_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingControls>>(
                "paging",
                |m: &ClientTransactionListRequest| { &m.paging },
                |m: &mut ClientTransactionListRequest| { &mut m.paging },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientSortControls>>(
                "sorting",
                |m: &ClientTransactionListRequest| { &m.sorting },
                |m: &mut ClientTransactionListRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientTransactionListRequest>(
                "ClientTransactionListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientTransactionListRequest {
        static instance: ::protobuf::rt::LazyV2<ClientTransactionListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientTransactionListRequest::new)
    }
}

impl ::protobuf::Clear for ClientTransactionListRequest {
    fn clear(&mut self) {
        self.head_id.clear();
        self.transaction_ids.clear();
        self.paging.clear();
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientTransactionListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientTransactionListResponse {
    // message fields
    pub status: ClientTransactionListResponse_Status,
    pub transactions: ::protobuf::RepeatedField<super::transaction::Transaction>,
    pub head_id: ::std::string::String,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientTransactionListResponse {
    fn default() -> &'a ClientTransactionListResponse {
        <ClientTransactionListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientTransactionListResponse {
    pub fn new() -> ClientTransactionListResponse {
        ::std::default::Default::default()
    }

    // .ClientTransactionListResponse.Status status = 1;


    pub fn get_status(&self) -> ClientTransactionListResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientTransactionListResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientTransactionListResponse_Status) {
        self.status = v;
    }

    // repeated .Transaction transactions = 2;


    pub fn get_transactions(&self) -> &[super::transaction::Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::transaction::Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::transaction::Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::transaction::Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // string head_id = 3;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // .ClientPagingResponse paging = 4;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingResponse {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingResponse) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingResponse {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingResponse {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingResponse::new())
    }
}

impl ::protobuf::Message for ClientTransactionListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientTransactionListResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.head_id);
        }
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientTransactionListResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.transactions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.head_id.is_empty() {
            os.write_string(3, &self.head_id)?;
        }
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientTransactionListResponse {
        ClientTransactionListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientTransactionListResponse_Status>>(
                "status",
                |m: &ClientTransactionListResponse| { &m.status },
                |m: &mut ClientTransactionListResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::Transaction>>(
                "transactions",
                |m: &ClientTransactionListResponse| { &m.transactions },
                |m: &mut ClientTransactionListResponse| { &mut m.transactions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientTransactionListResponse| { &m.head_id },
                |m: &mut ClientTransactionListResponse| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingResponse>>(
                "paging",
                |m: &ClientTransactionListResponse| { &m.paging },
                |m: &mut ClientTransactionListResponse| { &mut m.paging },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientTransactionListResponse>(
                "ClientTransactionListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientTransactionListResponse {
        static instance: ::protobuf::rt::LazyV2<ClientTransactionListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientTransactionListResponse::new)
    }
}

impl ::protobuf::Clear for ClientTransactionListResponse {
    fn clear(&mut self) {
        self.status = ClientTransactionListResponse_Status::STATUS_UNSET;
        self.transactions.clear();
        self.head_id.clear();
        self.paging.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientTransactionListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientTransactionListResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NOT_READY = 3,
    NO_ROOT = 4,
    NO_RESOURCE = 5,
    INVALID_PAGING = 6,
    INVALID_SORT = 7,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientTransactionListResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientTransactionListResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientTransactionListResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientTransactionListResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientTransactionListResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientTransactionListResponse_Status::NOT_READY),
            4 => ::std::option::Option::Some(ClientTransactionListResponse_Status::NO_ROOT),
            5 => ::std::option::Option::Some(ClientTransactionListResponse_Status::NO_RESOURCE),
            6 => ::std::option::Option::Some(ClientTransactionListResponse_Status::INVALID_PAGING),
            7 => ::std::option::Option::Some(ClientTransactionListResponse_Status::INVALID_SORT),
            8 => ::std::option::Option::Some(ClientTransactionListResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientTransactionListResponse_Status] = &[
            ClientTransactionListResponse_Status::STATUS_UNSET,
            ClientTransactionListResponse_Status::OK,
            ClientTransactionListResponse_Status::INTERNAL_ERROR,
            ClientTransactionListResponse_Status::NOT_READY,
            ClientTransactionListResponse_Status::NO_ROOT,
            ClientTransactionListResponse_Status::NO_RESOURCE,
            ClientTransactionListResponse_Status::INVALID_PAGING,
            ClientTransactionListResponse_Status::INVALID_SORT,
            ClientTransactionListResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientTransactionListResponse_Status>("ClientTransactionListResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientTransactionListResponse_Status {
}

impl ::std::default::Default for ClientTransactionListResponse_Status {
    fn default() -> Self {
        ClientTransactionListResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionListResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientTransactionGetRequest {
    // message fields
    pub transaction_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientTransactionGetRequest {
    fn default() -> &'a ClientTransactionGetRequest {
        <ClientTransactionGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientTransactionGetRequest {
    pub fn new() -> ClientTransactionGetRequest {
        ::std::default::Default::default()
    }

    // string transaction_id = 1;


    pub fn get_transaction_id(&self) -> &str {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::string::String) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::string::String {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transaction_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientTransactionGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction_id.is_empty() {
            os.write_string(1, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientTransactionGetRequest {
        ClientTransactionGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transaction_id",
                |m: &ClientTransactionGetRequest| { &m.transaction_id },
                |m: &mut ClientTransactionGetRequest| { &mut m.transaction_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientTransactionGetRequest>(
                "ClientTransactionGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientTransactionGetRequest {
        static instance: ::protobuf::rt::LazyV2<ClientTransactionGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientTransactionGetRequest::new)
    }
}

impl ::protobuf::Clear for ClientTransactionGetRequest {
    fn clear(&mut self) {
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientTransactionGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientTransactionGetResponse {
    // message fields
    pub status: ClientTransactionGetResponse_Status,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientTransactionGetResponse {
    fn default() -> &'a ClientTransactionGetResponse {
        <ClientTransactionGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientTransactionGetResponse {
    pub fn new() -> ClientTransactionGetResponse {
        ::std::default::Default::default()
    }

    // .ClientTransactionGetResponse.Status status = 1;


    pub fn get_status(&self) -> ClientTransactionGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientTransactionGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientTransactionGetResponse_Status) {
        self.status = v;
    }

    // .Transaction transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::Transaction {
        self.transaction.as_ref().unwrap_or_else(|| <super::transaction::Transaction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::Transaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::Transaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::Transaction {
        self.transaction.take().unwrap_or_else(|| super::transaction::Transaction::new())
    }
}

impl ::protobuf::Message for ClientTransactionGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientTransactionGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientTransactionGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientTransactionGetResponse {
        ClientTransactionGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientTransactionGetResponse_Status>>(
                "status",
                |m: &ClientTransactionGetResponse| { &m.status },
                |m: &mut ClientTransactionGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::Transaction>>(
                "transaction",
                |m: &ClientTransactionGetResponse| { &m.transaction },
                |m: &mut ClientTransactionGetResponse| { &mut m.transaction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientTransactionGetResponse>(
                "ClientTransactionGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientTransactionGetResponse {
        static instance: ::protobuf::rt::LazyV2<ClientTransactionGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientTransactionGetResponse::new)
    }
}

impl ::protobuf::Clear for ClientTransactionGetResponse {
    fn clear(&mut self) {
        self.status = ClientTransactionGetResponse_Status::STATUS_UNSET;
        self.transaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientTransactionGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientTransactionGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NO_RESOURCE = 5,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientTransactionGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientTransactionGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientTransactionGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientTransactionGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientTransactionGetResponse_Status::INTERNAL_ERROR),
            5 => ::std::option::Option::Some(ClientTransactionGetResponse_Status::NO_RESOURCE),
            8 => ::std::option::Option::Some(ClientTransactionGetResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientTransactionGetResponse_Status] = &[
            ClientTransactionGetResponse_Status::STATUS_UNSET,
            ClientTransactionGetResponse_Status::OK,
            ClientTransactionGetResponse_Status::INTERNAL_ERROR,
            ClientTransactionGetResponse_Status::NO_RESOURCE,
            ClientTransactionGetResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientTransactionGetResponse_Status>("ClientTransactionGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientTransactionGetResponse_Status {
}

impl ::std::default::Default for ClientTransactionGetResponse_Status {
    fn default() -> Self {
        ClientTransactionGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTransactionGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18client_transaction.proto\x1a\x11transaction.proto\x1a\x19client_li\
    st_control.proto\"\xbe\x01\n\x1cClientTransactionListRequest\x12\x17\n\
    \x07head_id\x18\x01\x20\x01(\tR\x06headId\x12'\n\x0ftransaction_ids\x18\
    \x02\x20\x03(\tR\x0etransactionIds\x12-\n\x06paging\x18\x03\x20\x01(\x0b\
    2\x15.ClientPagingControlsR\x06paging\x12-\n\x07sorting\x18\x04\x20\x03(\
    \x0b2\x13.ClientSortControlsR\x07sorting\"\xf4\x02\n\x1dClientTransactio\
    nListResponse\x12=\n\x06status\x18\x01\x20\x01(\x0e2%.ClientTransactionL\
    istResponse.StatusR\x06status\x120\n\x0ctransactions\x18\x02\x20\x03(\
    \x0b2\x0c.TransactionR\x0ctransactions\x12\x17\n\x07head_id\x18\x03\x20\
    \x01(\tR\x06headId\x12-\n\x06paging\x18\x04\x20\x01(\x0b2\x15.ClientPagi\
    ngResponseR\x06paging\"\x99\x01\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\
    \x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\x12\r\
    \n\tNOT_READY\x10\x03\x12\x0b\n\x07NO_ROOT\x10\x04\x12\x0f\n\x0bNO_RESOU\
    RCE\x10\x05\x12\x12\n\x0eINVALID_PAGING\x10\x06\x12\x10\n\x0cINVALID_SOR\
    T\x10\x07\x12\x0e\n\nINVALID_ID\x10\x08\"D\n\x1bClientTransactionGetRequ\
    est\x12%\n\x0etransaction_id\x18\x01\x20\x01(\tR\rtransactionId\"\xe5\
    \x01\n\x1cClientTransactionGetResponse\x12<\n\x06status\x18\x01\x20\x01(\
    \x0e2$.ClientTransactionGetResponse.StatusR\x06status\x12.\n\x0btransact\
    ion\x18\x02\x20\x01(\x0b2\x0c.TransactionR\x0btransaction\"W\n\x06Status\
    \x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eIN\
    TERNAL_ERROR\x10\x02\x12\x0f\n\x0bNO_RESOURCE\x10\x05\x12\x0e\n\nINVALID\
    _ID\x10\x08B1\n\x15sawtooth.sdk.protobufP\x01Z\x16client_transaction_pb2\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
