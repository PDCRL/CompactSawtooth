// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_batch.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchListRequest {
    // message fields
    pub head_id: ::std::string::String,
    pub batch_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingControls>,
    pub sorting: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchListRequest {
    fn default() -> &'a ClientBatchListRequest {
        <ClientBatchListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchListRequest {
    pub fn new() -> ClientBatchListRequest {
        ::std::default::Default::default()
    }

    // string head_id = 1;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // repeated string batch_ids = 2;


    pub fn get_batch_ids(&self) -> &[::std::string::String] {
        &self.batch_ids
    }
    pub fn clear_batch_ids(&mut self) {
        self.batch_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.batch_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.batch_ids
    }

    // Take field
    pub fn take_batch_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.batch_ids, ::protobuf::RepeatedField::new())
    }

    // .ClientPagingControls paging = 3;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingControls {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingControls as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingControls) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingControls {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingControls {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingControls::new())
    }

    // repeated .ClientSortControls sorting = 4;


    pub fn get_sorting(&self) -> &[super::client_list_control::ClientSortControls] {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sorting(&mut self) -> &mut ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        ::std::mem::replace(&mut self.sorting, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientBatchListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sorting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.batch_ids)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.head_id);
        }
        for value in &self.batch_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.sorting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.head_id.is_empty() {
            os.write_string(1, &self.head_id)?;
        }
        for v in &self.batch_ids {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.sorting {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchListRequest {
        ClientBatchListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientBatchListRequest| { &m.head_id },
                |m: &mut ClientBatchListRequest| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_ids",
                |m: &ClientBatchListRequest| { &m.batch_ids },
                |m: &mut ClientBatchListRequest| { &mut m.batch_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingControls>>(
                "paging",
                |m: &ClientBatchListRequest| { &m.paging },
                |m: &mut ClientBatchListRequest| { &mut m.paging },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientSortControls>>(
                "sorting",
                |m: &ClientBatchListRequest| { &m.sorting },
                |m: &mut ClientBatchListRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchListRequest>(
                "ClientBatchListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchListRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBatchListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchListRequest::new)
    }
}

impl ::protobuf::Clear for ClientBatchListRequest {
    fn clear(&mut self) {
        self.head_id.clear();
        self.batch_ids.clear();
        self.paging.clear();
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchListResponse {
    // message fields
    pub status: ClientBatchListResponse_Status,
    pub batches: ::protobuf::RepeatedField<super::batch::Batch>,
    pub head_id: ::std::string::String,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchListResponse {
    fn default() -> &'a ClientBatchListResponse {
        <ClientBatchListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchListResponse {
    pub fn new() -> ClientBatchListResponse {
        ::std::default::Default::default()
    }

    // .ClientBatchListResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBatchListResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBatchListResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBatchListResponse_Status) {
        self.status = v;
    }

    // repeated .Batch batches = 2;


    pub fn get_batches(&self) -> &[super::batch::Batch] {
        &self.batches
    }
    pub fn clear_batches(&mut self) {
        self.batches.clear();
    }

    // Param is passed by value, moved
    pub fn set_batches(&mut self, v: ::protobuf::RepeatedField<super::batch::Batch>) {
        self.batches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batches(&mut self) -> &mut ::protobuf::RepeatedField<super::batch::Batch> {
        &mut self.batches
    }

    // Take field
    pub fn take_batches(&mut self) -> ::protobuf::RepeatedField<super::batch::Batch> {
        ::std::mem::replace(&mut self.batches, ::protobuf::RepeatedField::new())
    }

    // string head_id = 3;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // .ClientPagingResponse paging = 4;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingResponse {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingResponse) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingResponse {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingResponse {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingResponse::new())
    }
}

impl ::protobuf::Message for ClientBatchListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.batches {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batches)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBatchListResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.batches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.head_id);
        }
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBatchListResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.batches {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.head_id.is_empty() {
            os.write_string(3, &self.head_id)?;
        }
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchListResponse {
        ClientBatchListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBatchListResponse_Status>>(
                "status",
                |m: &ClientBatchListResponse| { &m.status },
                |m: &mut ClientBatchListResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::batch::Batch>>(
                "batches",
                |m: &ClientBatchListResponse| { &m.batches },
                |m: &mut ClientBatchListResponse| { &mut m.batches },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientBatchListResponse| { &m.head_id },
                |m: &mut ClientBatchListResponse| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingResponse>>(
                "paging",
                |m: &ClientBatchListResponse| { &m.paging },
                |m: &mut ClientBatchListResponse| { &mut m.paging },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchListResponse>(
                "ClientBatchListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchListResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBatchListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchListResponse::new)
    }
}

impl ::protobuf::Clear for ClientBatchListResponse {
    fn clear(&mut self) {
        self.status = ClientBatchListResponse_Status::STATUS_UNSET;
        self.batches.clear();
        self.head_id.clear();
        self.paging.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBatchListResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NOT_READY = 3,
    NO_ROOT = 4,
    NO_RESOURCE = 5,
    INVALID_PAGING = 6,
    INVALID_SORT = 7,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientBatchListResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBatchListResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBatchListResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBatchListResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBatchListResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientBatchListResponse_Status::NOT_READY),
            4 => ::std::option::Option::Some(ClientBatchListResponse_Status::NO_ROOT),
            5 => ::std::option::Option::Some(ClientBatchListResponse_Status::NO_RESOURCE),
            6 => ::std::option::Option::Some(ClientBatchListResponse_Status::INVALID_PAGING),
            7 => ::std::option::Option::Some(ClientBatchListResponse_Status::INVALID_SORT),
            8 => ::std::option::Option::Some(ClientBatchListResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBatchListResponse_Status] = &[
            ClientBatchListResponse_Status::STATUS_UNSET,
            ClientBatchListResponse_Status::OK,
            ClientBatchListResponse_Status::INTERNAL_ERROR,
            ClientBatchListResponse_Status::NOT_READY,
            ClientBatchListResponse_Status::NO_ROOT,
            ClientBatchListResponse_Status::NO_RESOURCE,
            ClientBatchListResponse_Status::INVALID_PAGING,
            ClientBatchListResponse_Status::INVALID_SORT,
            ClientBatchListResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBatchListResponse_Status>("ClientBatchListResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBatchListResponse_Status {
}

impl ::std::default::Default for ClientBatchListResponse_Status {
    fn default() -> Self {
        ClientBatchListResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchListResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchGetRequest {
    // message fields
    pub batch_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchGetRequest {
    fn default() -> &'a ClientBatchGetRequest {
        <ClientBatchGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchGetRequest {
    pub fn new() -> ClientBatchGetRequest {
        ::std::default::Default::default()
    }

    // string batch_id = 1;


    pub fn get_batch_id(&self) -> &str {
        &self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: ::std::string::String) {
        self.batch_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch_id(&mut self) -> &mut ::std::string::String {
        &mut self.batch_id
    }

    // Take field
    pub fn take_batch_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batch_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientBatchGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batch_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.batch_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.batch_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.batch_id.is_empty() {
            os.write_string(1, &self.batch_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchGetRequest {
        ClientBatchGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_id",
                |m: &ClientBatchGetRequest| { &m.batch_id },
                |m: &mut ClientBatchGetRequest| { &mut m.batch_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchGetRequest>(
                "ClientBatchGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchGetRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBatchGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchGetRequest::new)
    }
}

impl ::protobuf::Clear for ClientBatchGetRequest {
    fn clear(&mut self) {
        self.batch_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchGetResponse {
    // message fields
    pub status: ClientBatchGetResponse_Status,
    pub batch: ::protobuf::SingularPtrField<super::batch::Batch>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchGetResponse {
    fn default() -> &'a ClientBatchGetResponse {
        <ClientBatchGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchGetResponse {
    pub fn new() -> ClientBatchGetResponse {
        ::std::default::Default::default()
    }

    // .ClientBatchGetResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBatchGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBatchGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBatchGetResponse_Status) {
        self.status = v;
    }

    // .Batch batch = 2;


    pub fn get_batch(&self) -> &super::batch::Batch {
        self.batch.as_ref().unwrap_or_else(|| <super::batch::Batch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_batch(&mut self) {
        self.batch.clear();
    }

    pub fn has_batch(&self) -> bool {
        self.batch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: super::batch::Batch) {
        self.batch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch(&mut self) -> &mut super::batch::Batch {
        if self.batch.is_none() {
            self.batch.set_default();
        }
        self.batch.as_mut().unwrap()
    }

    // Take field
    pub fn take_batch(&mut self) -> super::batch::Batch {
        self.batch.take().unwrap_or_else(|| super::batch::Batch::new())
    }
}

impl ::protobuf::Message for ClientBatchGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.batch {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.batch)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBatchGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.batch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBatchGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.batch.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchGetResponse {
        ClientBatchGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBatchGetResponse_Status>>(
                "status",
                |m: &ClientBatchGetResponse| { &m.status },
                |m: &mut ClientBatchGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::batch::Batch>>(
                "batch",
                |m: &ClientBatchGetResponse| { &m.batch },
                |m: &mut ClientBatchGetResponse| { &mut m.batch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchGetResponse>(
                "ClientBatchGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchGetResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBatchGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchGetResponse::new)
    }
}

impl ::protobuf::Clear for ClientBatchGetResponse {
    fn clear(&mut self) {
        self.status = ClientBatchGetResponse_Status::STATUS_UNSET;
        self.batch.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBatchGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NO_RESOURCE = 5,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientBatchGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBatchGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBatchGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBatchGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBatchGetResponse_Status::INTERNAL_ERROR),
            5 => ::std::option::Option::Some(ClientBatchGetResponse_Status::NO_RESOURCE),
            8 => ::std::option::Option::Some(ClientBatchGetResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBatchGetResponse_Status] = &[
            ClientBatchGetResponse_Status::STATUS_UNSET,
            ClientBatchGetResponse_Status::OK,
            ClientBatchGetResponse_Status::INTERNAL_ERROR,
            ClientBatchGetResponse_Status::NO_RESOURCE,
            ClientBatchGetResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBatchGetResponse_Status>("ClientBatchGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBatchGetResponse_Status {
}

impl ::std::default::Default for ClientBatchGetResponse_Status {
    fn default() -> Self {
        ClientBatchGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12client_batch.proto\x1a\x0bbatch.proto\x1a\x19client_list_control.p\
    roto\"\xac\x01\n\x16ClientBatchListRequest\x12\x17\n\x07head_id\x18\x01\
    \x20\x01(\tR\x06headId\x12\x1b\n\tbatch_ids\x18\x02\x20\x03(\tR\x08batch\
    Ids\x12-\n\x06paging\x18\x03\x20\x01(\x0b2\x15.ClientPagingControlsR\x06\
    paging\x12-\n\x07sorting\x18\x04\x20\x03(\x0b2\x13.ClientSortControlsR\
    \x07sorting\"\xd8\x02\n\x17ClientBatchListResponse\x127\n\x06status\x18\
    \x01\x20\x01(\x0e2\x1f.ClientBatchListResponse.StatusR\x06status\x12\x20\
    \n\x07batches\x18\x02\x20\x03(\x0b2\x06.BatchR\x07batches\x12\x17\n\x07h\
    ead_id\x18\x03\x20\x01(\tR\x06headId\x12-\n\x06paging\x18\x04\x20\x01(\
    \x0b2\x15.ClientPagingResponseR\x06paging\"\x99\x01\n\x06Status\x12\x10\
    \n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_E\
    RROR\x10\x02\x12\r\n\tNOT_READY\x10\x03\x12\x0b\n\x07NO_ROOT\x10\x04\x12\
    \x0f\n\x0bNO_RESOURCE\x10\x05\x12\x12\n\x0eINVALID_PAGING\x10\x06\x12\
    \x10\n\x0cINVALID_SORT\x10\x07\x12\x0e\n\nINVALID_ID\x10\x08\"2\n\x15Cli\
    entBatchGetRequest\x12\x19\n\x08batch_id\x18\x01\x20\x01(\tR\x07batchId\
    \"\xc7\x01\n\x16ClientBatchGetResponse\x126\n\x06status\x18\x01\x20\x01(\
    \x0e2\x1e.ClientBatchGetResponse.StatusR\x06status\x12\x1c\n\x05batch\
    \x18\x02\x20\x01(\x0b2\x06.BatchR\x05batch\"W\n\x06Status\x12\x10\n\x0cS\
    TATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\
    \x10\x02\x12\x0f\n\x0bNO_RESOURCE\x10\x05\x12\x0e\n\nINVALID_ID\x10\x08B\
    +\n\x15sawtooth.sdk.protobufP\x01Z\x10client_batch_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
