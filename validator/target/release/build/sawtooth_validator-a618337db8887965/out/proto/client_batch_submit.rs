// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_batch_submit.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchStatus {
    // message fields
    pub batch_id: ::std::string::String,
    pub status: ClientBatchStatus_Status,
    pub invalid_transactions: ::protobuf::RepeatedField<ClientBatchStatus_InvalidTransaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchStatus {
    fn default() -> &'a ClientBatchStatus {
        <ClientBatchStatus as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchStatus {
    pub fn new() -> ClientBatchStatus {
        ::std::default::Default::default()
    }

    // string batch_id = 1;


    pub fn get_batch_id(&self) -> &str {
        &self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: ::std::string::String) {
        self.batch_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch_id(&mut self) -> &mut ::std::string::String {
        &mut self.batch_id
    }

    // Take field
    pub fn take_batch_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batch_id, ::std::string::String::new())
    }

    // .ClientBatchStatus.Status status = 2;


    pub fn get_status(&self) -> ClientBatchStatus_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBatchStatus_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBatchStatus_Status) {
        self.status = v;
    }

    // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;


    pub fn get_invalid_transactions(&self) -> &[ClientBatchStatus_InvalidTransaction] {
        &self.invalid_transactions
    }
    pub fn clear_invalid_transactions(&mut self) {
        self.invalid_transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_invalid_transactions(&mut self, v: ::protobuf::RepeatedField<ClientBatchStatus_InvalidTransaction>) {
        self.invalid_transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_invalid_transactions(&mut self) -> &mut ::protobuf::RepeatedField<ClientBatchStatus_InvalidTransaction> {
        &mut self.invalid_transactions
    }

    // Take field
    pub fn take_invalid_transactions(&mut self) -> ::protobuf::RepeatedField<ClientBatchStatus_InvalidTransaction> {
        ::std::mem::replace(&mut self.invalid_transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientBatchStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.invalid_transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batch_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.invalid_transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.batch_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.batch_id);
        }
        if self.status != ClientBatchStatus_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        for value in &self.invalid_transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.batch_id.is_empty() {
            os.write_string(1, &self.batch_id)?;
        }
        if self.status != ClientBatchStatus_Status::STATUS_UNSET {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.invalid_transactions {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchStatus {
        ClientBatchStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_id",
                |m: &ClientBatchStatus| { &m.batch_id },
                |m: &mut ClientBatchStatus| { &mut m.batch_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBatchStatus_Status>>(
                "status",
                |m: &ClientBatchStatus| { &m.status },
                |m: &mut ClientBatchStatus| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientBatchStatus_InvalidTransaction>>(
                "invalid_transactions",
                |m: &ClientBatchStatus| { &m.invalid_transactions },
                |m: &mut ClientBatchStatus| { &mut m.invalid_transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchStatus>(
                "ClientBatchStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchStatus {
        static instance: ::protobuf::rt::LazyV2<ClientBatchStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchStatus::new)
    }
}

impl ::protobuf::Clear for ClientBatchStatus {
    fn clear(&mut self) {
        self.batch_id.clear();
        self.status = ClientBatchStatus_Status::STATUS_UNSET;
        self.invalid_transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchStatus_InvalidTransaction {
    // message fields
    pub transaction_id: ::std::string::String,
    pub message: ::std::string::String,
    pub extended_data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchStatus_InvalidTransaction {
    fn default() -> &'a ClientBatchStatus_InvalidTransaction {
        <ClientBatchStatus_InvalidTransaction as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchStatus_InvalidTransaction {
    pub fn new() -> ClientBatchStatus_InvalidTransaction {
        ::std::default::Default::default()
    }

    // string transaction_id = 1;


    pub fn get_transaction_id(&self) -> &str {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::string::String) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::string::String {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transaction_id, ::std::string::String::new())
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // bytes extended_data = 3;


    pub fn get_extended_data(&self) -> &[u8] {
        &self.extended_data
    }
    pub fn clear_extended_data(&mut self) {
        self.extended_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_extended_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.extended_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.extended_data
    }

    // Take field
    pub fn take_extended_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.extended_data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ClientBatchStatus_InvalidTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transaction_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.extended_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.transaction_id);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if !self.extended_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.extended_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction_id.is_empty() {
            os.write_string(1, &self.transaction_id)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if !self.extended_data.is_empty() {
            os.write_bytes(3, &self.extended_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchStatus_InvalidTransaction {
        ClientBatchStatus_InvalidTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transaction_id",
                |m: &ClientBatchStatus_InvalidTransaction| { &m.transaction_id },
                |m: &mut ClientBatchStatus_InvalidTransaction| { &mut m.transaction_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &ClientBatchStatus_InvalidTransaction| { &m.message },
                |m: &mut ClientBatchStatus_InvalidTransaction| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "extended_data",
                |m: &ClientBatchStatus_InvalidTransaction| { &m.extended_data },
                |m: &mut ClientBatchStatus_InvalidTransaction| { &mut m.extended_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchStatus_InvalidTransaction>(
                "ClientBatchStatus.InvalidTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchStatus_InvalidTransaction {
        static instance: ::protobuf::rt::LazyV2<ClientBatchStatus_InvalidTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchStatus_InvalidTransaction::new)
    }
}

impl ::protobuf::Clear for ClientBatchStatus_InvalidTransaction {
    fn clear(&mut self) {
        self.transaction_id.clear();
        self.message.clear();
        self.extended_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchStatus_InvalidTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatus_InvalidTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBatchStatus_Status {
    STATUS_UNSET = 0,
    COMMITTED = 1,
    INVALID = 2,
    PENDING = 3,
    UNKNOWN = 4,
}

impl ::protobuf::ProtobufEnum for ClientBatchStatus_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBatchStatus_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBatchStatus_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBatchStatus_Status::COMMITTED),
            2 => ::std::option::Option::Some(ClientBatchStatus_Status::INVALID),
            3 => ::std::option::Option::Some(ClientBatchStatus_Status::PENDING),
            4 => ::std::option::Option::Some(ClientBatchStatus_Status::UNKNOWN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBatchStatus_Status] = &[
            ClientBatchStatus_Status::STATUS_UNSET,
            ClientBatchStatus_Status::COMMITTED,
            ClientBatchStatus_Status::INVALID,
            ClientBatchStatus_Status::PENDING,
            ClientBatchStatus_Status::UNKNOWN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBatchStatus_Status>("ClientBatchStatus.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBatchStatus_Status {
}

impl ::std::default::Default for ClientBatchStatus_Status {
    fn default() -> Self {
        ClientBatchStatus_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatus_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchSubmitRequest {
    // message fields
    pub batches: ::protobuf::RepeatedField<super::batch::Batch>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchSubmitRequest {
    fn default() -> &'a ClientBatchSubmitRequest {
        <ClientBatchSubmitRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchSubmitRequest {
    pub fn new() -> ClientBatchSubmitRequest {
        ::std::default::Default::default()
    }

    // repeated .Batch batches = 1;


    pub fn get_batches(&self) -> &[super::batch::Batch] {
        &self.batches
    }
    pub fn clear_batches(&mut self) {
        self.batches.clear();
    }

    // Param is passed by value, moved
    pub fn set_batches(&mut self, v: ::protobuf::RepeatedField<super::batch::Batch>) {
        self.batches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batches(&mut self) -> &mut ::protobuf::RepeatedField<super::batch::Batch> {
        &mut self.batches
    }

    // Take field
    pub fn take_batches(&mut self) -> ::protobuf::RepeatedField<super::batch::Batch> {
        ::std::mem::replace(&mut self.batches, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientBatchSubmitRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.batches {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batches)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.batches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.batches {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchSubmitRequest {
        ClientBatchSubmitRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::batch::Batch>>(
                "batches",
                |m: &ClientBatchSubmitRequest| { &m.batches },
                |m: &mut ClientBatchSubmitRequest| { &mut m.batches },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchSubmitRequest>(
                "ClientBatchSubmitRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchSubmitRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBatchSubmitRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchSubmitRequest::new)
    }
}

impl ::protobuf::Clear for ClientBatchSubmitRequest {
    fn clear(&mut self) {
        self.batches.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchSubmitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchSubmitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchSubmitResponse {
    // message fields
    pub status: ClientBatchSubmitResponse_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchSubmitResponse {
    fn default() -> &'a ClientBatchSubmitResponse {
        <ClientBatchSubmitResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchSubmitResponse {
    pub fn new() -> ClientBatchSubmitResponse {
        ::std::default::Default::default()
    }

    // .ClientBatchSubmitResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBatchSubmitResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBatchSubmitResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBatchSubmitResponse_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ClientBatchSubmitResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBatchSubmitResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBatchSubmitResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchSubmitResponse {
        ClientBatchSubmitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBatchSubmitResponse_Status>>(
                "status",
                |m: &ClientBatchSubmitResponse| { &m.status },
                |m: &mut ClientBatchSubmitResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchSubmitResponse>(
                "ClientBatchSubmitResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchSubmitResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBatchSubmitResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchSubmitResponse::new)
    }
}

impl ::protobuf::Clear for ClientBatchSubmitResponse {
    fn clear(&mut self) {
        self.status = ClientBatchSubmitResponse_Status::STATUS_UNSET;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchSubmitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchSubmitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBatchSubmitResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    INVALID_BATCH = 3,
    QUEUE_FULL = 4,
}

impl ::protobuf::ProtobufEnum for ClientBatchSubmitResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBatchSubmitResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBatchSubmitResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBatchSubmitResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBatchSubmitResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientBatchSubmitResponse_Status::INVALID_BATCH),
            4 => ::std::option::Option::Some(ClientBatchSubmitResponse_Status::QUEUE_FULL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBatchSubmitResponse_Status] = &[
            ClientBatchSubmitResponse_Status::STATUS_UNSET,
            ClientBatchSubmitResponse_Status::OK,
            ClientBatchSubmitResponse_Status::INTERNAL_ERROR,
            ClientBatchSubmitResponse_Status::INVALID_BATCH,
            ClientBatchSubmitResponse_Status::QUEUE_FULL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBatchSubmitResponse_Status>("ClientBatchSubmitResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBatchSubmitResponse_Status {
}

impl ::std::default::Default for ClientBatchSubmitResponse_Status {
    fn default() -> Self {
        ClientBatchSubmitResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchSubmitResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchStatusRequest {
    // message fields
    pub batch_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub wait: bool,
    pub timeout: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchStatusRequest {
    fn default() -> &'a ClientBatchStatusRequest {
        <ClientBatchStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchStatusRequest {
    pub fn new() -> ClientBatchStatusRequest {
        ::std::default::Default::default()
    }

    // repeated string batch_ids = 1;


    pub fn get_batch_ids(&self) -> &[::std::string::String] {
        &self.batch_ids
    }
    pub fn clear_batch_ids(&mut self) {
        self.batch_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.batch_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.batch_ids
    }

    // Take field
    pub fn take_batch_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.batch_ids, ::protobuf::RepeatedField::new())
    }

    // bool wait = 2;


    pub fn get_wait(&self) -> bool {
        self.wait
    }
    pub fn clear_wait(&mut self) {
        self.wait = false;
    }

    // Param is passed by value, moved
    pub fn set_wait(&mut self, v: bool) {
        self.wait = v;
    }

    // uint32 timeout = 3;


    pub fn get_timeout(&self) -> u32 {
        self.timeout
    }
    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: u32) {
        self.timeout = v;
    }
}

impl ::protobuf::Message for ClientBatchStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.batch_ids)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wait = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timeout = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.batch_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.wait != false {
            my_size += 2;
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.batch_ids {
            os.write_string(1, &v)?;
        };
        if self.wait != false {
            os.write_bool(2, self.wait)?;
        }
        if self.timeout != 0 {
            os.write_uint32(3, self.timeout)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchStatusRequest {
        ClientBatchStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_ids",
                |m: &ClientBatchStatusRequest| { &m.batch_ids },
                |m: &mut ClientBatchStatusRequest| { &mut m.batch_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "wait",
                |m: &ClientBatchStatusRequest| { &m.wait },
                |m: &mut ClientBatchStatusRequest| { &mut m.wait },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "timeout",
                |m: &ClientBatchStatusRequest| { &m.timeout },
                |m: &mut ClientBatchStatusRequest| { &mut m.timeout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchStatusRequest>(
                "ClientBatchStatusRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchStatusRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBatchStatusRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchStatusRequest::new)
    }
}

impl ::protobuf::Clear for ClientBatchStatusRequest {
    fn clear(&mut self) {
        self.batch_ids.clear();
        self.wait = false;
        self.timeout = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBatchStatusResponse {
    // message fields
    pub status: ClientBatchStatusResponse_Status,
    pub batch_statuses: ::protobuf::RepeatedField<ClientBatchStatus>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBatchStatusResponse {
    fn default() -> &'a ClientBatchStatusResponse {
        <ClientBatchStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBatchStatusResponse {
    pub fn new() -> ClientBatchStatusResponse {
        ::std::default::Default::default()
    }

    // .ClientBatchStatusResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBatchStatusResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBatchStatusResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBatchStatusResponse_Status) {
        self.status = v;
    }

    // repeated .ClientBatchStatus batch_statuses = 2;


    pub fn get_batch_statuses(&self) -> &[ClientBatchStatus] {
        &self.batch_statuses
    }
    pub fn clear_batch_statuses(&mut self) {
        self.batch_statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_statuses(&mut self, v: ::protobuf::RepeatedField<ClientBatchStatus>) {
        self.batch_statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch_statuses(&mut self) -> &mut ::protobuf::RepeatedField<ClientBatchStatus> {
        &mut self.batch_statuses
    }

    // Take field
    pub fn take_batch_statuses(&mut self) -> ::protobuf::RepeatedField<ClientBatchStatus> {
        ::std::mem::replace(&mut self.batch_statuses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientBatchStatusResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.batch_statuses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batch_statuses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBatchStatusResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.batch_statuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBatchStatusResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.batch_statuses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBatchStatusResponse {
        ClientBatchStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBatchStatusResponse_Status>>(
                "status",
                |m: &ClientBatchStatusResponse| { &m.status },
                |m: &mut ClientBatchStatusResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientBatchStatus>>(
                "batch_statuses",
                |m: &ClientBatchStatusResponse| { &m.batch_statuses },
                |m: &mut ClientBatchStatusResponse| { &mut m.batch_statuses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBatchStatusResponse>(
                "ClientBatchStatusResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBatchStatusResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBatchStatusResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBatchStatusResponse::new)
    }
}

impl ::protobuf::Clear for ClientBatchStatusResponse {
    fn clear(&mut self) {
        self.status = ClientBatchStatusResponse_Status::STATUS_UNSET;
        self.batch_statuses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBatchStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBatchStatusResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NO_RESOURCE = 5,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientBatchStatusResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBatchStatusResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBatchStatusResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBatchStatusResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBatchStatusResponse_Status::INTERNAL_ERROR),
            5 => ::std::option::Option::Some(ClientBatchStatusResponse_Status::NO_RESOURCE),
            8 => ::std::option::Option::Some(ClientBatchStatusResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBatchStatusResponse_Status] = &[
            ClientBatchStatusResponse_Status::STATUS_UNSET,
            ClientBatchStatusResponse_Status::OK,
            ClientBatchStatusResponse_Status::INTERNAL_ERROR,
            ClientBatchStatusResponse_Status::NO_RESOURCE,
            ClientBatchStatusResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBatchStatusResponse_Status>("ClientBatchStatusResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBatchStatusResponse_Status {
}

impl ::std::default::Default for ClientBatchStatusResponse_Status {
    fn default() -> Self {
        ClientBatchStatusResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBatchStatusResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19client_batch_submit.proto\x1a\x0bbatch.proto\"\x89\x03\n\x11Client\
    BatchStatus\x12\x19\n\x08batch_id\x18\x01\x20\x01(\tR\x07batchId\x121\n\
    \x06status\x18\x02\x20\x01(\x0e2\x19.ClientBatchStatus.StatusR\x06status\
    \x12X\n\x14invalid_transactions\x18\x03\x20\x03(\x0b2%.ClientBatchStatus\
    .InvalidTransactionR\x13invalidTransactions\x1az\n\x12InvalidTransaction\
    \x12%\n\x0etransaction_id\x18\x01\x20\x01(\tR\rtransactionId\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\x12#\n\rextended_data\x18\x03\
    \x20\x01(\x0cR\x0cextendedData\"P\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\
    \x10\0\x12\r\n\tCOMMITTED\x10\x01\x12\x0b\n\x07INVALID\x10\x02\x12\x0b\n\
    \x07PENDING\x10\x03\x12\x0b\n\x07UNKNOWN\x10\x04\"<\n\x18ClientBatchSubm\
    itRequest\x12\x20\n\x07batches\x18\x01\x20\x03(\x0b2\x06.BatchR\x07batch\
    es\"\xb1\x01\n\x19ClientBatchSubmitResponse\x129\n\x06status\x18\x01\x20\
    \x01(\x0e2!.ClientBatchSubmitResponse.StatusR\x06status\"Y\n\x06Status\
    \x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eIN\
    TERNAL_ERROR\x10\x02\x12\x11\n\rINVALID_BATCH\x10\x03\x12\x0e\n\nQUEUE_F\
    ULL\x10\x04\"e\n\x18ClientBatchStatusRequest\x12\x1b\n\tbatch_ids\x18\
    \x01\x20\x03(\tR\x08batchIds\x12\x12\n\x04wait\x18\x02\x20\x01(\x08R\x04\
    wait\x12\x18\n\x07timeout\x18\x03\x20\x01(\rR\x07timeout\"\xea\x01\n\x19\
    ClientBatchStatusResponse\x129\n\x06status\x18\x01\x20\x01(\x0e2!.Client\
    BatchStatusResponse.StatusR\x06status\x129\n\x0ebatch_statuses\x18\x02\
    \x20\x03(\x0b2\x12.ClientBatchStatusR\rbatchStatuses\"W\n\x06Status\x12\
    \x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERN\
    AL_ERROR\x10\x02\x12\x0f\n\x0bNO_RESOURCE\x10\x05\x12\x0e\n\nINVALID_ID\
    \x10\x08B2\n\x15sawtooth.sdk.protobufP\x01Z\x17client_batch_submit_pb2b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
