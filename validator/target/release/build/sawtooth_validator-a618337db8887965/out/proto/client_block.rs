// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_block.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockListRequest {
    // message fields
    pub head_id: ::std::string::String,
    pub block_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingControls>,
    pub sorting: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockListRequest {
    fn default() -> &'a ClientBlockListRequest {
        <ClientBlockListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockListRequest {
    pub fn new() -> ClientBlockListRequest {
        ::std::default::Default::default()
    }

    // string head_id = 1;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // repeated string block_ids = 2;


    pub fn get_block_ids(&self) -> &[::std::string::String] {
        &self.block_ids
    }
    pub fn clear_block_ids(&mut self) {
        self.block_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.block_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.block_ids
    }

    // Take field
    pub fn take_block_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.block_ids, ::protobuf::RepeatedField::new())
    }

    // .ClientPagingControls paging = 3;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingControls {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingControls as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingControls) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingControls {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingControls {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingControls::new())
    }

    // repeated .ClientSortControls sorting = 4;


    pub fn get_sorting(&self) -> &[super::client_list_control::ClientSortControls] {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::protobuf::RepeatedField<super::client_list_control::ClientSortControls>) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sorting(&mut self) -> &mut ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::protobuf::RepeatedField<super::client_list_control::ClientSortControls> {
        ::std::mem::replace(&mut self.sorting, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientBlockListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sorting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.block_ids)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.head_id);
        }
        for value in &self.block_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.sorting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.head_id.is_empty() {
            os.write_string(1, &self.head_id)?;
        }
        for v in &self.block_ids {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.sorting {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockListRequest {
        ClientBlockListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientBlockListRequest| { &m.head_id },
                |m: &mut ClientBlockListRequest| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_ids",
                |m: &ClientBlockListRequest| { &m.block_ids },
                |m: &mut ClientBlockListRequest| { &mut m.block_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingControls>>(
                "paging",
                |m: &ClientBlockListRequest| { &m.paging },
                |m: &mut ClientBlockListRequest| { &mut m.paging },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientSortControls>>(
                "sorting",
                |m: &ClientBlockListRequest| { &m.sorting },
                |m: &mut ClientBlockListRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockListRequest>(
                "ClientBlockListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockListRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBlockListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockListRequest::new)
    }
}

impl ::protobuf::Clear for ClientBlockListRequest {
    fn clear(&mut self) {
        self.head_id.clear();
        self.block_ids.clear();
        self.paging.clear();
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockListResponse {
    // message fields
    pub status: ClientBlockListResponse_Status,
    pub blocks: ::protobuf::RepeatedField<super::block::Block>,
    pub head_id: ::std::string::String,
    pub paging: ::protobuf::SingularPtrField<super::client_list_control::ClientPagingResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockListResponse {
    fn default() -> &'a ClientBlockListResponse {
        <ClientBlockListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockListResponse {
    pub fn new() -> ClientBlockListResponse {
        ::std::default::Default::default()
    }

    // .ClientBlockListResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBlockListResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBlockListResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBlockListResponse_Status) {
        self.status = v;
    }

    // repeated .Block blocks = 2;


    pub fn get_blocks(&self) -> &[super::block::Block] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<super::block::Block>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<super::block::Block> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<super::block::Block> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }

    // string head_id = 3;


    pub fn get_head_id(&self) -> &str {
        &self.head_id
    }
    pub fn clear_head_id(&mut self) {
        self.head_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_head_id(&mut self, v: ::std::string::String) {
        self.head_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_id(&mut self) -> &mut ::std::string::String {
        &mut self.head_id
    }

    // Take field
    pub fn take_head_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.head_id, ::std::string::String::new())
    }

    // .ClientPagingResponse paging = 4;


    pub fn get_paging(&self) -> &super::client_list_control::ClientPagingResponse {
        self.paging.as_ref().unwrap_or_else(|| <super::client_list_control::ClientPagingResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: super::client_list_control::ClientPagingResponse) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut super::client_list_control::ClientPagingResponse {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> super::client_list_control::ClientPagingResponse {
        self.paging.take().unwrap_or_else(|| super::client_list_control::ClientPagingResponse::new())
    }
}

impl ::protobuf::Message for ClientBlockListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.head_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBlockListResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.head_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.head_id);
        }
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBlockListResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.blocks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.head_id.is_empty() {
            os.write_string(3, &self.head_id)?;
        }
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockListResponse {
        ClientBlockListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBlockListResponse_Status>>(
                "status",
                |m: &ClientBlockListResponse| { &m.status },
                |m: &mut ClientBlockListResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::block::Block>>(
                "blocks",
                |m: &ClientBlockListResponse| { &m.blocks },
                |m: &mut ClientBlockListResponse| { &mut m.blocks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "head_id",
                |m: &ClientBlockListResponse| { &m.head_id },
                |m: &mut ClientBlockListResponse| { &mut m.head_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client_list_control::ClientPagingResponse>>(
                "paging",
                |m: &ClientBlockListResponse| { &m.paging },
                |m: &mut ClientBlockListResponse| { &mut m.paging },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockListResponse>(
                "ClientBlockListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockListResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBlockListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockListResponse::new)
    }
}

impl ::protobuf::Clear for ClientBlockListResponse {
    fn clear(&mut self) {
        self.status = ClientBlockListResponse_Status::STATUS_UNSET;
        self.blocks.clear();
        self.head_id.clear();
        self.paging.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBlockListResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NOT_READY = 3,
    NO_ROOT = 4,
    NO_RESOURCE = 5,
    INVALID_PAGING = 6,
    INVALID_SORT = 7,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientBlockListResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBlockListResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBlockListResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBlockListResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBlockListResponse_Status::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ClientBlockListResponse_Status::NOT_READY),
            4 => ::std::option::Option::Some(ClientBlockListResponse_Status::NO_ROOT),
            5 => ::std::option::Option::Some(ClientBlockListResponse_Status::NO_RESOURCE),
            6 => ::std::option::Option::Some(ClientBlockListResponse_Status::INVALID_PAGING),
            7 => ::std::option::Option::Some(ClientBlockListResponse_Status::INVALID_SORT),
            8 => ::std::option::Option::Some(ClientBlockListResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBlockListResponse_Status] = &[
            ClientBlockListResponse_Status::STATUS_UNSET,
            ClientBlockListResponse_Status::OK,
            ClientBlockListResponse_Status::INTERNAL_ERROR,
            ClientBlockListResponse_Status::NOT_READY,
            ClientBlockListResponse_Status::NO_ROOT,
            ClientBlockListResponse_Status::NO_RESOURCE,
            ClientBlockListResponse_Status::INVALID_PAGING,
            ClientBlockListResponse_Status::INVALID_SORT,
            ClientBlockListResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBlockListResponse_Status>("ClientBlockListResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBlockListResponse_Status {
}

impl ::std::default::Default for ClientBlockListResponse_Status {
    fn default() -> Self {
        ClientBlockListResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockListResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockGetByIdRequest {
    // message fields
    pub block_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockGetByIdRequest {
    fn default() -> &'a ClientBlockGetByIdRequest {
        <ClientBlockGetByIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockGetByIdRequest {
    pub fn new() -> ClientBlockGetByIdRequest {
        ::std::default::Default::default()
    }

    // string block_id = 1;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientBlockGetByIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_string(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockGetByIdRequest {
        ClientBlockGetByIdRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &ClientBlockGetByIdRequest| { &m.block_id },
                |m: &mut ClientBlockGetByIdRequest| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockGetByIdRequest>(
                "ClientBlockGetByIdRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockGetByIdRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBlockGetByIdRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockGetByIdRequest::new)
    }
}

impl ::protobuf::Clear for ClientBlockGetByIdRequest {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockGetByIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetByIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockGetByNumRequest {
    // message fields
    pub block_num: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockGetByNumRequest {
    fn default() -> &'a ClientBlockGetByNumRequest {
        <ClientBlockGetByNumRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockGetByNumRequest {
    pub fn new() -> ClientBlockGetByNumRequest {
        ::std::default::Default::default()
    }

    // uint64 block_num = 1;


    pub fn get_block_num(&self) -> u64 {
        self.block_num
    }
    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: u64) {
        self.block_num = v;
    }
}

impl ::protobuf::Message for ClientBlockGetByNumRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_num != 0 {
            os.write_uint64(1, self.block_num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockGetByNumRequest {
        ClientBlockGetByNumRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_num",
                |m: &ClientBlockGetByNumRequest| { &m.block_num },
                |m: &mut ClientBlockGetByNumRequest| { &mut m.block_num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockGetByNumRequest>(
                "ClientBlockGetByNumRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockGetByNumRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBlockGetByNumRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockGetByNumRequest::new)
    }
}

impl ::protobuf::Clear for ClientBlockGetByNumRequest {
    fn clear(&mut self) {
        self.block_num = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockGetByNumRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetByNumRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockGetByTransactionIdRequest {
    // message fields
    pub transaction_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockGetByTransactionIdRequest {
    fn default() -> &'a ClientBlockGetByTransactionIdRequest {
        <ClientBlockGetByTransactionIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockGetByTransactionIdRequest {
    pub fn new() -> ClientBlockGetByTransactionIdRequest {
        ::std::default::Default::default()
    }

    // string transaction_id = 1;


    pub fn get_transaction_id(&self) -> &str {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::string::String) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::string::String {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transaction_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientBlockGetByTransactionIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction_id.is_empty() {
            os.write_string(1, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockGetByTransactionIdRequest {
        ClientBlockGetByTransactionIdRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transaction_id",
                |m: &ClientBlockGetByTransactionIdRequest| { &m.transaction_id },
                |m: &mut ClientBlockGetByTransactionIdRequest| { &mut m.transaction_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockGetByTransactionIdRequest>(
                "ClientBlockGetByTransactionIdRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockGetByTransactionIdRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBlockGetByTransactionIdRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockGetByTransactionIdRequest::new)
    }
}

impl ::protobuf::Clear for ClientBlockGetByTransactionIdRequest {
    fn clear(&mut self) {
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockGetByTransactionIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetByTransactionIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockGetByBatchIdRequest {
    // message fields
    pub batch_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockGetByBatchIdRequest {
    fn default() -> &'a ClientBlockGetByBatchIdRequest {
        <ClientBlockGetByBatchIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockGetByBatchIdRequest {
    pub fn new() -> ClientBlockGetByBatchIdRequest {
        ::std::default::Default::default()
    }

    // string batch_id = 1;


    pub fn get_batch_id(&self) -> &str {
        &self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: ::std::string::String) {
        self.batch_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch_id(&mut self) -> &mut ::std::string::String {
        &mut self.batch_id
    }

    // Take field
    pub fn take_batch_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batch_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientBlockGetByBatchIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batch_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.batch_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.batch_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.batch_id.is_empty() {
            os.write_string(1, &self.batch_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockGetByBatchIdRequest {
        ClientBlockGetByBatchIdRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_id",
                |m: &ClientBlockGetByBatchIdRequest| { &m.batch_id },
                |m: &mut ClientBlockGetByBatchIdRequest| { &mut m.batch_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockGetByBatchIdRequest>(
                "ClientBlockGetByBatchIdRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockGetByBatchIdRequest {
        static instance: ::protobuf::rt::LazyV2<ClientBlockGetByBatchIdRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockGetByBatchIdRequest::new)
    }
}

impl ::protobuf::Clear for ClientBlockGetByBatchIdRequest {
    fn clear(&mut self) {
        self.batch_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockGetByBatchIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetByBatchIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientBlockGetResponse {
    // message fields
    pub status: ClientBlockGetResponse_Status,
    pub block: ::protobuf::SingularPtrField<super::block::Block>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientBlockGetResponse {
    fn default() -> &'a ClientBlockGetResponse {
        <ClientBlockGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientBlockGetResponse {
    pub fn new() -> ClientBlockGetResponse {
        ::std::default::Default::default()
    }

    // .ClientBlockGetResponse.Status status = 1;


    pub fn get_status(&self) -> ClientBlockGetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ClientBlockGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ClientBlockGetResponse_Status) {
        self.status = v;
    }

    // .Block block = 2;


    pub fn get_block(&self) -> &super::block::Block {
        self.block.as_ref().unwrap_or_else(|| <super::block::Block as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::block::Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::block::Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::block::Block {
        self.block.take().unwrap_or_else(|| super::block::Block::new())
    }
}

impl ::protobuf::Message for ClientBlockGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ClientBlockGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ClientBlockGetResponse_Status::STATUS_UNSET {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientBlockGetResponse {
        ClientBlockGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientBlockGetResponse_Status>>(
                "status",
                |m: &ClientBlockGetResponse| { &m.status },
                |m: &mut ClientBlockGetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::block::Block>>(
                "block",
                |m: &ClientBlockGetResponse| { &m.block },
                |m: &mut ClientBlockGetResponse| { &mut m.block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientBlockGetResponse>(
                "ClientBlockGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientBlockGetResponse {
        static instance: ::protobuf::rt::LazyV2<ClientBlockGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientBlockGetResponse::new)
    }
}

impl ::protobuf::Clear for ClientBlockGetResponse {
    fn clear(&mut self) {
        self.status = ClientBlockGetResponse_Status::STATUS_UNSET;
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientBlockGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientBlockGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INTERNAL_ERROR = 2,
    NO_RESOURCE = 5,
    INVALID_ID = 8,
}

impl ::protobuf::ProtobufEnum for ClientBlockGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientBlockGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(ClientBlockGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(ClientBlockGetResponse_Status::OK),
            2 => ::std::option::Option::Some(ClientBlockGetResponse_Status::INTERNAL_ERROR),
            5 => ::std::option::Option::Some(ClientBlockGetResponse_Status::NO_RESOURCE),
            8 => ::std::option::Option::Some(ClientBlockGetResponse_Status::INVALID_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientBlockGetResponse_Status] = &[
            ClientBlockGetResponse_Status::STATUS_UNSET,
            ClientBlockGetResponse_Status::OK,
            ClientBlockGetResponse_Status::INTERNAL_ERROR,
            ClientBlockGetResponse_Status::NO_RESOURCE,
            ClientBlockGetResponse_Status::INVALID_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientBlockGetResponse_Status>("ClientBlockGetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientBlockGetResponse_Status {
}

impl ::std::default::Default for ClientBlockGetResponse_Status {
    fn default() -> Self {
        ClientBlockGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBlockGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12client_block.proto\x1a\x0bblock.proto\x1a\x19client_list_control.p\
    roto\"\xac\x01\n\x16ClientBlockListRequest\x12\x17\n\x07head_id\x18\x01\
    \x20\x01(\tR\x06headId\x12\x1b\n\tblock_ids\x18\x02\x20\x03(\tR\x08block\
    Ids\x12-\n\x06paging\x18\x03\x20\x01(\x0b2\x15.ClientPagingControlsR\x06\
    paging\x12-\n\x07sorting\x18\x04\x20\x03(\x0b2\x13.ClientSortControlsR\
    \x07sorting\"\xd6\x02\n\x17ClientBlockListResponse\x127\n\x06status\x18\
    \x01\x20\x01(\x0e2\x1f.ClientBlockListResponse.StatusR\x06status\x12\x1e\
    \n\x06blocks\x18\x02\x20\x03(\x0b2\x06.BlockR\x06blocks\x12\x17\n\x07hea\
    d_id\x18\x03\x20\x01(\tR\x06headId\x12-\n\x06paging\x18\x04\x20\x01(\x0b\
    2\x15.ClientPagingResponseR\x06paging\"\x99\x01\n\x06Status\x12\x10\n\
    \x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERR\
    OR\x10\x02\x12\r\n\tNOT_READY\x10\x03\x12\x0b\n\x07NO_ROOT\x10\x04\x12\
    \x0f\n\x0bNO_RESOURCE\x10\x05\x12\x12\n\x0eINVALID_PAGING\x10\x06\x12\
    \x10\n\x0cINVALID_SORT\x10\x07\x12\x0e\n\nINVALID_ID\x10\x08\"6\n\x19Cli\
    entBlockGetByIdRequest\x12\x19\n\x08block_id\x18\x01\x20\x01(\tR\x07bloc\
    kId\"9\n\x1aClientBlockGetByNumRequest\x12\x1b\n\tblock_num\x18\x01\x20\
    \x01(\x04R\x08blockNum\"M\n$ClientBlockGetByTransactionIdRequest\x12%\n\
    \x0etransaction_id\x18\x01\x20\x01(\tR\rtransactionId\";\n\x1eClientBloc\
    kGetByBatchIdRequest\x12\x19\n\x08batch_id\x18\x01\x20\x01(\tR\x07batchI\
    d\"\xc7\x01\n\x16ClientBlockGetResponse\x126\n\x06status\x18\x01\x20\x01\
    (\x0e2\x1e.ClientBlockGetResponse.StatusR\x06status\x12\x1c\n\x05block\
    \x18\x02\x20\x01(\x0b2\x06.BlockR\x05block\"W\n\x06Status\x12\x10\n\x0cS\
    TATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\
    \x10\x02\x12\x0f\n\x0bNO_RESOURCE\x10\x05\x12\x0e\n\nINVALID_ID\x10\x08B\
    +\n\x15sawtooth.sdk.protobufP\x01Z\x10client_block_pb2b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
